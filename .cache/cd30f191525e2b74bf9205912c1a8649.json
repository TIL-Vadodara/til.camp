{"dependencies":[{"name":"/Volumes/Work/forks/til.camp/package.json","includedInParent":true,"mtime":1524300285000},{"name":"/Volumes/Work/forks/til.camp/.browserslistrc","includedInParent":true,"mtime":1524300285000},{"name":"/Volumes/Work/forks/til.camp/node_modules/@firebase/database/package.json","includedInParent":true,"mtime":1519337717000},{"name":"@firebase/util","loc":{"line":22,"column":21}},{"name":"./util/util","loc":{"line":19,"column":21}},{"name":"./operation/AckUserWrite","loc":{"line":20,"column":29}},{"name":"./snap/ChildrenNode","loc":{"line":21,"column":29}},{"name":"./util/ImmutableTree","loc":{"line":23,"column":30}},{"name":"./operation/ListenComplete","loc":{"line":24,"column":31}},{"name":"./operation/Merge","loc":{"line":25,"column":22}},{"name":"./operation/Operation","loc":{"line":26,"column":26}},{"name":"./operation/Overwrite","loc":{"line":27,"column":26}},{"name":"./util/Path","loc":{"line":28,"column":21}},{"name":"./SyncPoint","loc":{"line":29,"column":26}},{"name":"./WriteTree","loc":{"line":30,"column":26}}],"generated":{"js":"\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar util_1 = require(\"@firebase/util\");\nvar util_2 = require(\"./util/util\");\nvar AckUserWrite_1 = require(\"./operation/AckUserWrite\");\nvar ChildrenNode_1 = require(\"./snap/ChildrenNode\");\nvar util_3 = require(\"@firebase/util\");\nvar ImmutableTree_1 = require(\"./util/ImmutableTree\");\nvar ListenComplete_1 = require(\"./operation/ListenComplete\");\nvar Merge_1 = require(\"./operation/Merge\");\nvar Operation_1 = require(\"./operation/Operation\");\nvar Overwrite_1 = require(\"./operation/Overwrite\");\nvar Path_1 = require(\"./util/Path\");\nvar SyncPoint_1 = require(\"./SyncPoint\");\nvar WriteTree_1 = require(\"./WriteTree\");\n/**\n * SyncTree is the central class for managing event callback registration, data caching, views\n * (query processing), and event generation.  There are typically two SyncTree instances for\n * each Repo, one for the normal Firebase data, and one for the .info data.\n *\n * It has a number of responsibilities, including:\n *  - Tracking all user event callbacks (registered via addEventRegistration() and removeEventRegistration()).\n *  - Applying and caching data changes for user set(), transaction(), and update() calls\n *    (applyUserOverwrite(), applyUserMerge()).\n *  - Applying and caching data changes for server data changes (applyServerOverwrite(),\n *    applyServerMerge()).\n *  - Generating user-facing events for server and user changes (all of the apply* methods\n *    return the set of events that need to be raised as a result).\n *  - Maintaining the appropriate set of server listens to ensure we are always subscribed\n *    to the correct set of paths and queries to satisfy the current set of user event\n *    callbacks (listens are started/stopped using the provided listenProvider).\n *\n * NOTE: Although SyncTree tracks event callbacks and calculates events to raise, the actual\n * events are returned to the caller rather than raised synchronously.\n *\n * @constructor\n */\nvar SyncTree = /** @class */ (function () {\n    /**\n     * @param {!ListenProvider} listenProvider_ Used by SyncTree to start / stop listening\n     *   to server data.\n     */\n    function SyncTree(listenProvider_) {\n        this.listenProvider_ = listenProvider_;\n        /**\n         * Tree of SyncPoints.  There's a SyncPoint at any location that has 1 or more views.\n         * @type {!ImmutableTree.<!SyncPoint>}\n         * @private\n         */\n        this.syncPointTree_ = ImmutableTree_1.ImmutableTree.Empty;\n        /**\n         * A tree of all pending user writes (user-initiated set()'s, transaction()'s, update()'s, etc.).\n         * @type {!WriteTree}\n         * @private\n         */\n        this.pendingWriteTree_ = new WriteTree_1.WriteTree();\n        this.tagToQueryMap_ = {};\n        this.queryToTagMap_ = {};\n    }\n    /**\n     * Apply the data changes for a user-generated set() or transaction() call.\n     *\n     * @param {!Path} path\n     * @param {!Node} newData\n     * @param {number} writeId\n     * @param {boolean=} visible\n     * @return {!Array.<!Event>} Events to raise.\n     */\n    SyncTree.prototype.applyUserOverwrite = function (path, newData, writeId, visible) {\n        // Record pending write.\n        this.pendingWriteTree_.addOverwrite(path, newData, writeId, visible);\n        if (!visible) {\n            return [];\n        }\n        else {\n            return this.applyOperationToSyncPoints_(new Overwrite_1.Overwrite(Operation_1.OperationSource.User, path, newData));\n        }\n    };\n    /**\n     * Apply the data from a user-generated update() call\n     *\n     * @param {!Path} path\n     * @param {!Object.<string, !Node>} changedChildren\n     * @param {!number} writeId\n     * @return {!Array.<!Event>} Events to raise.\n     */\n    SyncTree.prototype.applyUserMerge = function (path, changedChildren, writeId) {\n        // Record pending merge.\n        this.pendingWriteTree_.addMerge(path, changedChildren, writeId);\n        var changeTree = ImmutableTree_1.ImmutableTree.fromObject(changedChildren);\n        return this.applyOperationToSyncPoints_(new Merge_1.Merge(Operation_1.OperationSource.User, path, changeTree));\n    };\n    /**\n     * Acknowledge a pending user write that was previously registered with applyUserOverwrite() or applyUserMerge().\n     *\n     * @param {!number} writeId\n     * @param {boolean=} revert True if the given write failed and needs to be reverted\n     * @return {!Array.<!Event>} Events to raise.\n     */\n    SyncTree.prototype.ackUserWrite = function (writeId, revert) {\n        if (revert === void 0) { revert = false; }\n        var write = this.pendingWriteTree_.getWrite(writeId);\n        var needToReevaluate = this.pendingWriteTree_.removeWrite(writeId);\n        if (!needToReevaluate) {\n            return [];\n        }\n        else {\n            var affectedTree_1 = ImmutableTree_1.ImmutableTree.Empty;\n            if (write.snap != null) {\n                // overwrite\n                affectedTree_1 = affectedTree_1.set(Path_1.Path.Empty, true);\n            }\n            else {\n                util_3.forEach(write.children, function (pathString, node) {\n                    affectedTree_1 = affectedTree_1.set(new Path_1.Path(pathString), node);\n                });\n            }\n            return this.applyOperationToSyncPoints_(new AckUserWrite_1.AckUserWrite(write.path, affectedTree_1, revert));\n        }\n    };\n    /**\n     * Apply new server data for the specified path..\n     *\n     * @param {!Path} path\n     * @param {!Node} newData\n     * @return {!Array.<!Event>} Events to raise.\n     */\n    SyncTree.prototype.applyServerOverwrite = function (path, newData) {\n        return this.applyOperationToSyncPoints_(new Overwrite_1.Overwrite(Operation_1.OperationSource.Server, path, newData));\n    };\n    /**\n     * Apply new server data to be merged in at the specified path.\n     *\n     * @param {!Path} path\n     * @param {!Object.<string, !Node>} changedChildren\n     * @return {!Array.<!Event>} Events to raise.\n     */\n    SyncTree.prototype.applyServerMerge = function (path, changedChildren) {\n        var changeTree = ImmutableTree_1.ImmutableTree.fromObject(changedChildren);\n        return this.applyOperationToSyncPoints_(new Merge_1.Merge(Operation_1.OperationSource.Server, path, changeTree));\n    };\n    /**\n     * Apply a listen complete for a query\n     *\n     * @param {!Path} path\n     * @return {!Array.<!Event>} Events to raise.\n     */\n    SyncTree.prototype.applyListenComplete = function (path) {\n        return this.applyOperationToSyncPoints_(new ListenComplete_1.ListenComplete(Operation_1.OperationSource.Server, path));\n    };\n    /**\n     * Apply new server data for the specified tagged query.\n     *\n     * @param {!Path} path\n     * @param {!Node} snap\n     * @param {!number} tag\n     * @return {!Array.<!Event>} Events to raise.\n     */\n    SyncTree.prototype.applyTaggedQueryOverwrite = function (path, snap, tag) {\n        var queryKey = this.queryKeyForTag_(tag);\n        if (queryKey != null) {\n            var r = SyncTree.parseQueryKey_(queryKey);\n            var queryPath = r.path, queryId = r.queryId;\n            var relativePath = Path_1.Path.relativePath(queryPath, path);\n            var op = new Overwrite_1.Overwrite(Operation_1.OperationSource.forServerTaggedQuery(queryId), relativePath, snap);\n            return this.applyTaggedOperation_(queryPath, op);\n        }\n        else {\n            // Query must have been removed already\n            return [];\n        }\n    };\n    /**\n     * Apply server data to be merged in for the specified tagged query.\n     *\n     * @param {!Path} path\n     * @param {!Object.<string, !Node>} changedChildren\n     * @param {!number} tag\n     * @return {!Array.<!Event>} Events to raise.\n     */\n    SyncTree.prototype.applyTaggedQueryMerge = function (path, changedChildren, tag) {\n        var queryKey = this.queryKeyForTag_(tag);\n        if (queryKey) {\n            var r = SyncTree.parseQueryKey_(queryKey);\n            var queryPath = r.path, queryId = r.queryId;\n            var relativePath = Path_1.Path.relativePath(queryPath, path);\n            var changeTree = ImmutableTree_1.ImmutableTree.fromObject(changedChildren);\n            var op = new Merge_1.Merge(Operation_1.OperationSource.forServerTaggedQuery(queryId), relativePath, changeTree);\n            return this.applyTaggedOperation_(queryPath, op);\n        }\n        else {\n            // We've already removed the query. No big deal, ignore the update\n            return [];\n        }\n    };\n    /**\n     * Apply a listen complete for a tagged query\n     *\n     * @param {!Path} path\n     * @param {!number} tag\n     * @return {!Array.<!Event>} Events to raise.\n     */\n    SyncTree.prototype.applyTaggedListenComplete = function (path, tag) {\n        var queryKey = this.queryKeyForTag_(tag);\n        if (queryKey) {\n            var r = SyncTree.parseQueryKey_(queryKey);\n            var queryPath = r.path, queryId = r.queryId;\n            var relativePath = Path_1.Path.relativePath(queryPath, path);\n            var op = new ListenComplete_1.ListenComplete(Operation_1.OperationSource.forServerTaggedQuery(queryId), relativePath);\n            return this.applyTaggedOperation_(queryPath, op);\n        }\n        else {\n            // We've already removed the query. No big deal, ignore the update\n            return [];\n        }\n    };\n    /**\n     * Add an event callback for the specified query.\n     *\n     * @param {!Query} query\n     * @param {!EventRegistration} eventRegistration\n     * @return {!Array.<!Event>} Events to raise.\n     */\n    SyncTree.prototype.addEventRegistration = function (query, eventRegistration) {\n        var path = query.path;\n        var serverCache = null;\n        var foundAncestorDefaultView = false;\n        // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\n        // Consider optimizing this once there's a better understanding of what actual behavior will be.\n        this.syncPointTree_.foreachOnPath(path, function (pathToSyncPoint, sp) {\n            var relativePath = Path_1.Path.relativePath(pathToSyncPoint, path);\n            serverCache = serverCache || sp.getCompleteServerCache(relativePath);\n            foundAncestorDefaultView =\n                foundAncestorDefaultView || sp.hasCompleteView();\n        });\n        var syncPoint = this.syncPointTree_.get(path);\n        if (!syncPoint) {\n            syncPoint = new SyncPoint_1.SyncPoint();\n            this.syncPointTree_ = this.syncPointTree_.set(path, syncPoint);\n        }\n        else {\n            foundAncestorDefaultView =\n                foundAncestorDefaultView || syncPoint.hasCompleteView();\n            serverCache = serverCache || syncPoint.getCompleteServerCache(Path_1.Path.Empty);\n        }\n        var serverCacheComplete;\n        if (serverCache != null) {\n            serverCacheComplete = true;\n        }\n        else {\n            serverCacheComplete = false;\n            serverCache = ChildrenNode_1.ChildrenNode.EMPTY_NODE;\n            var subtree = this.syncPointTree_.subtree(path);\n            subtree.foreachChild(function (childName, childSyncPoint) {\n                var completeCache = childSyncPoint.getCompleteServerCache(Path_1.Path.Empty);\n                if (completeCache) {\n                    serverCache = serverCache.updateImmediateChild(childName, completeCache);\n                }\n            });\n        }\n        var viewAlreadyExists = syncPoint.viewExistsForQuery(query);\n        if (!viewAlreadyExists && !query.getQueryParams().loadsAllData()) {\n            // We need to track a tag for this query\n            var queryKey = SyncTree.makeQueryKey_(query);\n            util_1.assert(!(queryKey in this.queryToTagMap_), 'View does not exist, but we have a tag');\n            var tag = SyncTree.getNextQueryTag_();\n            this.queryToTagMap_[queryKey] = tag;\n            // Coerce to string to avoid sparse arrays.\n            this.tagToQueryMap_['_' + tag] = queryKey;\n        }\n        var writesCache = this.pendingWriteTree_.childWrites(path);\n        var events = syncPoint.addEventRegistration(query, eventRegistration, writesCache, serverCache, serverCacheComplete);\n        if (!viewAlreadyExists && !foundAncestorDefaultView) {\n            var view /** @type !View */ = syncPoint.viewForQuery(query);\n            events = events.concat(this.setupListener_(query, view));\n        }\n        return events;\n    };\n    /**\n     * Remove event callback(s).\n     *\n     * If query is the default query, we'll check all queries for the specified eventRegistration.\n     * If eventRegistration is null, we'll remove all callbacks for the specified query/queries.\n     *\n     * @param {!Query} query\n     * @param {?EventRegistration} eventRegistration If null, all callbacks are removed.\n     * @param {Error=} cancelError If a cancelError is provided, appropriate cancel events will be returned.\n     * @return {!Array.<!Event>} Cancel events, if cancelError was provided.\n     */\n    SyncTree.prototype.removeEventRegistration = function (query, eventRegistration, cancelError) {\n        var _this = this;\n        // Find the syncPoint first. Then deal with whether or not it has matching listeners\n        var path = query.path;\n        var maybeSyncPoint = this.syncPointTree_.get(path);\n        var cancelEvents = [];\n        // A removal on a default query affects all queries at that location. A removal on an indexed query, even one without\n        // other query constraints, does *not* affect all queries at that location. So this check must be for 'default', and\n        // not loadsAllData().\n        if (maybeSyncPoint &&\n            (query.queryIdentifier() === 'default' ||\n                maybeSyncPoint.viewExistsForQuery(query))) {\n            /**\n             * @type {{removed: !Array.<!Query>, events: !Array.<!Event>}}\n             */\n            var removedAndEvents = maybeSyncPoint.removeEventRegistration(query, eventRegistration, cancelError);\n            if (maybeSyncPoint.isEmpty()) {\n                this.syncPointTree_ = this.syncPointTree_.remove(path);\n            }\n            var removed = removedAndEvents.removed;\n            cancelEvents = removedAndEvents.events;\n            // We may have just removed one of many listeners and can short-circuit this whole process\n            // We may also not have removed a default listener, in which case all of the descendant listeners should already be\n            // properly set up.\n            //\n            // Since indexed queries can shadow if they don't have other query constraints, check for loadsAllData(), instead of\n            // queryId === 'default'\n            var removingDefault = -1 !==\n                removed.findIndex(function (query) {\n                    return query.getQueryParams().loadsAllData();\n                });\n            var covered = this.syncPointTree_.findOnPath(path, function (relativePath, parentSyncPoint) {\n                return parentSyncPoint.hasCompleteView();\n            });\n            if (removingDefault && !covered) {\n                var subtree = this.syncPointTree_.subtree(path);\n                // There are potentially child listeners. Determine what if any listens we need to send before executing the\n                // removal\n                if (!subtree.isEmpty()) {\n                    // We need to fold over our subtree and collect the listeners to send\n                    var newViews = this.collectDistinctViewsForSubTree_(subtree);\n                    // Ok, we've collected all the listens we need. Set them up.\n                    for (var i = 0; i < newViews.length; ++i) {\n                        var view = newViews[i], newQuery = view.getQuery();\n                        var listener = this.createListenerForView_(view);\n                        this.listenProvider_.startListening(SyncTree.queryForListening_(newQuery), this.tagForQuery_(newQuery), listener.hashFn, listener.onComplete);\n                    }\n                }\n                else {\n                    // There's nothing below us, so nothing we need to start listening on\n                }\n            }\n            // If we removed anything and we're not covered by a higher up listen, we need to stop listening on this query\n            // The above block has us covered in terms of making sure we're set up on listens lower in the tree.\n            // Also, note that if we have a cancelError, it's already been removed at the provider level.\n            if (!covered && removed.length > 0 && !cancelError) {\n                // If we removed a default, then we weren't listening on any of the other queries here. Just cancel the one\n                // default. Otherwise, we need to iterate through and cancel each individual query\n                if (removingDefault) {\n                    // We don't tag default listeners\n                    var defaultTag = null;\n                    this.listenProvider_.stopListening(SyncTree.queryForListening_(query), defaultTag);\n                }\n                else {\n                    removed.forEach(function (queryToRemove) {\n                        var tagToRemove = _this.queryToTagMap_[SyncTree.makeQueryKey_(queryToRemove)];\n                        _this.listenProvider_.stopListening(SyncTree.queryForListening_(queryToRemove), tagToRemove);\n                    });\n                }\n            }\n            // Now, clear all of the tags we're tracking for the removed listens\n            this.removeTags_(removed);\n        }\n        else {\n            // No-op, this listener must've been already removed\n        }\n        return cancelEvents;\n    };\n    /**\n     * Returns a complete cache, if we have one, of the data at a particular path. The location must have a listener above\n     * it, but as this is only used by transaction code, that should always be the case anyways.\n     *\n     * Note: this method will *include* hidden writes from transaction with applyLocally set to false.\n     * @param {!Path} path The path to the data we want\n     * @param {Array.<number>=} writeIdsToExclude A specific set to be excluded\n     * @return {?Node}\n     */\n    SyncTree.prototype.calcCompleteEventCache = function (path, writeIdsToExclude) {\n        var includeHiddenSets = true;\n        var writeTree = this.pendingWriteTree_;\n        var serverCache = this.syncPointTree_.findOnPath(path, function (pathSoFar, syncPoint) {\n            var relativePath = Path_1.Path.relativePath(pathSoFar, path);\n            var serverCache = syncPoint.getCompleteServerCache(relativePath);\n            if (serverCache) {\n                return serverCache;\n            }\n        });\n        return writeTree.calcCompleteEventCache(path, serverCache, writeIdsToExclude, includeHiddenSets);\n    };\n    /**\n     * This collapses multiple unfiltered views into a single view, since we only need a single\n     * listener for them.\n     *\n     * @param {!ImmutableTree.<!SyncPoint>} subtree\n     * @return {!Array.<!View>}\n     * @private\n     */\n    SyncTree.prototype.collectDistinctViewsForSubTree_ = function (subtree) {\n        return subtree.fold(function (relativePath, maybeChildSyncPoint, childMap) {\n            if (maybeChildSyncPoint && maybeChildSyncPoint.hasCompleteView()) {\n                var completeView = maybeChildSyncPoint.getCompleteView();\n                return [completeView];\n            }\n            else {\n                // No complete view here, flatten any deeper listens into an array\n                var views_1 = [];\n                if (maybeChildSyncPoint) {\n                    views_1 = maybeChildSyncPoint.getQueryViews();\n                }\n                util_3.forEach(childMap, function (key, childViews) {\n                    views_1 = views_1.concat(childViews);\n                });\n                return views_1;\n            }\n        });\n    };\n    /**\n     * @param {!Array.<!Query>} queries\n     * @private\n     */\n    SyncTree.prototype.removeTags_ = function (queries) {\n        for (var j = 0; j < queries.length; ++j) {\n            var removedQuery = queries[j];\n            if (!removedQuery.getQueryParams().loadsAllData()) {\n                // We should have a tag for this\n                var removedQueryKey = SyncTree.makeQueryKey_(removedQuery);\n                var removedQueryTag = this.queryToTagMap_[removedQueryKey];\n                delete this.queryToTagMap_[removedQueryKey];\n                delete this.tagToQueryMap_['_' + removedQueryTag];\n            }\n        }\n    };\n    /**\n     * Normalizes a query to a query we send the server for listening\n     * @param {!Query} query\n     * @return {!Query} The normalized query\n     * @private\n     */\n    SyncTree.queryForListening_ = function (query) {\n        if (query.getQueryParams().loadsAllData() &&\n            !query.getQueryParams().isDefault()) {\n            // We treat queries that load all data as default queries\n            // Cast is necessary because ref() technically returns Firebase which is actually fb.api.Firebase which inherits\n            // from Query\n            return /** @type {!Query} */ query.getRef();\n        }\n        else {\n            return query;\n        }\n    };\n    /**\n     * For a given new listen, manage the de-duplication of outstanding subscriptions.\n     *\n     * @param {!Query} query\n     * @param {!View} view\n     * @return {!Array.<!Event>} This method can return events to support synchronous data sources\n     * @private\n     */\n    SyncTree.prototype.setupListener_ = function (query, view) {\n        var path = query.path;\n        var tag = this.tagForQuery_(query);\n        var listener = this.createListenerForView_(view);\n        var events = this.listenProvider_.startListening(SyncTree.queryForListening_(query), tag, listener.hashFn, listener.onComplete);\n        var subtree = this.syncPointTree_.subtree(path);\n        // The root of this subtree has our query. We're here because we definitely need to send a listen for that, but we\n        // may need to shadow other listens as well.\n        if (tag) {\n            util_1.assert(!subtree.value.hasCompleteView(), \"If we're adding a query, it shouldn't be shadowed\");\n        }\n        else {\n            // Shadow everything at or below this location, this is a default listener.\n            var queriesToStop = subtree.fold(function (relativePath, maybeChildSyncPoint, childMap) {\n                if (!relativePath.isEmpty() &&\n                    maybeChildSyncPoint &&\n                    maybeChildSyncPoint.hasCompleteView()) {\n                    return [maybeChildSyncPoint.getCompleteView().getQuery()];\n                }\n                else {\n                    // No default listener here, flatten any deeper queries into an array\n                    var queries_1 = [];\n                    if (maybeChildSyncPoint) {\n                        queries_1 = queries_1.concat(maybeChildSyncPoint.getQueryViews().map(function (view) { return view.getQuery(); }));\n                    }\n                    util_3.forEach(childMap, function (key, childQueries) {\n                        queries_1 = queries_1.concat(childQueries);\n                    });\n                    return queries_1;\n                }\n            });\n            for (var i = 0; i < queriesToStop.length; ++i) {\n                var queryToStop = queriesToStop[i];\n                this.listenProvider_.stopListening(SyncTree.queryForListening_(queryToStop), this.tagForQuery_(queryToStop));\n            }\n        }\n        return events;\n    };\n    /**\n     *\n     * @param {!View} view\n     * @return {{hashFn: function(), onComplete: function(!string, *)}}\n     * @private\n     */\n    SyncTree.prototype.createListenerForView_ = function (view) {\n        var _this = this;\n        var query = view.getQuery();\n        var tag = this.tagForQuery_(query);\n        return {\n            hashFn: function () {\n                var cache = view.getServerCache() || ChildrenNode_1.ChildrenNode.EMPTY_NODE;\n                return cache.hash();\n            },\n            onComplete: function (status) {\n                if (status === 'ok') {\n                    if (tag) {\n                        return _this.applyTaggedListenComplete(query.path, tag);\n                    }\n                    else {\n                        return _this.applyListenComplete(query.path);\n                    }\n                }\n                else {\n                    // If a listen failed, kill all of the listeners here, not just the one that triggered the error.\n                    // Note that this may need to be scoped to just this listener if we change permissions on filtered children\n                    var error = util_2.errorForServerCode(status, query);\n                    return _this.removeEventRegistration(query, \n                    /*eventRegistration*/ null, error);\n                }\n            }\n        };\n    };\n    /**\n     * Given a query, computes a \"queryKey\" suitable for use in our queryToTagMap_.\n     * @private\n     * @param {!Query} query\n     * @return {string}\n     */\n    SyncTree.makeQueryKey_ = function (query) {\n        return query.path.toString() + '$' + query.queryIdentifier();\n    };\n    /**\n     * Given a queryKey (created by makeQueryKey), parse it back into a path and queryId.\n     * @private\n     * @param {!string} queryKey\n     * @return {{queryId: !string, path: !Path}}\n     */\n    SyncTree.parseQueryKey_ = function (queryKey) {\n        var splitIndex = queryKey.indexOf('$');\n        util_1.assert(splitIndex !== -1 && splitIndex < queryKey.length - 1, 'Bad queryKey.');\n        return {\n            queryId: queryKey.substr(splitIndex + 1),\n            path: new Path_1.Path(queryKey.substr(0, splitIndex))\n        };\n    };\n    /**\n     * Return the query associated with the given tag, if we have one\n     * @param {!number} tag\n     * @return {?string}\n     * @private\n     */\n    SyncTree.prototype.queryKeyForTag_ = function (tag) {\n        return this.tagToQueryMap_['_' + tag];\n    };\n    /**\n     * Return the tag associated with the given query.\n     * @param {!Query} query\n     * @return {?number}\n     * @private\n     */\n    SyncTree.prototype.tagForQuery_ = function (query) {\n        var queryKey = SyncTree.makeQueryKey_(query);\n        return util_3.safeGet(this.queryToTagMap_, queryKey);\n    };\n    /**\n     * Static accessor for query tags.\n     * @return {number}\n     * @private\n     */\n    SyncTree.getNextQueryTag_ = function () {\n        return SyncTree.nextQueryTag_++;\n    };\n    /**\n     * A helper method to apply tagged operations\n     *\n     * @param {!Path} queryPath\n     * @param {!Operation} operation\n     * @return {!Array.<!Event>}\n     * @private\n     */\n    SyncTree.prototype.applyTaggedOperation_ = function (queryPath, operation) {\n        var syncPoint = this.syncPointTree_.get(queryPath);\n        util_1.assert(syncPoint, \"Missing sync point for query tag that we're tracking\");\n        var writesCache = this.pendingWriteTree_.childWrites(queryPath);\n        return syncPoint.applyOperation(operation, writesCache, \n        /*serverCache=*/ null);\n    };\n    /**\n     * A helper method that visits all descendant and ancestor SyncPoints, applying the operation.\n     *\n     * NOTES:\n     * - Descendant SyncPoints will be visited first (since we raise events depth-first).\n  \n     * - We call applyOperation() on each SyncPoint passing three things:\n     *   1. A version of the Operation that has been made relative to the SyncPoint location.\n     *   2. A WriteTreeRef of any writes we have cached at the SyncPoint location.\n     *   3. A snapshot Node with cached server data, if we have it.\n  \n     * - We concatenate all of the events returned by each SyncPoint and return the result.\n     *\n     * @param {!Operation} operation\n     * @return {!Array.<!Event>}\n     * @private\n     */\n    SyncTree.prototype.applyOperationToSyncPoints_ = function (operation) {\n        return this.applyOperationHelper_(operation, this.syncPointTree_, \n        /*serverCache=*/ null, this.pendingWriteTree_.childWrites(Path_1.Path.Empty));\n    };\n    /**\n     * Recursive helper for applyOperationToSyncPoints_\n     *\n     * @private\n     * @param {!Operation} operation\n     * @param {ImmutableTree.<!SyncPoint>} syncPointTree\n     * @param {?Node} serverCache\n     * @param {!WriteTreeRef} writesCache\n     * @return {!Array.<!Event>}\n     */\n    SyncTree.prototype.applyOperationHelper_ = function (operation, syncPointTree, serverCache, writesCache) {\n        if (operation.path.isEmpty()) {\n            return this.applyOperationDescendantsHelper_(operation, syncPointTree, serverCache, writesCache);\n        }\n        else {\n            var syncPoint = syncPointTree.get(Path_1.Path.Empty);\n            // If we don't have cached server data, see if we can get it from this SyncPoint.\n            if (serverCache == null && syncPoint != null) {\n                serverCache = syncPoint.getCompleteServerCache(Path_1.Path.Empty);\n            }\n            var events = [];\n            var childName = operation.path.getFront();\n            var childOperation = operation.operationForChild(childName);\n            var childTree = syncPointTree.children.get(childName);\n            if (childTree && childOperation) {\n                var childServerCache = serverCache\n                    ? serverCache.getImmediateChild(childName)\n                    : null;\n                var childWritesCache = writesCache.child(childName);\n                events = events.concat(this.applyOperationHelper_(childOperation, childTree, childServerCache, childWritesCache));\n            }\n            if (syncPoint) {\n                events = events.concat(syncPoint.applyOperation(operation, writesCache, serverCache));\n            }\n            return events;\n        }\n    };\n    /**\n     * Recursive helper for applyOperationToSyncPoints_\n     *\n     * @private\n     * @param {!Operation} operation\n     * @param {ImmutableTree.<!SyncPoint>} syncPointTree\n     * @param {?Node} serverCache\n     * @param {!WriteTreeRef} writesCache\n     * @return {!Array.<!Event>}\n     */\n    SyncTree.prototype.applyOperationDescendantsHelper_ = function (operation, syncPointTree, serverCache, writesCache) {\n        var _this = this;\n        var syncPoint = syncPointTree.get(Path_1.Path.Empty);\n        // If we don't have cached server data, see if we can get it from this SyncPoint.\n        if (serverCache == null && syncPoint != null) {\n            serverCache = syncPoint.getCompleteServerCache(Path_1.Path.Empty);\n        }\n        var events = [];\n        syncPointTree.children.inorderTraversal(function (childName, childTree) {\n            var childServerCache = serverCache\n                ? serverCache.getImmediateChild(childName)\n                : null;\n            var childWritesCache = writesCache.child(childName);\n            var childOperation = operation.operationForChild(childName);\n            if (childOperation) {\n                events = events.concat(_this.applyOperationDescendantsHelper_(childOperation, childTree, childServerCache, childWritesCache));\n            }\n        });\n        if (syncPoint) {\n            events = events.concat(syncPoint.applyOperation(operation, writesCache, serverCache));\n        }\n        return events;\n    };\n    /**\n     * Static tracker for next query tag.\n     * @type {number}\n     * @private\n     */\n    SyncTree.nextQueryTag_ = 1;\n    return SyncTree;\n}());\nexports.SyncTree = SyncTree;\n\n//# sourceMappingURL=SyncTree.js.map\n","map":{"mappings":[{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":247,"column":0},"generated":{"line":247,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":248,"column":0},"generated":{"line":248,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":249,"column":0},"generated":{"line":249,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":250,"column":0},"generated":{"line":250,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":251,"column":0},"generated":{"line":251,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":252,"column":0},"generated":{"line":252,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":253,"column":0},"generated":{"line":253,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":254,"column":0},"generated":{"line":254,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":255,"column":0},"generated":{"line":255,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":256,"column":0},"generated":{"line":256,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":257,"column":0},"generated":{"line":257,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":258,"column":0},"generated":{"line":258,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":259,"column":0},"generated":{"line":259,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":260,"column":0},"generated":{"line":260,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":261,"column":0},"generated":{"line":261,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":262,"column":0},"generated":{"line":262,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":263,"column":0},"generated":{"line":263,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":264,"column":0},"generated":{"line":264,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":265,"column":0},"generated":{"line":265,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":266,"column":0},"generated":{"line":266,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":267,"column":0},"generated":{"line":267,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":268,"column":0},"generated":{"line":268,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":269,"column":0},"generated":{"line":269,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":270,"column":0},"generated":{"line":270,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":271,"column":0},"generated":{"line":271,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":272,"column":0},"generated":{"line":272,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":273,"column":0},"generated":{"line":273,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":274,"column":0},"generated":{"line":274,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":275,"column":0},"generated":{"line":275,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":276,"column":0},"generated":{"line":276,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":277,"column":0},"generated":{"line":277,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":278,"column":0},"generated":{"line":278,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":279,"column":0},"generated":{"line":279,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":280,"column":0},"generated":{"line":280,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":281,"column":0},"generated":{"line":281,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":282,"column":0},"generated":{"line":282,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":283,"column":0},"generated":{"line":283,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":284,"column":0},"generated":{"line":284,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":285,"column":0},"generated":{"line":285,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":286,"column":0},"generated":{"line":286,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":287,"column":0},"generated":{"line":287,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":288,"column":0},"generated":{"line":288,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":289,"column":0},"generated":{"line":289,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":290,"column":0},"generated":{"line":290,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":291,"column":0},"generated":{"line":291,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":292,"column":0},"generated":{"line":292,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":293,"column":0},"generated":{"line":293,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":294,"column":0},"generated":{"line":294,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":295,"column":0},"generated":{"line":295,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":296,"column":0},"generated":{"line":296,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":297,"column":0},"generated":{"line":297,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":298,"column":0},"generated":{"line":298,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":299,"column":0},"generated":{"line":299,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":300,"column":0},"generated":{"line":300,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":301,"column":0},"generated":{"line":301,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":302,"column":0},"generated":{"line":302,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":303,"column":0},"generated":{"line":303,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":304,"column":0},"generated":{"line":304,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":305,"column":0},"generated":{"line":305,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":306,"column":0},"generated":{"line":306,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":307,"column":0},"generated":{"line":307,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":308,"column":0},"generated":{"line":308,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":309,"column":0},"generated":{"line":309,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":310,"column":0},"generated":{"line":310,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":311,"column":0},"generated":{"line":311,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":312,"column":0},"generated":{"line":312,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":313,"column":0},"generated":{"line":313,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":314,"column":0},"generated":{"line":314,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":315,"column":0},"generated":{"line":315,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":316,"column":0},"generated":{"line":316,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":317,"column":0},"generated":{"line":317,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":318,"column":0},"generated":{"line":318,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":319,"column":0},"generated":{"line":319,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":320,"column":0},"generated":{"line":320,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":321,"column":0},"generated":{"line":321,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":322,"column":0},"generated":{"line":322,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":323,"column":0},"generated":{"line":323,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":324,"column":0},"generated":{"line":324,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":325,"column":0},"generated":{"line":325,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":326,"column":0},"generated":{"line":326,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":327,"column":0},"generated":{"line":327,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":328,"column":0},"generated":{"line":328,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":329,"column":0},"generated":{"line":329,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":330,"column":0},"generated":{"line":330,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":331,"column":0},"generated":{"line":331,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":332,"column":0},"generated":{"line":332,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":333,"column":0},"generated":{"line":333,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":334,"column":0},"generated":{"line":334,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":335,"column":0},"generated":{"line":335,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":336,"column":0},"generated":{"line":336,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":337,"column":0},"generated":{"line":337,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":338,"column":0},"generated":{"line":338,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":339,"column":0},"generated":{"line":339,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":340,"column":0},"generated":{"line":340,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":341,"column":0},"generated":{"line":341,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":342,"column":0},"generated":{"line":342,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":343,"column":0},"generated":{"line":343,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":344,"column":0},"generated":{"line":344,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":345,"column":0},"generated":{"line":345,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":346,"column":0},"generated":{"line":346,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":347,"column":0},"generated":{"line":347,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":348,"column":0},"generated":{"line":348,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":349,"column":0},"generated":{"line":349,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":350,"column":0},"generated":{"line":350,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":351,"column":0},"generated":{"line":351,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":352,"column":0},"generated":{"line":352,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":353,"column":0},"generated":{"line":353,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":354,"column":0},"generated":{"line":354,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":355,"column":0},"generated":{"line":355,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":356,"column":0},"generated":{"line":356,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":357,"column":0},"generated":{"line":357,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":358,"column":0},"generated":{"line":358,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":359,"column":0},"generated":{"line":359,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":360,"column":0},"generated":{"line":360,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":361,"column":0},"generated":{"line":361,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":362,"column":0},"generated":{"line":362,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":363,"column":0},"generated":{"line":363,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":364,"column":0},"generated":{"line":364,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":365,"column":0},"generated":{"line":365,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":366,"column":0},"generated":{"line":366,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":367,"column":0},"generated":{"line":367,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":368,"column":0},"generated":{"line":368,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":369,"column":0},"generated":{"line":369,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":370,"column":0},"generated":{"line":370,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":371,"column":0},"generated":{"line":371,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":372,"column":0},"generated":{"line":372,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":373,"column":0},"generated":{"line":373,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":374,"column":0},"generated":{"line":374,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":375,"column":0},"generated":{"line":375,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":376,"column":0},"generated":{"line":376,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":377,"column":0},"generated":{"line":377,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":378,"column":0},"generated":{"line":378,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":379,"column":0},"generated":{"line":379,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":380,"column":0},"generated":{"line":380,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":381,"column":0},"generated":{"line":381,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":382,"column":0},"generated":{"line":382,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":383,"column":0},"generated":{"line":383,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":384,"column":0},"generated":{"line":384,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":385,"column":0},"generated":{"line":385,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":386,"column":0},"generated":{"line":386,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":387,"column":0},"generated":{"line":387,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":388,"column":0},"generated":{"line":388,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":389,"column":0},"generated":{"line":389,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":390,"column":0},"generated":{"line":390,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":391,"column":0},"generated":{"line":391,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":392,"column":0},"generated":{"line":392,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":393,"column":0},"generated":{"line":393,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":394,"column":0},"generated":{"line":394,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":395,"column":0},"generated":{"line":395,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":396,"column":0},"generated":{"line":396,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":397,"column":0},"generated":{"line":397,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":398,"column":0},"generated":{"line":398,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":399,"column":0},"generated":{"line":399,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":400,"column":0},"generated":{"line":400,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":401,"column":0},"generated":{"line":401,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":402,"column":0},"generated":{"line":402,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":403,"column":0},"generated":{"line":403,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":404,"column":0},"generated":{"line":404,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":405,"column":0},"generated":{"line":405,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":406,"column":0},"generated":{"line":406,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":407,"column":0},"generated":{"line":407,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":408,"column":0},"generated":{"line":408,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":409,"column":0},"generated":{"line":409,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":410,"column":0},"generated":{"line":410,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":411,"column":0},"generated":{"line":411,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":412,"column":0},"generated":{"line":412,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":413,"column":0},"generated":{"line":413,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":414,"column":0},"generated":{"line":414,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":415,"column":0},"generated":{"line":415,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":416,"column":0},"generated":{"line":416,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":417,"column":0},"generated":{"line":417,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":418,"column":0},"generated":{"line":418,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":419,"column":0},"generated":{"line":419,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":420,"column":0},"generated":{"line":420,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":421,"column":0},"generated":{"line":421,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":422,"column":0},"generated":{"line":422,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":423,"column":0},"generated":{"line":423,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":424,"column":0},"generated":{"line":424,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":425,"column":0},"generated":{"line":425,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":426,"column":0},"generated":{"line":426,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":427,"column":0},"generated":{"line":427,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":428,"column":0},"generated":{"line":428,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":429,"column":0},"generated":{"line":429,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":430,"column":0},"generated":{"line":430,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":431,"column":0},"generated":{"line":431,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":432,"column":0},"generated":{"line":432,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":433,"column":0},"generated":{"line":433,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":434,"column":0},"generated":{"line":434,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":435,"column":0},"generated":{"line":435,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":436,"column":0},"generated":{"line":436,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":437,"column":0},"generated":{"line":437,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":438,"column":0},"generated":{"line":438,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":439,"column":0},"generated":{"line":439,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":440,"column":0},"generated":{"line":440,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":441,"column":0},"generated":{"line":441,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":442,"column":0},"generated":{"line":442,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":443,"column":0},"generated":{"line":443,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":444,"column":0},"generated":{"line":444,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":445,"column":0},"generated":{"line":445,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":446,"column":0},"generated":{"line":446,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":447,"column":0},"generated":{"line":447,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":448,"column":0},"generated":{"line":448,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":449,"column":0},"generated":{"line":449,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":450,"column":0},"generated":{"line":450,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":451,"column":0},"generated":{"line":451,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":452,"column":0},"generated":{"line":452,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":453,"column":0},"generated":{"line":453,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":454,"column":0},"generated":{"line":454,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":455,"column":0},"generated":{"line":455,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":456,"column":0},"generated":{"line":456,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":457,"column":0},"generated":{"line":457,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":458,"column":0},"generated":{"line":458,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":459,"column":0},"generated":{"line":459,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":460,"column":0},"generated":{"line":460,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":461,"column":0},"generated":{"line":461,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":462,"column":0},"generated":{"line":462,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":463,"column":0},"generated":{"line":463,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":464,"column":0},"generated":{"line":464,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":465,"column":0},"generated":{"line":465,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":466,"column":0},"generated":{"line":466,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":467,"column":0},"generated":{"line":467,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":468,"column":0},"generated":{"line":468,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":469,"column":0},"generated":{"line":469,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":470,"column":0},"generated":{"line":470,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":471,"column":0},"generated":{"line":471,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":472,"column":0},"generated":{"line":472,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":473,"column":0},"generated":{"line":473,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":474,"column":0},"generated":{"line":474,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":475,"column":0},"generated":{"line":475,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":476,"column":0},"generated":{"line":476,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":477,"column":0},"generated":{"line":477,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":478,"column":0},"generated":{"line":478,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":479,"column":0},"generated":{"line":479,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":480,"column":0},"generated":{"line":480,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":481,"column":0},"generated":{"line":481,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":482,"column":0},"generated":{"line":482,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":483,"column":0},"generated":{"line":483,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":484,"column":0},"generated":{"line":484,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":485,"column":0},"generated":{"line":485,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":486,"column":0},"generated":{"line":486,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":487,"column":0},"generated":{"line":487,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":488,"column":0},"generated":{"line":488,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":489,"column":0},"generated":{"line":489,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":490,"column":0},"generated":{"line":490,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":491,"column":0},"generated":{"line":491,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":492,"column":0},"generated":{"line":492,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":493,"column":0},"generated":{"line":493,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":494,"column":0},"generated":{"line":494,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":495,"column":0},"generated":{"line":495,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":496,"column":0},"generated":{"line":496,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":497,"column":0},"generated":{"line":497,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":498,"column":0},"generated":{"line":498,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":499,"column":0},"generated":{"line":499,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":500,"column":0},"generated":{"line":500,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":501,"column":0},"generated":{"line":501,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":502,"column":0},"generated":{"line":502,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":503,"column":0},"generated":{"line":503,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":504,"column":0},"generated":{"line":504,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":505,"column":0},"generated":{"line":505,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":506,"column":0},"generated":{"line":506,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":507,"column":0},"generated":{"line":507,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":508,"column":0},"generated":{"line":508,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":509,"column":0},"generated":{"line":509,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":510,"column":0},"generated":{"line":510,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":511,"column":0},"generated":{"line":511,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":512,"column":0},"generated":{"line":512,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":513,"column":0},"generated":{"line":513,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":514,"column":0},"generated":{"line":514,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":515,"column":0},"generated":{"line":515,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":516,"column":0},"generated":{"line":516,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":517,"column":0},"generated":{"line":517,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":518,"column":0},"generated":{"line":518,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":519,"column":0},"generated":{"line":519,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":520,"column":0},"generated":{"line":520,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":521,"column":0},"generated":{"line":521,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":522,"column":0},"generated":{"line":522,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":523,"column":0},"generated":{"line":523,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":524,"column":0},"generated":{"line":524,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":525,"column":0},"generated":{"line":525,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":526,"column":0},"generated":{"line":526,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":527,"column":0},"generated":{"line":527,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":528,"column":0},"generated":{"line":528,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":529,"column":0},"generated":{"line":529,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":530,"column":0},"generated":{"line":530,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":531,"column":0},"generated":{"line":531,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":532,"column":0},"generated":{"line":532,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":533,"column":0},"generated":{"line":533,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":534,"column":0},"generated":{"line":534,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":535,"column":0},"generated":{"line":535,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":536,"column":0},"generated":{"line":536,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":537,"column":0},"generated":{"line":537,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":538,"column":0},"generated":{"line":538,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":539,"column":0},"generated":{"line":539,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":540,"column":0},"generated":{"line":540,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":541,"column":0},"generated":{"line":541,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":542,"column":0},"generated":{"line":542,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":543,"column":0},"generated":{"line":543,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":544,"column":0},"generated":{"line":544,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":545,"column":0},"generated":{"line":545,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":546,"column":0},"generated":{"line":546,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":547,"column":0},"generated":{"line":547,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":548,"column":0},"generated":{"line":548,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":549,"column":0},"generated":{"line":549,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":550,"column":0},"generated":{"line":550,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":551,"column":0},"generated":{"line":551,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":552,"column":0},"generated":{"line":552,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":553,"column":0},"generated":{"line":553,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":554,"column":0},"generated":{"line":554,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":555,"column":0},"generated":{"line":555,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":556,"column":0},"generated":{"line":556,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":557,"column":0},"generated":{"line":557,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":558,"column":0},"generated":{"line":558,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":559,"column":0},"generated":{"line":559,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":560,"column":0},"generated":{"line":560,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":561,"column":0},"generated":{"line":561,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":562,"column":0},"generated":{"line":562,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":563,"column":0},"generated":{"line":563,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":564,"column":0},"generated":{"line":564,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":565,"column":0},"generated":{"line":565,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":566,"column":0},"generated":{"line":566,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":567,"column":0},"generated":{"line":567,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":568,"column":0},"generated":{"line":568,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":569,"column":0},"generated":{"line":569,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":570,"column":0},"generated":{"line":570,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":571,"column":0},"generated":{"line":571,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":572,"column":0},"generated":{"line":572,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":573,"column":0},"generated":{"line":573,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":574,"column":0},"generated":{"line":574,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":575,"column":0},"generated":{"line":575,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":576,"column":0},"generated":{"line":576,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":577,"column":0},"generated":{"line":577,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":578,"column":0},"generated":{"line":578,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":579,"column":0},"generated":{"line":579,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":580,"column":0},"generated":{"line":580,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":581,"column":0},"generated":{"line":581,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":582,"column":0},"generated":{"line":582,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":583,"column":0},"generated":{"line":583,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":584,"column":0},"generated":{"line":584,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":585,"column":0},"generated":{"line":585,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":586,"column":0},"generated":{"line":586,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":587,"column":0},"generated":{"line":587,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":588,"column":0},"generated":{"line":588,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":589,"column":0},"generated":{"line":589,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":590,"column":0},"generated":{"line":590,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":591,"column":0},"generated":{"line":591,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":592,"column":0},"generated":{"line":592,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":593,"column":0},"generated":{"line":593,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":594,"column":0},"generated":{"line":594,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":595,"column":0},"generated":{"line":595,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":596,"column":0},"generated":{"line":596,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":597,"column":0},"generated":{"line":597,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":598,"column":0},"generated":{"line":598,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":599,"column":0},"generated":{"line":599,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":600,"column":0},"generated":{"line":600,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":601,"column":0},"generated":{"line":601,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":602,"column":0},"generated":{"line":602,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":603,"column":0},"generated":{"line":603,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":604,"column":0},"generated":{"line":604,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":605,"column":0},"generated":{"line":605,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":606,"column":0},"generated":{"line":606,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":607,"column":0},"generated":{"line":607,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":608,"column":0},"generated":{"line":608,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":609,"column":0},"generated":{"line":609,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":610,"column":0},"generated":{"line":610,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":611,"column":0},"generated":{"line":611,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":612,"column":0},"generated":{"line":612,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":613,"column":0},"generated":{"line":613,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":614,"column":0},"generated":{"line":614,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":615,"column":0},"generated":{"line":615,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":616,"column":0},"generated":{"line":616,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":617,"column":0},"generated":{"line":617,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":618,"column":0},"generated":{"line":618,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":619,"column":0},"generated":{"line":619,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":620,"column":0},"generated":{"line":620,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":621,"column":0},"generated":{"line":621,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":622,"column":0},"generated":{"line":622,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":623,"column":0},"generated":{"line":623,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":624,"column":0},"generated":{"line":624,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":625,"column":0},"generated":{"line":625,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":626,"column":0},"generated":{"line":626,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":627,"column":0},"generated":{"line":627,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":628,"column":0},"generated":{"line":628,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":629,"column":0},"generated":{"line":629,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":630,"column":0},"generated":{"line":630,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":631,"column":0},"generated":{"line":631,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":632,"column":0},"generated":{"line":632,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":633,"column":0},"generated":{"line":633,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":634,"column":0},"generated":{"line":634,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":635,"column":0},"generated":{"line":635,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":636,"column":0},"generated":{"line":636,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":637,"column":0},"generated":{"line":637,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":638,"column":0},"generated":{"line":638,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":639,"column":0},"generated":{"line":639,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":640,"column":0},"generated":{"line":640,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":641,"column":0},"generated":{"line":641,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":642,"column":0},"generated":{"line":642,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":643,"column":0},"generated":{"line":643,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":644,"column":0},"generated":{"line":644,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":645,"column":0},"generated":{"line":645,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":646,"column":0},"generated":{"line":646,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":647,"column":0},"generated":{"line":647,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":648,"column":0},"generated":{"line":648,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":649,"column":0},"generated":{"line":649,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":650,"column":0},"generated":{"line":650,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":651,"column":0},"generated":{"line":651,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":652,"column":0},"generated":{"line":652,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":653,"column":0},"generated":{"line":653,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":654,"column":0},"generated":{"line":654,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":655,"column":0},"generated":{"line":655,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":656,"column":0},"generated":{"line":656,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":657,"column":0},"generated":{"line":657,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":658,"column":0},"generated":{"line":658,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":659,"column":0},"generated":{"line":659,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":660,"column":0},"generated":{"line":660,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":661,"column":0},"generated":{"line":661,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":662,"column":0},"generated":{"line":662,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":663,"column":0},"generated":{"line":663,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":664,"column":0},"generated":{"line":664,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":665,"column":0},"generated":{"line":665,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":666,"column":0},"generated":{"line":666,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":667,"column":0},"generated":{"line":667,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":668,"column":0},"generated":{"line":668,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":669,"column":0},"generated":{"line":669,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":670,"column":0},"generated":{"line":670,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":671,"column":0},"generated":{"line":671,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":672,"column":0},"generated":{"line":672,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":673,"column":0},"generated":{"line":673,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":674,"column":0},"generated":{"line":674,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":675,"column":0},"generated":{"line":675,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":676,"column":0},"generated":{"line":676,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":677,"column":0},"generated":{"line":677,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":678,"column":0},"generated":{"line":678,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":679,"column":0},"generated":{"line":679,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":680,"column":0},"generated":{"line":680,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":681,"column":0},"generated":{"line":681,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":682,"column":0},"generated":{"line":682,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":683,"column":0},"generated":{"line":683,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":684,"column":0},"generated":{"line":684,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":685,"column":0},"generated":{"line":685,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":686,"column":0},"generated":{"line":686,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":687,"column":0},"generated":{"line":687,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":688,"column":0},"generated":{"line":688,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":689,"column":0},"generated":{"line":689,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":690,"column":0},"generated":{"line":690,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":691,"column":0},"generated":{"line":691,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":692,"column":0},"generated":{"line":692,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":693,"column":0},"generated":{"line":693,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":694,"column":0},"generated":{"line":694,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":695,"column":0},"generated":{"line":695,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":696,"column":0},"generated":{"line":696,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":697,"column":0},"generated":{"line":697,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":698,"column":0},"generated":{"line":698,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":699,"column":0},"generated":{"line":699,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":700,"column":0},"generated":{"line":700,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":701,"column":0},"generated":{"line":701,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":702,"column":0},"generated":{"line":702,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":703,"column":0},"generated":{"line":703,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":704,"column":0},"generated":{"line":704,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":705,"column":0},"generated":{"line":705,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":706,"column":0},"generated":{"line":706,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":707,"column":0},"generated":{"line":707,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":708,"column":0},"generated":{"line":708,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":709,"column":0},"generated":{"line":709,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":710,"column":0},"generated":{"line":710,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":711,"column":0},"generated":{"line":711,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js","original":{"line":712,"column":0},"generated":{"line":712,"column":0}}],"sources":{"node_modules/@firebase/database/dist/cjs/src/core/SyncTree.js":"\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar util_1 = require(\"@firebase/util\");\nvar util_2 = require(\"./util/util\");\nvar AckUserWrite_1 = require(\"./operation/AckUserWrite\");\nvar ChildrenNode_1 = require(\"./snap/ChildrenNode\");\nvar util_3 = require(\"@firebase/util\");\nvar ImmutableTree_1 = require(\"./util/ImmutableTree\");\nvar ListenComplete_1 = require(\"./operation/ListenComplete\");\nvar Merge_1 = require(\"./operation/Merge\");\nvar Operation_1 = require(\"./operation/Operation\");\nvar Overwrite_1 = require(\"./operation/Overwrite\");\nvar Path_1 = require(\"./util/Path\");\nvar SyncPoint_1 = require(\"./SyncPoint\");\nvar WriteTree_1 = require(\"./WriteTree\");\n/**\n * SyncTree is the central class for managing event callback registration, data caching, views\n * (query processing), and event generation.  There are typically two SyncTree instances for\n * each Repo, one for the normal Firebase data, and one for the .info data.\n *\n * It has a number of responsibilities, including:\n *  - Tracking all user event callbacks (registered via addEventRegistration() and removeEventRegistration()).\n *  - Applying and caching data changes for user set(), transaction(), and update() calls\n *    (applyUserOverwrite(), applyUserMerge()).\n *  - Applying and caching data changes for server data changes (applyServerOverwrite(),\n *    applyServerMerge()).\n *  - Generating user-facing events for server and user changes (all of the apply* methods\n *    return the set of events that need to be raised as a result).\n *  - Maintaining the appropriate set of server listens to ensure we are always subscribed\n *    to the correct set of paths and queries to satisfy the current set of user event\n *    callbacks (listens are started/stopped using the provided listenProvider).\n *\n * NOTE: Although SyncTree tracks event callbacks and calculates events to raise, the actual\n * events are returned to the caller rather than raised synchronously.\n *\n * @constructor\n */\nvar SyncTree = /** @class */ (function () {\n    /**\n     * @param {!ListenProvider} listenProvider_ Used by SyncTree to start / stop listening\n     *   to server data.\n     */\n    function SyncTree(listenProvider_) {\n        this.listenProvider_ = listenProvider_;\n        /**\n         * Tree of SyncPoints.  There's a SyncPoint at any location that has 1 or more views.\n         * @type {!ImmutableTree.<!SyncPoint>}\n         * @private\n         */\n        this.syncPointTree_ = ImmutableTree_1.ImmutableTree.Empty;\n        /**\n         * A tree of all pending user writes (user-initiated set()'s, transaction()'s, update()'s, etc.).\n         * @type {!WriteTree}\n         * @private\n         */\n        this.pendingWriteTree_ = new WriteTree_1.WriteTree();\n        this.tagToQueryMap_ = {};\n        this.queryToTagMap_ = {};\n    }\n    /**\n     * Apply the data changes for a user-generated set() or transaction() call.\n     *\n     * @param {!Path} path\n     * @param {!Node} newData\n     * @param {number} writeId\n     * @param {boolean=} visible\n     * @return {!Array.<!Event>} Events to raise.\n     */\n    SyncTree.prototype.applyUserOverwrite = function (path, newData, writeId, visible) {\n        // Record pending write.\n        this.pendingWriteTree_.addOverwrite(path, newData, writeId, visible);\n        if (!visible) {\n            return [];\n        }\n        else {\n            return this.applyOperationToSyncPoints_(new Overwrite_1.Overwrite(Operation_1.OperationSource.User, path, newData));\n        }\n    };\n    /**\n     * Apply the data from a user-generated update() call\n     *\n     * @param {!Path} path\n     * @param {!Object.<string, !Node>} changedChildren\n     * @param {!number} writeId\n     * @return {!Array.<!Event>} Events to raise.\n     */\n    SyncTree.prototype.applyUserMerge = function (path, changedChildren, writeId) {\n        // Record pending merge.\n        this.pendingWriteTree_.addMerge(path, changedChildren, writeId);\n        var changeTree = ImmutableTree_1.ImmutableTree.fromObject(changedChildren);\n        return this.applyOperationToSyncPoints_(new Merge_1.Merge(Operation_1.OperationSource.User, path, changeTree));\n    };\n    /**\n     * Acknowledge a pending user write that was previously registered with applyUserOverwrite() or applyUserMerge().\n     *\n     * @param {!number} writeId\n     * @param {boolean=} revert True if the given write failed and needs to be reverted\n     * @return {!Array.<!Event>} Events to raise.\n     */\n    SyncTree.prototype.ackUserWrite = function (writeId, revert) {\n        if (revert === void 0) { revert = false; }\n        var write = this.pendingWriteTree_.getWrite(writeId);\n        var needToReevaluate = this.pendingWriteTree_.removeWrite(writeId);\n        if (!needToReevaluate) {\n            return [];\n        }\n        else {\n            var affectedTree_1 = ImmutableTree_1.ImmutableTree.Empty;\n            if (write.snap != null) {\n                // overwrite\n                affectedTree_1 = affectedTree_1.set(Path_1.Path.Empty, true);\n            }\n            else {\n                util_3.forEach(write.children, function (pathString, node) {\n                    affectedTree_1 = affectedTree_1.set(new Path_1.Path(pathString), node);\n                });\n            }\n            return this.applyOperationToSyncPoints_(new AckUserWrite_1.AckUserWrite(write.path, affectedTree_1, revert));\n        }\n    };\n    /**\n     * Apply new server data for the specified path..\n     *\n     * @param {!Path} path\n     * @param {!Node} newData\n     * @return {!Array.<!Event>} Events to raise.\n     */\n    SyncTree.prototype.applyServerOverwrite = function (path, newData) {\n        return this.applyOperationToSyncPoints_(new Overwrite_1.Overwrite(Operation_1.OperationSource.Server, path, newData));\n    };\n    /**\n     * Apply new server data to be merged in at the specified path.\n     *\n     * @param {!Path} path\n     * @param {!Object.<string, !Node>} changedChildren\n     * @return {!Array.<!Event>} Events to raise.\n     */\n    SyncTree.prototype.applyServerMerge = function (path, changedChildren) {\n        var changeTree = ImmutableTree_1.ImmutableTree.fromObject(changedChildren);\n        return this.applyOperationToSyncPoints_(new Merge_1.Merge(Operation_1.OperationSource.Server, path, changeTree));\n    };\n    /**\n     * Apply a listen complete for a query\n     *\n     * @param {!Path} path\n     * @return {!Array.<!Event>} Events to raise.\n     */\n    SyncTree.prototype.applyListenComplete = function (path) {\n        return this.applyOperationToSyncPoints_(new ListenComplete_1.ListenComplete(Operation_1.OperationSource.Server, path));\n    };\n    /**\n     * Apply new server data for the specified tagged query.\n     *\n     * @param {!Path} path\n     * @param {!Node} snap\n     * @param {!number} tag\n     * @return {!Array.<!Event>} Events to raise.\n     */\n    SyncTree.prototype.applyTaggedQueryOverwrite = function (path, snap, tag) {\n        var queryKey = this.queryKeyForTag_(tag);\n        if (queryKey != null) {\n            var r = SyncTree.parseQueryKey_(queryKey);\n            var queryPath = r.path, queryId = r.queryId;\n            var relativePath = Path_1.Path.relativePath(queryPath, path);\n            var op = new Overwrite_1.Overwrite(Operation_1.OperationSource.forServerTaggedQuery(queryId), relativePath, snap);\n            return this.applyTaggedOperation_(queryPath, op);\n        }\n        else {\n            // Query must have been removed already\n            return [];\n        }\n    };\n    /**\n     * Apply server data to be merged in for the specified tagged query.\n     *\n     * @param {!Path} path\n     * @param {!Object.<string, !Node>} changedChildren\n     * @param {!number} tag\n     * @return {!Array.<!Event>} Events to raise.\n     */\n    SyncTree.prototype.applyTaggedQueryMerge = function (path, changedChildren, tag) {\n        var queryKey = this.queryKeyForTag_(tag);\n        if (queryKey) {\n            var r = SyncTree.parseQueryKey_(queryKey);\n            var queryPath = r.path, queryId = r.queryId;\n            var relativePath = Path_1.Path.relativePath(queryPath, path);\n            var changeTree = ImmutableTree_1.ImmutableTree.fromObject(changedChildren);\n            var op = new Merge_1.Merge(Operation_1.OperationSource.forServerTaggedQuery(queryId), relativePath, changeTree);\n            return this.applyTaggedOperation_(queryPath, op);\n        }\n        else {\n            // We've already removed the query. No big deal, ignore the update\n            return [];\n        }\n    };\n    /**\n     * Apply a listen complete for a tagged query\n     *\n     * @param {!Path} path\n     * @param {!number} tag\n     * @return {!Array.<!Event>} Events to raise.\n     */\n    SyncTree.prototype.applyTaggedListenComplete = function (path, tag) {\n        var queryKey = this.queryKeyForTag_(tag);\n        if (queryKey) {\n            var r = SyncTree.parseQueryKey_(queryKey);\n            var queryPath = r.path, queryId = r.queryId;\n            var relativePath = Path_1.Path.relativePath(queryPath, path);\n            var op = new ListenComplete_1.ListenComplete(Operation_1.OperationSource.forServerTaggedQuery(queryId), relativePath);\n            return this.applyTaggedOperation_(queryPath, op);\n        }\n        else {\n            // We've already removed the query. No big deal, ignore the update\n            return [];\n        }\n    };\n    /**\n     * Add an event callback for the specified query.\n     *\n     * @param {!Query} query\n     * @param {!EventRegistration} eventRegistration\n     * @return {!Array.<!Event>} Events to raise.\n     */\n    SyncTree.prototype.addEventRegistration = function (query, eventRegistration) {\n        var path = query.path;\n        var serverCache = null;\n        var foundAncestorDefaultView = false;\n        // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\n        // Consider optimizing this once there's a better understanding of what actual behavior will be.\n        this.syncPointTree_.foreachOnPath(path, function (pathToSyncPoint, sp) {\n            var relativePath = Path_1.Path.relativePath(pathToSyncPoint, path);\n            serverCache = serverCache || sp.getCompleteServerCache(relativePath);\n            foundAncestorDefaultView =\n                foundAncestorDefaultView || sp.hasCompleteView();\n        });\n        var syncPoint = this.syncPointTree_.get(path);\n        if (!syncPoint) {\n            syncPoint = new SyncPoint_1.SyncPoint();\n            this.syncPointTree_ = this.syncPointTree_.set(path, syncPoint);\n        }\n        else {\n            foundAncestorDefaultView =\n                foundAncestorDefaultView || syncPoint.hasCompleteView();\n            serverCache = serverCache || syncPoint.getCompleteServerCache(Path_1.Path.Empty);\n        }\n        var serverCacheComplete;\n        if (serverCache != null) {\n            serverCacheComplete = true;\n        }\n        else {\n            serverCacheComplete = false;\n            serverCache = ChildrenNode_1.ChildrenNode.EMPTY_NODE;\n            var subtree = this.syncPointTree_.subtree(path);\n            subtree.foreachChild(function (childName, childSyncPoint) {\n                var completeCache = childSyncPoint.getCompleteServerCache(Path_1.Path.Empty);\n                if (completeCache) {\n                    serverCache = serverCache.updateImmediateChild(childName, completeCache);\n                }\n            });\n        }\n        var viewAlreadyExists = syncPoint.viewExistsForQuery(query);\n        if (!viewAlreadyExists && !query.getQueryParams().loadsAllData()) {\n            // We need to track a tag for this query\n            var queryKey = SyncTree.makeQueryKey_(query);\n            util_1.assert(!(queryKey in this.queryToTagMap_), 'View does not exist, but we have a tag');\n            var tag = SyncTree.getNextQueryTag_();\n            this.queryToTagMap_[queryKey] = tag;\n            // Coerce to string to avoid sparse arrays.\n            this.tagToQueryMap_['_' + tag] = queryKey;\n        }\n        var writesCache = this.pendingWriteTree_.childWrites(path);\n        var events = syncPoint.addEventRegistration(query, eventRegistration, writesCache, serverCache, serverCacheComplete);\n        if (!viewAlreadyExists && !foundAncestorDefaultView) {\n            var view /** @type !View */ = syncPoint.viewForQuery(query);\n            events = events.concat(this.setupListener_(query, view));\n        }\n        return events;\n    };\n    /**\n     * Remove event callback(s).\n     *\n     * If query is the default query, we'll check all queries for the specified eventRegistration.\n     * If eventRegistration is null, we'll remove all callbacks for the specified query/queries.\n     *\n     * @param {!Query} query\n     * @param {?EventRegistration} eventRegistration If null, all callbacks are removed.\n     * @param {Error=} cancelError If a cancelError is provided, appropriate cancel events will be returned.\n     * @return {!Array.<!Event>} Cancel events, if cancelError was provided.\n     */\n    SyncTree.prototype.removeEventRegistration = function (query, eventRegistration, cancelError) {\n        var _this = this;\n        // Find the syncPoint first. Then deal with whether or not it has matching listeners\n        var path = query.path;\n        var maybeSyncPoint = this.syncPointTree_.get(path);\n        var cancelEvents = [];\n        // A removal on a default query affects all queries at that location. A removal on an indexed query, even one without\n        // other query constraints, does *not* affect all queries at that location. So this check must be for 'default', and\n        // not loadsAllData().\n        if (maybeSyncPoint &&\n            (query.queryIdentifier() === 'default' ||\n                maybeSyncPoint.viewExistsForQuery(query))) {\n            /**\n             * @type {{removed: !Array.<!Query>, events: !Array.<!Event>}}\n             */\n            var removedAndEvents = maybeSyncPoint.removeEventRegistration(query, eventRegistration, cancelError);\n            if (maybeSyncPoint.isEmpty()) {\n                this.syncPointTree_ = this.syncPointTree_.remove(path);\n            }\n            var removed = removedAndEvents.removed;\n            cancelEvents = removedAndEvents.events;\n            // We may have just removed one of many listeners and can short-circuit this whole process\n            // We may also not have removed a default listener, in which case all of the descendant listeners should already be\n            // properly set up.\n            //\n            // Since indexed queries can shadow if they don't have other query constraints, check for loadsAllData(), instead of\n            // queryId === 'default'\n            var removingDefault = -1 !==\n                removed.findIndex(function (query) {\n                    return query.getQueryParams().loadsAllData();\n                });\n            var covered = this.syncPointTree_.findOnPath(path, function (relativePath, parentSyncPoint) {\n                return parentSyncPoint.hasCompleteView();\n            });\n            if (removingDefault && !covered) {\n                var subtree = this.syncPointTree_.subtree(path);\n                // There are potentially child listeners. Determine what if any listens we need to send before executing the\n                // removal\n                if (!subtree.isEmpty()) {\n                    // We need to fold over our subtree and collect the listeners to send\n                    var newViews = this.collectDistinctViewsForSubTree_(subtree);\n                    // Ok, we've collected all the listens we need. Set them up.\n                    for (var i = 0; i < newViews.length; ++i) {\n                        var view = newViews[i], newQuery = view.getQuery();\n                        var listener = this.createListenerForView_(view);\n                        this.listenProvider_.startListening(SyncTree.queryForListening_(newQuery), this.tagForQuery_(newQuery), listener.hashFn, listener.onComplete);\n                    }\n                }\n                else {\n                    // There's nothing below us, so nothing we need to start listening on\n                }\n            }\n            // If we removed anything and we're not covered by a higher up listen, we need to stop listening on this query\n            // The above block has us covered in terms of making sure we're set up on listens lower in the tree.\n            // Also, note that if we have a cancelError, it's already been removed at the provider level.\n            if (!covered && removed.length > 0 && !cancelError) {\n                // If we removed a default, then we weren't listening on any of the other queries here. Just cancel the one\n                // default. Otherwise, we need to iterate through and cancel each individual query\n                if (removingDefault) {\n                    // We don't tag default listeners\n                    var defaultTag = null;\n                    this.listenProvider_.stopListening(SyncTree.queryForListening_(query), defaultTag);\n                }\n                else {\n                    removed.forEach(function (queryToRemove) {\n                        var tagToRemove = _this.queryToTagMap_[SyncTree.makeQueryKey_(queryToRemove)];\n                        _this.listenProvider_.stopListening(SyncTree.queryForListening_(queryToRemove), tagToRemove);\n                    });\n                }\n            }\n            // Now, clear all of the tags we're tracking for the removed listens\n            this.removeTags_(removed);\n        }\n        else {\n            // No-op, this listener must've been already removed\n        }\n        return cancelEvents;\n    };\n    /**\n     * Returns a complete cache, if we have one, of the data at a particular path. The location must have a listener above\n     * it, but as this is only used by transaction code, that should always be the case anyways.\n     *\n     * Note: this method will *include* hidden writes from transaction with applyLocally set to false.\n     * @param {!Path} path The path to the data we want\n     * @param {Array.<number>=} writeIdsToExclude A specific set to be excluded\n     * @return {?Node}\n     */\n    SyncTree.prototype.calcCompleteEventCache = function (path, writeIdsToExclude) {\n        var includeHiddenSets = true;\n        var writeTree = this.pendingWriteTree_;\n        var serverCache = this.syncPointTree_.findOnPath(path, function (pathSoFar, syncPoint) {\n            var relativePath = Path_1.Path.relativePath(pathSoFar, path);\n            var serverCache = syncPoint.getCompleteServerCache(relativePath);\n            if (serverCache) {\n                return serverCache;\n            }\n        });\n        return writeTree.calcCompleteEventCache(path, serverCache, writeIdsToExclude, includeHiddenSets);\n    };\n    /**\n     * This collapses multiple unfiltered views into a single view, since we only need a single\n     * listener for them.\n     *\n     * @param {!ImmutableTree.<!SyncPoint>} subtree\n     * @return {!Array.<!View>}\n     * @private\n     */\n    SyncTree.prototype.collectDistinctViewsForSubTree_ = function (subtree) {\n        return subtree.fold(function (relativePath, maybeChildSyncPoint, childMap) {\n            if (maybeChildSyncPoint && maybeChildSyncPoint.hasCompleteView()) {\n                var completeView = maybeChildSyncPoint.getCompleteView();\n                return [completeView];\n            }\n            else {\n                // No complete view here, flatten any deeper listens into an array\n                var views_1 = [];\n                if (maybeChildSyncPoint) {\n                    views_1 = maybeChildSyncPoint.getQueryViews();\n                }\n                util_3.forEach(childMap, function (key, childViews) {\n                    views_1 = views_1.concat(childViews);\n                });\n                return views_1;\n            }\n        });\n    };\n    /**\n     * @param {!Array.<!Query>} queries\n     * @private\n     */\n    SyncTree.prototype.removeTags_ = function (queries) {\n        for (var j = 0; j < queries.length; ++j) {\n            var removedQuery = queries[j];\n            if (!removedQuery.getQueryParams().loadsAllData()) {\n                // We should have a tag for this\n                var removedQueryKey = SyncTree.makeQueryKey_(removedQuery);\n                var removedQueryTag = this.queryToTagMap_[removedQueryKey];\n                delete this.queryToTagMap_[removedQueryKey];\n                delete this.tagToQueryMap_['_' + removedQueryTag];\n            }\n        }\n    };\n    /**\n     * Normalizes a query to a query we send the server for listening\n     * @param {!Query} query\n     * @return {!Query} The normalized query\n     * @private\n     */\n    SyncTree.queryForListening_ = function (query) {\n        if (query.getQueryParams().loadsAllData() &&\n            !query.getQueryParams().isDefault()) {\n            // We treat queries that load all data as default queries\n            // Cast is necessary because ref() technically returns Firebase which is actually fb.api.Firebase which inherits\n            // from Query\n            return /** @type {!Query} */ query.getRef();\n        }\n        else {\n            return query;\n        }\n    };\n    /**\n     * For a given new listen, manage the de-duplication of outstanding subscriptions.\n     *\n     * @param {!Query} query\n     * @param {!View} view\n     * @return {!Array.<!Event>} This method can return events to support synchronous data sources\n     * @private\n     */\n    SyncTree.prototype.setupListener_ = function (query, view) {\n        var path = query.path;\n        var tag = this.tagForQuery_(query);\n        var listener = this.createListenerForView_(view);\n        var events = this.listenProvider_.startListening(SyncTree.queryForListening_(query), tag, listener.hashFn, listener.onComplete);\n        var subtree = this.syncPointTree_.subtree(path);\n        // The root of this subtree has our query. We're here because we definitely need to send a listen for that, but we\n        // may need to shadow other listens as well.\n        if (tag) {\n            util_1.assert(!subtree.value.hasCompleteView(), \"If we're adding a query, it shouldn't be shadowed\");\n        }\n        else {\n            // Shadow everything at or below this location, this is a default listener.\n            var queriesToStop = subtree.fold(function (relativePath, maybeChildSyncPoint, childMap) {\n                if (!relativePath.isEmpty() &&\n                    maybeChildSyncPoint &&\n                    maybeChildSyncPoint.hasCompleteView()) {\n                    return [maybeChildSyncPoint.getCompleteView().getQuery()];\n                }\n                else {\n                    // No default listener here, flatten any deeper queries into an array\n                    var queries_1 = [];\n                    if (maybeChildSyncPoint) {\n                        queries_1 = queries_1.concat(maybeChildSyncPoint.getQueryViews().map(function (view) { return view.getQuery(); }));\n                    }\n                    util_3.forEach(childMap, function (key, childQueries) {\n                        queries_1 = queries_1.concat(childQueries);\n                    });\n                    return queries_1;\n                }\n            });\n            for (var i = 0; i < queriesToStop.length; ++i) {\n                var queryToStop = queriesToStop[i];\n                this.listenProvider_.stopListening(SyncTree.queryForListening_(queryToStop), this.tagForQuery_(queryToStop));\n            }\n        }\n        return events;\n    };\n    /**\n     *\n     * @param {!View} view\n     * @return {{hashFn: function(), onComplete: function(!string, *)}}\n     * @private\n     */\n    SyncTree.prototype.createListenerForView_ = function (view) {\n        var _this = this;\n        var query = view.getQuery();\n        var tag = this.tagForQuery_(query);\n        return {\n            hashFn: function () {\n                var cache = view.getServerCache() || ChildrenNode_1.ChildrenNode.EMPTY_NODE;\n                return cache.hash();\n            },\n            onComplete: function (status) {\n                if (status === 'ok') {\n                    if (tag) {\n                        return _this.applyTaggedListenComplete(query.path, tag);\n                    }\n                    else {\n                        return _this.applyListenComplete(query.path);\n                    }\n                }\n                else {\n                    // If a listen failed, kill all of the listeners here, not just the one that triggered the error.\n                    // Note that this may need to be scoped to just this listener if we change permissions on filtered children\n                    var error = util_2.errorForServerCode(status, query);\n                    return _this.removeEventRegistration(query, \n                    /*eventRegistration*/ null, error);\n                }\n            }\n        };\n    };\n    /**\n     * Given a query, computes a \"queryKey\" suitable for use in our queryToTagMap_.\n     * @private\n     * @param {!Query} query\n     * @return {string}\n     */\n    SyncTree.makeQueryKey_ = function (query) {\n        return query.path.toString() + '$' + query.queryIdentifier();\n    };\n    /**\n     * Given a queryKey (created by makeQueryKey), parse it back into a path and queryId.\n     * @private\n     * @param {!string} queryKey\n     * @return {{queryId: !string, path: !Path}}\n     */\n    SyncTree.parseQueryKey_ = function (queryKey) {\n        var splitIndex = queryKey.indexOf('$');\n        util_1.assert(splitIndex !== -1 && splitIndex < queryKey.length - 1, 'Bad queryKey.');\n        return {\n            queryId: queryKey.substr(splitIndex + 1),\n            path: new Path_1.Path(queryKey.substr(0, splitIndex))\n        };\n    };\n    /**\n     * Return the query associated with the given tag, if we have one\n     * @param {!number} tag\n     * @return {?string}\n     * @private\n     */\n    SyncTree.prototype.queryKeyForTag_ = function (tag) {\n        return this.tagToQueryMap_['_' + tag];\n    };\n    /**\n     * Return the tag associated with the given query.\n     * @param {!Query} query\n     * @return {?number}\n     * @private\n     */\n    SyncTree.prototype.tagForQuery_ = function (query) {\n        var queryKey = SyncTree.makeQueryKey_(query);\n        return util_3.safeGet(this.queryToTagMap_, queryKey);\n    };\n    /**\n     * Static accessor for query tags.\n     * @return {number}\n     * @private\n     */\n    SyncTree.getNextQueryTag_ = function () {\n        return SyncTree.nextQueryTag_++;\n    };\n    /**\n     * A helper method to apply tagged operations\n     *\n     * @param {!Path} queryPath\n     * @param {!Operation} operation\n     * @return {!Array.<!Event>}\n     * @private\n     */\n    SyncTree.prototype.applyTaggedOperation_ = function (queryPath, operation) {\n        var syncPoint = this.syncPointTree_.get(queryPath);\n        util_1.assert(syncPoint, \"Missing sync point for query tag that we're tracking\");\n        var writesCache = this.pendingWriteTree_.childWrites(queryPath);\n        return syncPoint.applyOperation(operation, writesCache, \n        /*serverCache=*/ null);\n    };\n    /**\n     * A helper method that visits all descendant and ancestor SyncPoints, applying the operation.\n     *\n     * NOTES:\n     * - Descendant SyncPoints will be visited first (since we raise events depth-first).\n  \n     * - We call applyOperation() on each SyncPoint passing three things:\n     *   1. A version of the Operation that has been made relative to the SyncPoint location.\n     *   2. A WriteTreeRef of any writes we have cached at the SyncPoint location.\n     *   3. A snapshot Node with cached server data, if we have it.\n  \n     * - We concatenate all of the events returned by each SyncPoint and return the result.\n     *\n     * @param {!Operation} operation\n     * @return {!Array.<!Event>}\n     * @private\n     */\n    SyncTree.prototype.applyOperationToSyncPoints_ = function (operation) {\n        return this.applyOperationHelper_(operation, this.syncPointTree_, \n        /*serverCache=*/ null, this.pendingWriteTree_.childWrites(Path_1.Path.Empty));\n    };\n    /**\n     * Recursive helper for applyOperationToSyncPoints_\n     *\n     * @private\n     * @param {!Operation} operation\n     * @param {ImmutableTree.<!SyncPoint>} syncPointTree\n     * @param {?Node} serverCache\n     * @param {!WriteTreeRef} writesCache\n     * @return {!Array.<!Event>}\n     */\n    SyncTree.prototype.applyOperationHelper_ = function (operation, syncPointTree, serverCache, writesCache) {\n        if (operation.path.isEmpty()) {\n            return this.applyOperationDescendantsHelper_(operation, syncPointTree, serverCache, writesCache);\n        }\n        else {\n            var syncPoint = syncPointTree.get(Path_1.Path.Empty);\n            // If we don't have cached server data, see if we can get it from this SyncPoint.\n            if (serverCache == null && syncPoint != null) {\n                serverCache = syncPoint.getCompleteServerCache(Path_1.Path.Empty);\n            }\n            var events = [];\n            var childName = operation.path.getFront();\n            var childOperation = operation.operationForChild(childName);\n            var childTree = syncPointTree.children.get(childName);\n            if (childTree && childOperation) {\n                var childServerCache = serverCache\n                    ? serverCache.getImmediateChild(childName)\n                    : null;\n                var childWritesCache = writesCache.child(childName);\n                events = events.concat(this.applyOperationHelper_(childOperation, childTree, childServerCache, childWritesCache));\n            }\n            if (syncPoint) {\n                events = events.concat(syncPoint.applyOperation(operation, writesCache, serverCache));\n            }\n            return events;\n        }\n    };\n    /**\n     * Recursive helper for applyOperationToSyncPoints_\n     *\n     * @private\n     * @param {!Operation} operation\n     * @param {ImmutableTree.<!SyncPoint>} syncPointTree\n     * @param {?Node} serverCache\n     * @param {!WriteTreeRef} writesCache\n     * @return {!Array.<!Event>}\n     */\n    SyncTree.prototype.applyOperationDescendantsHelper_ = function (operation, syncPointTree, serverCache, writesCache) {\n        var _this = this;\n        var syncPoint = syncPointTree.get(Path_1.Path.Empty);\n        // If we don't have cached server data, see if we can get it from this SyncPoint.\n        if (serverCache == null && syncPoint != null) {\n            serverCache = syncPoint.getCompleteServerCache(Path_1.Path.Empty);\n        }\n        var events = [];\n        syncPointTree.children.inorderTraversal(function (childName, childTree) {\n            var childServerCache = serverCache\n                ? serverCache.getImmediateChild(childName)\n                : null;\n            var childWritesCache = writesCache.child(childName);\n            var childOperation = operation.operationForChild(childName);\n            if (childOperation) {\n                events = events.concat(_this.applyOperationDescendantsHelper_(childOperation, childTree, childServerCache, childWritesCache));\n            }\n        });\n        if (syncPoint) {\n            events = events.concat(syncPoint.applyOperation(operation, writesCache, serverCache));\n        }\n        return events;\n    };\n    /**\n     * Static tracker for next query tag.\n     * @type {number}\n     * @private\n     */\n    SyncTree.nextQueryTag_ = 1;\n    return SyncTree;\n}());\nexports.SyncTree = SyncTree;\n\n//# sourceMappingURL=SyncTree.js.map\n"},"lineCount":712}},"hash":"6bc934d278eb95f3a0cacd7ef6a38c1d","cacheData":{"env":{}}}