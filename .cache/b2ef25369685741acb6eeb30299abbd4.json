{"dependencies":[{"name":"/Volumes/Work/forks/til.camp/package.json","includedInParent":true,"mtime":1524300285000},{"name":"/Volumes/Work/forks/til.camp/.browserslistrc","includedInParent":true,"mtime":1524300285000},{"name":"/Volumes/Work/forks/til.camp/node_modules/@firebase/database/package.json","includedInParent":true,"mtime":1519337717000},{"name":"@firebase/util","loc":{"line":20,"column":21}},{"name":"./Path","loc":{"line":19,"column":21}}],"generated":{"js":"\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar util_1 = require(\"@firebase/util\");\nvar Path_1 = require(\"./Path\");\nvar util_2 = require(\"@firebase/util\");\n/**\n * Node in a Tree.\n */\nvar TreeNode = /** @class */ (function () {\n    function TreeNode() {\n        // TODO: Consider making accessors that create children and value lazily or\n        // separate Internal / Leaf 'types'.\n        this.children = {};\n        this.childCount = 0;\n        this.value = null;\n    }\n    return TreeNode;\n}());\nexports.TreeNode = TreeNode;\n/**\n * A light-weight tree, traversable by path.  Nodes can have both values and children.\n * Nodes are not enumerated (by forEachChild) unless they have a value or non-empty\n * children.\n */\nvar Tree = /** @class */ (function () {\n    /**\n     * @template T\n     * @param {string=} name_ Optional name of the node.\n     * @param {Tree=} parent_ Optional parent node.\n     * @param {TreeNode=} node_ Optional node to wrap.\n     */\n    function Tree(name_, parent_, node_) {\n        if (name_ === void 0) { name_ = ''; }\n        if (parent_ === void 0) { parent_ = null; }\n        if (node_ === void 0) { node_ = new TreeNode(); }\n        this.name_ = name_;\n        this.parent_ = parent_;\n        this.node_ = node_;\n    }\n    /**\n     * Returns a sub-Tree for the given path.\n     *\n     * @param {!(string|Path)} pathObj Path to look up.\n     * @return {!Tree.<T>} Tree for path.\n     */\n    Tree.prototype.subTree = function (pathObj) {\n        // TODO: Require pathObj to be Path?\n        var path = pathObj instanceof Path_1.Path ? pathObj : new Path_1.Path(pathObj);\n        var child = this, next;\n        while ((next = path.getFront()) !== null) {\n            var childNode = util_2.safeGet(child.node_.children, next) || new TreeNode();\n            child = new Tree(next, child, childNode);\n            path = path.popFront();\n        }\n        return child;\n    };\n    /**\n     * Returns the data associated with this tree node.\n     *\n     * @return {?T} The data or null if no data exists.\n     */\n    Tree.prototype.getValue = function () {\n        return this.node_.value;\n    };\n    /**\n     * Sets data to this tree node.\n     *\n     * @param {!T} value Value to set.\n     */\n    Tree.prototype.setValue = function (value) {\n        util_1.assert(typeof value !== 'undefined', 'Cannot set value to undefined');\n        this.node_.value = value;\n        this.updateParents_();\n    };\n    /**\n     * Clears the contents of the tree node (its value and all children).\n     */\n    Tree.prototype.clear = function () {\n        this.node_.value = null;\n        this.node_.children = {};\n        this.node_.childCount = 0;\n        this.updateParents_();\n    };\n    /**\n     * @return {boolean} Whether the tree has any children.\n     */\n    Tree.prototype.hasChildren = function () {\n        return this.node_.childCount > 0;\n    };\n    /**\n     * @return {boolean} Whether the tree is empty (no value or children).\n     */\n    Tree.prototype.isEmpty = function () {\n        return this.getValue() === null && !this.hasChildren();\n    };\n    /**\n     * Calls action for each child of this tree node.\n     *\n     * @param {function(!Tree.<T>)} action Action to be called for each child.\n     */\n    Tree.prototype.forEachChild = function (action) {\n        var _this = this;\n        util_2.forEach(this.node_.children, function (child, childTree) {\n            action(new Tree(child, _this, childTree));\n        });\n    };\n    /**\n     * Does a depth-first traversal of this node's descendants, calling action for each one.\n     *\n     * @param {function(!Tree.<T>)} action Action to be called for each child.\n     * @param {boolean=} includeSelf Whether to call action on this node as well. Defaults to\n     *   false.\n     * @param {boolean=} childrenFirst Whether to call action on children before calling it on\n     *   parent.\n     */\n    Tree.prototype.forEachDescendant = function (action, includeSelf, childrenFirst) {\n        if (includeSelf && !childrenFirst)\n            action(this);\n        this.forEachChild(function (child) {\n            child.forEachDescendant(action, /*includeSelf=*/ true, childrenFirst);\n        });\n        if (includeSelf && childrenFirst)\n            action(this);\n    };\n    /**\n     * Calls action on each ancestor node.\n     *\n     * @param {function(!Tree.<T>)} action Action to be called on each parent; return\n     *   true to abort.\n     * @param {boolean=} includeSelf Whether to call action on this node as well.\n     * @return {boolean} true if the action callback returned true.\n     */\n    Tree.prototype.forEachAncestor = function (action, includeSelf) {\n        var node = includeSelf ? this : this.parent();\n        while (node !== null) {\n            if (action(node)) {\n                return true;\n            }\n            node = node.parent();\n        }\n        return false;\n    };\n    /**\n     * Does a depth-first traversal of this node's descendants.  When a descendant with a value\n     * is found, action is called on it and traversal does not continue inside the node.\n     * Action is *not* called on this node.\n     *\n     * @param {function(!Tree.<T>)} action Action to be called for each child.\n     */\n    Tree.prototype.forEachImmediateDescendantWithValue = function (action) {\n        this.forEachChild(function (child) {\n            if (child.getValue() !== null)\n                action(child);\n            else\n                child.forEachImmediateDescendantWithValue(action);\n        });\n    };\n    /**\n     * @return {!Path} The path of this tree node, as a Path.\n     */\n    Tree.prototype.path = function () {\n        return new Path_1.Path(this.parent_ === null\n            ? this.name_\n            : this.parent_.path() + '/' + this.name_);\n    };\n    /**\n     * @return {string} The name of the tree node.\n     */\n    Tree.prototype.name = function () {\n        return this.name_;\n    };\n    /**\n     * @return {?Tree} The parent tree node, or null if this is the root of the tree.\n     */\n    Tree.prototype.parent = function () {\n        return this.parent_;\n    };\n    /**\n     * Adds or removes this child from its parent based on whether it's empty or not.\n     *\n     * @private\n     */\n    Tree.prototype.updateParents_ = function () {\n        if (this.parent_ !== null)\n            this.parent_.updateChild_(this.name_, this);\n    };\n    /**\n     * Adds or removes the passed child to this tree node, depending on whether it's empty.\n     *\n     * @param {string} childName The name of the child to update.\n     * @param {!Tree.<T>} child The child to update.\n     * @private\n     */\n    Tree.prototype.updateChild_ = function (childName, child) {\n        var childEmpty = child.isEmpty();\n        var childExists = util_2.contains(this.node_.children, childName);\n        if (childEmpty && childExists) {\n            delete this.node_.children[childName];\n            this.node_.childCount--;\n            this.updateParents_();\n        }\n        else if (!childEmpty && !childExists) {\n            this.node_.children[childName] = child.node_;\n            this.node_.childCount++;\n            this.updateParents_();\n        }\n    };\n    return Tree;\n}());\nexports.Tree = Tree;\n\n//# sourceMappingURL=Tree.js.map\n","map":{"mappings":[{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}}],"sources":{"node_modules/@firebase/database/dist/cjs/src/core/util/Tree.js":"\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar util_1 = require(\"@firebase/util\");\nvar Path_1 = require(\"./Path\");\nvar util_2 = require(\"@firebase/util\");\n/**\n * Node in a Tree.\n */\nvar TreeNode = /** @class */ (function () {\n    function TreeNode() {\n        // TODO: Consider making accessors that create children and value lazily or\n        // separate Internal / Leaf 'types'.\n        this.children = {};\n        this.childCount = 0;\n        this.value = null;\n    }\n    return TreeNode;\n}());\nexports.TreeNode = TreeNode;\n/**\n * A light-weight tree, traversable by path.  Nodes can have both values and children.\n * Nodes are not enumerated (by forEachChild) unless they have a value or non-empty\n * children.\n */\nvar Tree = /** @class */ (function () {\n    /**\n     * @template T\n     * @param {string=} name_ Optional name of the node.\n     * @param {Tree=} parent_ Optional parent node.\n     * @param {TreeNode=} node_ Optional node to wrap.\n     */\n    function Tree(name_, parent_, node_) {\n        if (name_ === void 0) { name_ = ''; }\n        if (parent_ === void 0) { parent_ = null; }\n        if (node_ === void 0) { node_ = new TreeNode(); }\n        this.name_ = name_;\n        this.parent_ = parent_;\n        this.node_ = node_;\n    }\n    /**\n     * Returns a sub-Tree for the given path.\n     *\n     * @param {!(string|Path)} pathObj Path to look up.\n     * @return {!Tree.<T>} Tree for path.\n     */\n    Tree.prototype.subTree = function (pathObj) {\n        // TODO: Require pathObj to be Path?\n        var path = pathObj instanceof Path_1.Path ? pathObj : new Path_1.Path(pathObj);\n        var child = this, next;\n        while ((next = path.getFront()) !== null) {\n            var childNode = util_2.safeGet(child.node_.children, next) || new TreeNode();\n            child = new Tree(next, child, childNode);\n            path = path.popFront();\n        }\n        return child;\n    };\n    /**\n     * Returns the data associated with this tree node.\n     *\n     * @return {?T} The data or null if no data exists.\n     */\n    Tree.prototype.getValue = function () {\n        return this.node_.value;\n    };\n    /**\n     * Sets data to this tree node.\n     *\n     * @param {!T} value Value to set.\n     */\n    Tree.prototype.setValue = function (value) {\n        util_1.assert(typeof value !== 'undefined', 'Cannot set value to undefined');\n        this.node_.value = value;\n        this.updateParents_();\n    };\n    /**\n     * Clears the contents of the tree node (its value and all children).\n     */\n    Tree.prototype.clear = function () {\n        this.node_.value = null;\n        this.node_.children = {};\n        this.node_.childCount = 0;\n        this.updateParents_();\n    };\n    /**\n     * @return {boolean} Whether the tree has any children.\n     */\n    Tree.prototype.hasChildren = function () {\n        return this.node_.childCount > 0;\n    };\n    /**\n     * @return {boolean} Whether the tree is empty (no value or children).\n     */\n    Tree.prototype.isEmpty = function () {\n        return this.getValue() === null && !this.hasChildren();\n    };\n    /**\n     * Calls action for each child of this tree node.\n     *\n     * @param {function(!Tree.<T>)} action Action to be called for each child.\n     */\n    Tree.prototype.forEachChild = function (action) {\n        var _this = this;\n        util_2.forEach(this.node_.children, function (child, childTree) {\n            action(new Tree(child, _this, childTree));\n        });\n    };\n    /**\n     * Does a depth-first traversal of this node's descendants, calling action for each one.\n     *\n     * @param {function(!Tree.<T>)} action Action to be called for each child.\n     * @param {boolean=} includeSelf Whether to call action on this node as well. Defaults to\n     *   false.\n     * @param {boolean=} childrenFirst Whether to call action on children before calling it on\n     *   parent.\n     */\n    Tree.prototype.forEachDescendant = function (action, includeSelf, childrenFirst) {\n        if (includeSelf && !childrenFirst)\n            action(this);\n        this.forEachChild(function (child) {\n            child.forEachDescendant(action, /*includeSelf=*/ true, childrenFirst);\n        });\n        if (includeSelf && childrenFirst)\n            action(this);\n    };\n    /**\n     * Calls action on each ancestor node.\n     *\n     * @param {function(!Tree.<T>)} action Action to be called on each parent; return\n     *   true to abort.\n     * @param {boolean=} includeSelf Whether to call action on this node as well.\n     * @return {boolean} true if the action callback returned true.\n     */\n    Tree.prototype.forEachAncestor = function (action, includeSelf) {\n        var node = includeSelf ? this : this.parent();\n        while (node !== null) {\n            if (action(node)) {\n                return true;\n            }\n            node = node.parent();\n        }\n        return false;\n    };\n    /**\n     * Does a depth-first traversal of this node's descendants.  When a descendant with a value\n     * is found, action is called on it and traversal does not continue inside the node.\n     * Action is *not* called on this node.\n     *\n     * @param {function(!Tree.<T>)} action Action to be called for each child.\n     */\n    Tree.prototype.forEachImmediateDescendantWithValue = function (action) {\n        this.forEachChild(function (child) {\n            if (child.getValue() !== null)\n                action(child);\n            else\n                child.forEachImmediateDescendantWithValue(action);\n        });\n    };\n    /**\n     * @return {!Path} The path of this tree node, as a Path.\n     */\n    Tree.prototype.path = function () {\n        return new Path_1.Path(this.parent_ === null\n            ? this.name_\n            : this.parent_.path() + '/' + this.name_);\n    };\n    /**\n     * @return {string} The name of the tree node.\n     */\n    Tree.prototype.name = function () {\n        return this.name_;\n    };\n    /**\n     * @return {?Tree} The parent tree node, or null if this is the root of the tree.\n     */\n    Tree.prototype.parent = function () {\n        return this.parent_;\n    };\n    /**\n     * Adds or removes this child from its parent based on whether it's empty or not.\n     *\n     * @private\n     */\n    Tree.prototype.updateParents_ = function () {\n        if (this.parent_ !== null)\n            this.parent_.updateChild_(this.name_, this);\n    };\n    /**\n     * Adds or removes the passed child to this tree node, depending on whether it's empty.\n     *\n     * @param {string} childName The name of the child to update.\n     * @param {!Tree.<T>} child The child to update.\n     * @private\n     */\n    Tree.prototype.updateChild_ = function (childName, child) {\n        var childEmpty = child.isEmpty();\n        var childExists = util_2.contains(this.node_.children, childName);\n        if (childEmpty && childExists) {\n            delete this.node_.children[childName];\n            this.node_.childCount--;\n            this.updateParents_();\n        }\n        else if (!childEmpty && !childExists) {\n            this.node_.children[childName] = child.node_;\n            this.node_.childCount++;\n            this.updateParents_();\n        }\n    };\n    return Tree;\n}());\nexports.Tree = Tree;\n\n//# sourceMappingURL=Tree.js.map\n"},"lineCount":228}},"hash":"10752159876848adfbaf533e3177ad8f","cacheData":{"env":{}}}