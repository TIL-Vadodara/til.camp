{"dependencies":[{"name":"/Volumes/Work/forks/til.camp/package.json","includedInParent":true,"mtime":1524300285000},{"name":"/Volumes/Work/forks/til.camp/.browserslistrc","includedInParent":true,"mtime":1524300285000},{"name":"/Volumes/Work/forks/til.camp/node_modules/@firebase/database/package.json","includedInParent":true,"mtime":1519337717000},{"name":"./SortedMap","loc":{"line":18,"column":26}},{"name":"./Path","loc":{"line":19,"column":21}},{"name":"./util","loc":{"line":20,"column":21}},{"name":"@firebase/util","loc":{"line":21,"column":21}}],"generated":{"js":"\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar SortedMap_1 = require(\"./SortedMap\");\nvar Path_1 = require(\"./Path\");\nvar util_1 = require(\"./util\");\nvar util_2 = require(\"@firebase/util\");\nvar emptyChildrenSingleton;\n/**\n * Singleton empty children collection.\n *\n * @const\n * @type {!SortedMap.<string, !ImmutableTree.<?>>}\n */\nvar EmptyChildren = function () {\n    if (!emptyChildrenSingleton) {\n        emptyChildrenSingleton = new SortedMap_1.SortedMap(util_1.stringCompare);\n    }\n    return emptyChildrenSingleton;\n};\n/**\n * A tree with immutable elements.\n */\nvar ImmutableTree = /** @class */ (function () {\n    /**\n     * @template T\n     * @param {?T} value\n     * @param {SortedMap.<string, !ImmutableTree.<T>>=} children\n     */\n    function ImmutableTree(value, children) {\n        if (children === void 0) { children = EmptyChildren(); }\n        this.value = value;\n        this.children = children;\n    }\n    /**\n     * @template T\n     * @param {!Object.<string, !T>} obj\n     * @return {!ImmutableTree.<!T>}\n     */\n    ImmutableTree.fromObject = function (obj) {\n        var tree = ImmutableTree.Empty;\n        util_2.forEach(obj, function (childPath, childSnap) {\n            tree = tree.set(new Path_1.Path(childPath), childSnap);\n        });\n        return tree;\n    };\n    /**\n     * True if the value is empty and there are no children\n     * @return {boolean}\n     */\n    ImmutableTree.prototype.isEmpty = function () {\n        return this.value === null && this.children.isEmpty();\n    };\n    /**\n     * Given a path and predicate, return the first node and the path to that node\n     * where the predicate returns true.\n     *\n     * TODO Do a perf test -- If we're creating a bunch of {path: value:} objects\n     * on the way back out, it may be better to pass down a pathSoFar obj.\n     *\n     * @param {!Path} relativePath The remainder of the path\n     * @param {function(T):boolean} predicate The predicate to satisfy to return a\n     *   node\n     * @return {?{path:!Path, value:!T}}\n     */\n    ImmutableTree.prototype.findRootMostMatchingPathAndValue = function (relativePath, predicate) {\n        if (this.value != null && predicate(this.value)) {\n            return { path: Path_1.Path.Empty, value: this.value };\n        }\n        else {\n            if (relativePath.isEmpty()) {\n                return null;\n            }\n            else {\n                var front = relativePath.getFront();\n                var child = this.children.get(front);\n                if (child !== null) {\n                    var childExistingPathAndValue = child.findRootMostMatchingPathAndValue(relativePath.popFront(), predicate);\n                    if (childExistingPathAndValue != null) {\n                        var fullPath = new Path_1.Path(front).child(childExistingPathAndValue.path);\n                        return { path: fullPath, value: childExistingPathAndValue.value };\n                    }\n                    else {\n                        return null;\n                    }\n                }\n                else {\n                    return null;\n                }\n            }\n        }\n    };\n    /**\n     * Find, if it exists, the shortest subpath of the given path that points a defined\n     * value in the tree\n     * @param {!Path} relativePath\n     * @return {?{path: !Path, value: !T}}\n     */\n    ImmutableTree.prototype.findRootMostValueAndPath = function (relativePath) {\n        return this.findRootMostMatchingPathAndValue(relativePath, function () { return true; });\n    };\n    /**\n     * @param {!Path} relativePath\n     * @return {!ImmutableTree.<T>} The subtree at the given path\n     */\n    ImmutableTree.prototype.subtree = function (relativePath) {\n        if (relativePath.isEmpty()) {\n            return this;\n        }\n        else {\n            var front = relativePath.getFront();\n            var childTree = this.children.get(front);\n            if (childTree !== null) {\n                return childTree.subtree(relativePath.popFront());\n            }\n            else {\n                return ImmutableTree.Empty;\n            }\n        }\n    };\n    /**\n     * Sets a value at the specified path.\n     *\n     * @param {!Path} relativePath Path to set value at.\n     * @param {?T} toSet Value to set.\n     * @return {!ImmutableTree.<T>} Resulting tree.\n     */\n    ImmutableTree.prototype.set = function (relativePath, toSet) {\n        if (relativePath.isEmpty()) {\n            return new ImmutableTree(toSet, this.children);\n        }\n        else {\n            var front = relativePath.getFront();\n            var child = this.children.get(front) || ImmutableTree.Empty;\n            var newChild = child.set(relativePath.popFront(), toSet);\n            var newChildren = this.children.insert(front, newChild);\n            return new ImmutableTree(this.value, newChildren);\n        }\n    };\n    /**\n     * Removes the value at the specified path.\n     *\n     * @param {!Path} relativePath Path to value to remove.\n     * @return {!ImmutableTree.<T>} Resulting tree.\n     */\n    ImmutableTree.prototype.remove = function (relativePath) {\n        if (relativePath.isEmpty()) {\n            if (this.children.isEmpty()) {\n                return ImmutableTree.Empty;\n            }\n            else {\n                return new ImmutableTree(null, this.children);\n            }\n        }\n        else {\n            var front = relativePath.getFront();\n            var child = this.children.get(front);\n            if (child) {\n                var newChild = child.remove(relativePath.popFront());\n                var newChildren = void 0;\n                if (newChild.isEmpty()) {\n                    newChildren = this.children.remove(front);\n                }\n                else {\n                    newChildren = this.children.insert(front, newChild);\n                }\n                if (this.value === null && newChildren.isEmpty()) {\n                    return ImmutableTree.Empty;\n                }\n                else {\n                    return new ImmutableTree(this.value, newChildren);\n                }\n            }\n            else {\n                return this;\n            }\n        }\n    };\n    /**\n     * Gets a value from the tree.\n     *\n     * @param {!Path} relativePath Path to get value for.\n     * @return {?T} Value at path, or null.\n     */\n    ImmutableTree.prototype.get = function (relativePath) {\n        if (relativePath.isEmpty()) {\n            return this.value;\n        }\n        else {\n            var front = relativePath.getFront();\n            var child = this.children.get(front);\n            if (child) {\n                return child.get(relativePath.popFront());\n            }\n            else {\n                return null;\n            }\n        }\n    };\n    /**\n     * Replace the subtree at the specified path with the given new tree.\n     *\n     * @param {!Path} relativePath Path to replace subtree for.\n     * @param {!ImmutableTree} newTree New tree.\n     * @return {!ImmutableTree} Resulting tree.\n     */\n    ImmutableTree.prototype.setTree = function (relativePath, newTree) {\n        if (relativePath.isEmpty()) {\n            return newTree;\n        }\n        else {\n            var front = relativePath.getFront();\n            var child = this.children.get(front) || ImmutableTree.Empty;\n            var newChild = child.setTree(relativePath.popFront(), newTree);\n            var newChildren = void 0;\n            if (newChild.isEmpty()) {\n                newChildren = this.children.remove(front);\n            }\n            else {\n                newChildren = this.children.insert(front, newChild);\n            }\n            return new ImmutableTree(this.value, newChildren);\n        }\n    };\n    /**\n     * Performs a depth first fold on this tree. Transforms a tree into a single\n     * value, given a function that operates on the path to a node, an optional\n     * current value, and a map of child names to folded subtrees\n     * @template V\n     * @param {function(Path, ?T, Object.<string, V>):V} fn\n     * @return {V}\n     */\n    ImmutableTree.prototype.fold = function (fn) {\n        return this.fold_(Path_1.Path.Empty, fn);\n    };\n    /**\n     * Recursive helper for public-facing fold() method\n     * @template V\n     * @param {!Path} pathSoFar\n     * @param {function(Path, ?T, Object.<string, V>):V} fn\n     * @return {V}\n     * @private\n     */\n    ImmutableTree.prototype.fold_ = function (pathSoFar, fn) {\n        var accum = {};\n        this.children.inorderTraversal(function (childKey, childTree) {\n            accum[childKey] = childTree.fold_(pathSoFar.child(childKey), fn);\n        });\n        return fn(pathSoFar, this.value, accum);\n    };\n    /**\n     * Find the first matching value on the given path. Return the result of applying f to it.\n     * @template V\n     * @param {!Path} path\n     * @param {!function(!Path, !T):?V} f\n     * @return {?V}\n     */\n    ImmutableTree.prototype.findOnPath = function (path, f) {\n        return this.findOnPath_(path, Path_1.Path.Empty, f);\n    };\n    ImmutableTree.prototype.findOnPath_ = function (pathToFollow, pathSoFar, f) {\n        var result = this.value ? f(pathSoFar, this.value) : false;\n        if (result) {\n            return result;\n        }\n        else {\n            if (pathToFollow.isEmpty()) {\n                return null;\n            }\n            else {\n                var front = pathToFollow.getFront();\n                var nextChild = this.children.get(front);\n                if (nextChild) {\n                    return nextChild.findOnPath_(pathToFollow.popFront(), pathSoFar.child(front), f);\n                }\n                else {\n                    return null;\n                }\n            }\n        }\n    };\n    /**\n     *\n     * @param {!Path} path\n     * @param {!function(!Path, !T)} f\n     * @returns {!ImmutableTree.<T>}\n     */\n    ImmutableTree.prototype.foreachOnPath = function (path, f) {\n        return this.foreachOnPath_(path, Path_1.Path.Empty, f);\n    };\n    ImmutableTree.prototype.foreachOnPath_ = function (pathToFollow, currentRelativePath, f) {\n        if (pathToFollow.isEmpty()) {\n            return this;\n        }\n        else {\n            if (this.value) {\n                f(currentRelativePath, this.value);\n            }\n            var front = pathToFollow.getFront();\n            var nextChild = this.children.get(front);\n            if (nextChild) {\n                return nextChild.foreachOnPath_(pathToFollow.popFront(), currentRelativePath.child(front), f);\n            }\n            else {\n                return ImmutableTree.Empty;\n            }\n        }\n    };\n    /**\n     * Calls the given function for each node in the tree that has a value.\n     *\n     * @param {function(!Path, !T)} f A function to be called with\n     *   the path from the root of the tree to a node, and the value at that node.\n     *   Called in depth-first order.\n     */\n    ImmutableTree.prototype.foreach = function (f) {\n        this.foreach_(Path_1.Path.Empty, f);\n    };\n    ImmutableTree.prototype.foreach_ = function (currentRelativePath, f) {\n        this.children.inorderTraversal(function (childName, childTree) {\n            childTree.foreach_(currentRelativePath.child(childName), f);\n        });\n        if (this.value) {\n            f(currentRelativePath, this.value);\n        }\n    };\n    /**\n     *\n     * @param {function(string, !T)} f\n     */\n    ImmutableTree.prototype.foreachChild = function (f) {\n        this.children.inorderTraversal(function (childName, childTree) {\n            if (childTree.value) {\n                f(childName, childTree.value);\n            }\n        });\n    };\n    ImmutableTree.Empty = new ImmutableTree(null);\n    return ImmutableTree;\n}());\nexports.ImmutableTree = ImmutableTree;\n\n//# sourceMappingURL=ImmutableTree.js.map\n","map":{"mappings":[{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":247,"column":0},"generated":{"line":247,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":248,"column":0},"generated":{"line":248,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":249,"column":0},"generated":{"line":249,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":250,"column":0},"generated":{"line":250,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":251,"column":0},"generated":{"line":251,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":252,"column":0},"generated":{"line":252,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":253,"column":0},"generated":{"line":253,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":254,"column":0},"generated":{"line":254,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":255,"column":0},"generated":{"line":255,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":256,"column":0},"generated":{"line":256,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":257,"column":0},"generated":{"line":257,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":258,"column":0},"generated":{"line":258,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":259,"column":0},"generated":{"line":259,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":260,"column":0},"generated":{"line":260,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":261,"column":0},"generated":{"line":261,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":262,"column":0},"generated":{"line":262,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":263,"column":0},"generated":{"line":263,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":264,"column":0},"generated":{"line":264,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":265,"column":0},"generated":{"line":265,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":266,"column":0},"generated":{"line":266,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":267,"column":0},"generated":{"line":267,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":268,"column":0},"generated":{"line":268,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":269,"column":0},"generated":{"line":269,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":270,"column":0},"generated":{"line":270,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":271,"column":0},"generated":{"line":271,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":272,"column":0},"generated":{"line":272,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":273,"column":0},"generated":{"line":273,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":274,"column":0},"generated":{"line":274,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":275,"column":0},"generated":{"line":275,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":276,"column":0},"generated":{"line":276,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":277,"column":0},"generated":{"line":277,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":278,"column":0},"generated":{"line":278,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":279,"column":0},"generated":{"line":279,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":280,"column":0},"generated":{"line":280,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":281,"column":0},"generated":{"line":281,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":282,"column":0},"generated":{"line":282,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":283,"column":0},"generated":{"line":283,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":284,"column":0},"generated":{"line":284,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":285,"column":0},"generated":{"line":285,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":286,"column":0},"generated":{"line":286,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":287,"column":0},"generated":{"line":287,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":288,"column":0},"generated":{"line":288,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":289,"column":0},"generated":{"line":289,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":290,"column":0},"generated":{"line":290,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":291,"column":0},"generated":{"line":291,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":292,"column":0},"generated":{"line":292,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":293,"column":0},"generated":{"line":293,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":294,"column":0},"generated":{"line":294,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":295,"column":0},"generated":{"line":295,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":296,"column":0},"generated":{"line":296,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":297,"column":0},"generated":{"line":297,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":298,"column":0},"generated":{"line":298,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":299,"column":0},"generated":{"line":299,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":300,"column":0},"generated":{"line":300,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":301,"column":0},"generated":{"line":301,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":302,"column":0},"generated":{"line":302,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":303,"column":0},"generated":{"line":303,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":304,"column":0},"generated":{"line":304,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":305,"column":0},"generated":{"line":305,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":306,"column":0},"generated":{"line":306,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":307,"column":0},"generated":{"line":307,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":308,"column":0},"generated":{"line":308,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":309,"column":0},"generated":{"line":309,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":310,"column":0},"generated":{"line":310,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":311,"column":0},"generated":{"line":311,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":312,"column":0},"generated":{"line":312,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":313,"column":0},"generated":{"line":313,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":314,"column":0},"generated":{"line":314,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":315,"column":0},"generated":{"line":315,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":316,"column":0},"generated":{"line":316,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":317,"column":0},"generated":{"line":317,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":318,"column":0},"generated":{"line":318,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":319,"column":0},"generated":{"line":319,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":320,"column":0},"generated":{"line":320,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":321,"column":0},"generated":{"line":321,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":322,"column":0},"generated":{"line":322,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":323,"column":0},"generated":{"line":323,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":324,"column":0},"generated":{"line":324,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":325,"column":0},"generated":{"line":325,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":326,"column":0},"generated":{"line":326,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":327,"column":0},"generated":{"line":327,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":328,"column":0},"generated":{"line":328,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":329,"column":0},"generated":{"line":329,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":330,"column":0},"generated":{"line":330,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":331,"column":0},"generated":{"line":331,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":332,"column":0},"generated":{"line":332,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":333,"column":0},"generated":{"line":333,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":334,"column":0},"generated":{"line":334,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":335,"column":0},"generated":{"line":335,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":336,"column":0},"generated":{"line":336,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":337,"column":0},"generated":{"line":337,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":338,"column":0},"generated":{"line":338,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":339,"column":0},"generated":{"line":339,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":340,"column":0},"generated":{"line":340,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":341,"column":0},"generated":{"line":341,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":342,"column":0},"generated":{"line":342,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":343,"column":0},"generated":{"line":343,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":344,"column":0},"generated":{"line":344,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":345,"column":0},"generated":{"line":345,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":346,"column":0},"generated":{"line":346,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":347,"column":0},"generated":{"line":347,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":348,"column":0},"generated":{"line":348,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":349,"column":0},"generated":{"line":349,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":350,"column":0},"generated":{"line":350,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":351,"column":0},"generated":{"line":351,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":352,"column":0},"generated":{"line":352,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":353,"column":0},"generated":{"line":353,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":354,"column":0},"generated":{"line":354,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":355,"column":0},"generated":{"line":355,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":356,"column":0},"generated":{"line":356,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":357,"column":0},"generated":{"line":357,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js","original":{"line":358,"column":0},"generated":{"line":358,"column":0}}],"sources":{"node_modules/@firebase/database/dist/cjs/src/core/util/ImmutableTree.js":"\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar SortedMap_1 = require(\"./SortedMap\");\nvar Path_1 = require(\"./Path\");\nvar util_1 = require(\"./util\");\nvar util_2 = require(\"@firebase/util\");\nvar emptyChildrenSingleton;\n/**\n * Singleton empty children collection.\n *\n * @const\n * @type {!SortedMap.<string, !ImmutableTree.<?>>}\n */\nvar EmptyChildren = function () {\n    if (!emptyChildrenSingleton) {\n        emptyChildrenSingleton = new SortedMap_1.SortedMap(util_1.stringCompare);\n    }\n    return emptyChildrenSingleton;\n};\n/**\n * A tree with immutable elements.\n */\nvar ImmutableTree = /** @class */ (function () {\n    /**\n     * @template T\n     * @param {?T} value\n     * @param {SortedMap.<string, !ImmutableTree.<T>>=} children\n     */\n    function ImmutableTree(value, children) {\n        if (children === void 0) { children = EmptyChildren(); }\n        this.value = value;\n        this.children = children;\n    }\n    /**\n     * @template T\n     * @param {!Object.<string, !T>} obj\n     * @return {!ImmutableTree.<!T>}\n     */\n    ImmutableTree.fromObject = function (obj) {\n        var tree = ImmutableTree.Empty;\n        util_2.forEach(obj, function (childPath, childSnap) {\n            tree = tree.set(new Path_1.Path(childPath), childSnap);\n        });\n        return tree;\n    };\n    /**\n     * True if the value is empty and there are no children\n     * @return {boolean}\n     */\n    ImmutableTree.prototype.isEmpty = function () {\n        return this.value === null && this.children.isEmpty();\n    };\n    /**\n     * Given a path and predicate, return the first node and the path to that node\n     * where the predicate returns true.\n     *\n     * TODO Do a perf test -- If we're creating a bunch of {path: value:} objects\n     * on the way back out, it may be better to pass down a pathSoFar obj.\n     *\n     * @param {!Path} relativePath The remainder of the path\n     * @param {function(T):boolean} predicate The predicate to satisfy to return a\n     *   node\n     * @return {?{path:!Path, value:!T}}\n     */\n    ImmutableTree.prototype.findRootMostMatchingPathAndValue = function (relativePath, predicate) {\n        if (this.value != null && predicate(this.value)) {\n            return { path: Path_1.Path.Empty, value: this.value };\n        }\n        else {\n            if (relativePath.isEmpty()) {\n                return null;\n            }\n            else {\n                var front = relativePath.getFront();\n                var child = this.children.get(front);\n                if (child !== null) {\n                    var childExistingPathAndValue = child.findRootMostMatchingPathAndValue(relativePath.popFront(), predicate);\n                    if (childExistingPathAndValue != null) {\n                        var fullPath = new Path_1.Path(front).child(childExistingPathAndValue.path);\n                        return { path: fullPath, value: childExistingPathAndValue.value };\n                    }\n                    else {\n                        return null;\n                    }\n                }\n                else {\n                    return null;\n                }\n            }\n        }\n    };\n    /**\n     * Find, if it exists, the shortest subpath of the given path that points a defined\n     * value in the tree\n     * @param {!Path} relativePath\n     * @return {?{path: !Path, value: !T}}\n     */\n    ImmutableTree.prototype.findRootMostValueAndPath = function (relativePath) {\n        return this.findRootMostMatchingPathAndValue(relativePath, function () { return true; });\n    };\n    /**\n     * @param {!Path} relativePath\n     * @return {!ImmutableTree.<T>} The subtree at the given path\n     */\n    ImmutableTree.prototype.subtree = function (relativePath) {\n        if (relativePath.isEmpty()) {\n            return this;\n        }\n        else {\n            var front = relativePath.getFront();\n            var childTree = this.children.get(front);\n            if (childTree !== null) {\n                return childTree.subtree(relativePath.popFront());\n            }\n            else {\n                return ImmutableTree.Empty;\n            }\n        }\n    };\n    /**\n     * Sets a value at the specified path.\n     *\n     * @param {!Path} relativePath Path to set value at.\n     * @param {?T} toSet Value to set.\n     * @return {!ImmutableTree.<T>} Resulting tree.\n     */\n    ImmutableTree.prototype.set = function (relativePath, toSet) {\n        if (relativePath.isEmpty()) {\n            return new ImmutableTree(toSet, this.children);\n        }\n        else {\n            var front = relativePath.getFront();\n            var child = this.children.get(front) || ImmutableTree.Empty;\n            var newChild = child.set(relativePath.popFront(), toSet);\n            var newChildren = this.children.insert(front, newChild);\n            return new ImmutableTree(this.value, newChildren);\n        }\n    };\n    /**\n     * Removes the value at the specified path.\n     *\n     * @param {!Path} relativePath Path to value to remove.\n     * @return {!ImmutableTree.<T>} Resulting tree.\n     */\n    ImmutableTree.prototype.remove = function (relativePath) {\n        if (relativePath.isEmpty()) {\n            if (this.children.isEmpty()) {\n                return ImmutableTree.Empty;\n            }\n            else {\n                return new ImmutableTree(null, this.children);\n            }\n        }\n        else {\n            var front = relativePath.getFront();\n            var child = this.children.get(front);\n            if (child) {\n                var newChild = child.remove(relativePath.popFront());\n                var newChildren = void 0;\n                if (newChild.isEmpty()) {\n                    newChildren = this.children.remove(front);\n                }\n                else {\n                    newChildren = this.children.insert(front, newChild);\n                }\n                if (this.value === null && newChildren.isEmpty()) {\n                    return ImmutableTree.Empty;\n                }\n                else {\n                    return new ImmutableTree(this.value, newChildren);\n                }\n            }\n            else {\n                return this;\n            }\n        }\n    };\n    /**\n     * Gets a value from the tree.\n     *\n     * @param {!Path} relativePath Path to get value for.\n     * @return {?T} Value at path, or null.\n     */\n    ImmutableTree.prototype.get = function (relativePath) {\n        if (relativePath.isEmpty()) {\n            return this.value;\n        }\n        else {\n            var front = relativePath.getFront();\n            var child = this.children.get(front);\n            if (child) {\n                return child.get(relativePath.popFront());\n            }\n            else {\n                return null;\n            }\n        }\n    };\n    /**\n     * Replace the subtree at the specified path with the given new tree.\n     *\n     * @param {!Path} relativePath Path to replace subtree for.\n     * @param {!ImmutableTree} newTree New tree.\n     * @return {!ImmutableTree} Resulting tree.\n     */\n    ImmutableTree.prototype.setTree = function (relativePath, newTree) {\n        if (relativePath.isEmpty()) {\n            return newTree;\n        }\n        else {\n            var front = relativePath.getFront();\n            var child = this.children.get(front) || ImmutableTree.Empty;\n            var newChild = child.setTree(relativePath.popFront(), newTree);\n            var newChildren = void 0;\n            if (newChild.isEmpty()) {\n                newChildren = this.children.remove(front);\n            }\n            else {\n                newChildren = this.children.insert(front, newChild);\n            }\n            return new ImmutableTree(this.value, newChildren);\n        }\n    };\n    /**\n     * Performs a depth first fold on this tree. Transforms a tree into a single\n     * value, given a function that operates on the path to a node, an optional\n     * current value, and a map of child names to folded subtrees\n     * @template V\n     * @param {function(Path, ?T, Object.<string, V>):V} fn\n     * @return {V}\n     */\n    ImmutableTree.prototype.fold = function (fn) {\n        return this.fold_(Path_1.Path.Empty, fn);\n    };\n    /**\n     * Recursive helper for public-facing fold() method\n     * @template V\n     * @param {!Path} pathSoFar\n     * @param {function(Path, ?T, Object.<string, V>):V} fn\n     * @return {V}\n     * @private\n     */\n    ImmutableTree.prototype.fold_ = function (pathSoFar, fn) {\n        var accum = {};\n        this.children.inorderTraversal(function (childKey, childTree) {\n            accum[childKey] = childTree.fold_(pathSoFar.child(childKey), fn);\n        });\n        return fn(pathSoFar, this.value, accum);\n    };\n    /**\n     * Find the first matching value on the given path. Return the result of applying f to it.\n     * @template V\n     * @param {!Path} path\n     * @param {!function(!Path, !T):?V} f\n     * @return {?V}\n     */\n    ImmutableTree.prototype.findOnPath = function (path, f) {\n        return this.findOnPath_(path, Path_1.Path.Empty, f);\n    };\n    ImmutableTree.prototype.findOnPath_ = function (pathToFollow, pathSoFar, f) {\n        var result = this.value ? f(pathSoFar, this.value) : false;\n        if (result) {\n            return result;\n        }\n        else {\n            if (pathToFollow.isEmpty()) {\n                return null;\n            }\n            else {\n                var front = pathToFollow.getFront();\n                var nextChild = this.children.get(front);\n                if (nextChild) {\n                    return nextChild.findOnPath_(pathToFollow.popFront(), pathSoFar.child(front), f);\n                }\n                else {\n                    return null;\n                }\n            }\n        }\n    };\n    /**\n     *\n     * @param {!Path} path\n     * @param {!function(!Path, !T)} f\n     * @returns {!ImmutableTree.<T>}\n     */\n    ImmutableTree.prototype.foreachOnPath = function (path, f) {\n        return this.foreachOnPath_(path, Path_1.Path.Empty, f);\n    };\n    ImmutableTree.prototype.foreachOnPath_ = function (pathToFollow, currentRelativePath, f) {\n        if (pathToFollow.isEmpty()) {\n            return this;\n        }\n        else {\n            if (this.value) {\n                f(currentRelativePath, this.value);\n            }\n            var front = pathToFollow.getFront();\n            var nextChild = this.children.get(front);\n            if (nextChild) {\n                return nextChild.foreachOnPath_(pathToFollow.popFront(), currentRelativePath.child(front), f);\n            }\n            else {\n                return ImmutableTree.Empty;\n            }\n        }\n    };\n    /**\n     * Calls the given function for each node in the tree that has a value.\n     *\n     * @param {function(!Path, !T)} f A function to be called with\n     *   the path from the root of the tree to a node, and the value at that node.\n     *   Called in depth-first order.\n     */\n    ImmutableTree.prototype.foreach = function (f) {\n        this.foreach_(Path_1.Path.Empty, f);\n    };\n    ImmutableTree.prototype.foreach_ = function (currentRelativePath, f) {\n        this.children.inorderTraversal(function (childName, childTree) {\n            childTree.foreach_(currentRelativePath.child(childName), f);\n        });\n        if (this.value) {\n            f(currentRelativePath, this.value);\n        }\n    };\n    /**\n     *\n     * @param {function(string, !T)} f\n     */\n    ImmutableTree.prototype.foreachChild = function (f) {\n        this.children.inorderTraversal(function (childName, childTree) {\n            if (childTree.value) {\n                f(childName, childTree.value);\n            }\n        });\n    };\n    ImmutableTree.Empty = new ImmutableTree(null);\n    return ImmutableTree;\n}());\nexports.ImmutableTree = ImmutableTree;\n\n//# sourceMappingURL=ImmutableTree.js.map\n"},"lineCount":358}},"hash":"bc00c4ebc051b2ce8736d41aaed5fd9c","cacheData":{"env":{}}}