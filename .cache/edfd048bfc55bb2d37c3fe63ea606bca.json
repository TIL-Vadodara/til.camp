{"dependencies":[{"name":"/Volumes/Work/forks/til.camp/package.json","includedInParent":true,"mtime":1524300285000},{"name":"/Volumes/Work/forks/til.camp/.browserslistrc","includedInParent":true,"mtime":1524300285000},{"name":"/Volumes/Work/forks/til.camp/node_modules/@firebase/database/package.json","includedInParent":true,"mtime":1519337717000},{"name":"@firebase/util","loc":{"line":19,"column":21}},{"name":"./util/Path","loc":{"line":20,"column":21}},{"name":"./CompoundWrite","loc":{"line":21,"column":30}},{"name":"./snap/indexes/PriorityIndex","loc":{"line":22,"column":30}},{"name":"./snap/ChildrenNode","loc":{"line":23,"column":29}}],"generated":{"js":"\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar util_1 = require(\"@firebase/util\");\nvar util_2 = require(\"@firebase/util\");\nvar Path_1 = require(\"./util/Path\");\nvar CompoundWrite_1 = require(\"./CompoundWrite\");\nvar PriorityIndex_1 = require(\"./snap/indexes/PriorityIndex\");\nvar ChildrenNode_1 = require(\"./snap/ChildrenNode\");\n/**\n * WriteTree tracks all pending user-initiated writes and has methods to calculate the result of merging them\n * with underlying server data (to create \"event cache\" data).  Pending writes are added with addOverwrite()\n * and addMerge(), and removed with removeWrite().\n *\n * @constructor\n */\nvar WriteTree = /** @class */ (function () {\n    function WriteTree() {\n        /**\n         * A tree tracking the result of applying all visible writes.  This does not include transactions with\n         * applyLocally=false or writes that are completely shadowed by other writes.\n         *\n         * @type {!CompoundWrite}\n         * @private\n         */\n        this.visibleWrites_ = CompoundWrite_1.CompoundWrite.Empty;\n        /**\n         * A list of all pending writes, regardless of visibility and shadowed-ness.  Used to calculate arbitrary\n         * sets of the changed data, such as hidden writes (from transactions) or changes with certain writes excluded (also\n         * used by transactions).\n         *\n         * @type {!Array.<!WriteRecord>}\n         * @private\n         */\n        this.allWrites_ = [];\n        this.lastWriteId_ = -1;\n    }\n    /**\n     * Create a new WriteTreeRef for the given path. For use with a new sync point at the given path.\n     *\n     * @param {!Path} path\n     * @return {!WriteTreeRef}\n     */\n    WriteTree.prototype.childWrites = function (path) {\n        return new WriteTreeRef(path, this);\n    };\n    /**\n     * Record a new overwrite from user code.\n     *\n     * @param {!Path} path\n     * @param {!Node} snap\n     * @param {!number} writeId\n     * @param {boolean=} visible This is set to false by some transactions. It should be excluded from event caches\n     */\n    WriteTree.prototype.addOverwrite = function (path, snap, writeId, visible) {\n        util_2.assert(writeId > this.lastWriteId_, 'Stacking an older write on top of newer ones');\n        if (visible === undefined) {\n            visible = true;\n        }\n        this.allWrites_.push({\n            path: path,\n            snap: snap,\n            writeId: writeId,\n            visible: visible\n        });\n        if (visible) {\n            this.visibleWrites_ = this.visibleWrites_.addWrite(path, snap);\n        }\n        this.lastWriteId_ = writeId;\n    };\n    /**\n     * Record a new merge from user code.\n     *\n     * @param {!Path} path\n     * @param {!Object.<string, !Node>} changedChildren\n     * @param {!number} writeId\n     */\n    WriteTree.prototype.addMerge = function (path, changedChildren, writeId) {\n        util_2.assert(writeId > this.lastWriteId_, 'Stacking an older merge on top of newer ones');\n        this.allWrites_.push({\n            path: path,\n            children: changedChildren,\n            writeId: writeId,\n            visible: true\n        });\n        this.visibleWrites_ = this.visibleWrites_.addWrites(path, changedChildren);\n        this.lastWriteId_ = writeId;\n    };\n    /**\n     * @param {!number} writeId\n     * @return {?WriteRecord}\n     */\n    WriteTree.prototype.getWrite = function (writeId) {\n        for (var i = 0; i < this.allWrites_.length; i++) {\n            var record = this.allWrites_[i];\n            if (record.writeId === writeId) {\n                return record;\n            }\n        }\n        return null;\n    };\n    /**\n     * Remove a write (either an overwrite or merge) that has been successfully acknowledge by the server. Recalculates\n     * the tree if necessary.  We return true if it may have been visible, meaning views need to reevaluate.\n     *\n     * @param {!number} writeId\n     * @return {boolean} true if the write may have been visible (meaning we'll need to reevaluate / raise\n     * events as a result).\n     */\n    WriteTree.prototype.removeWrite = function (writeId) {\n        // Note: disabling this check. It could be a transaction that preempted another transaction, and thus was applied\n        // out of order.\n        //const validClear = revert || this.allWrites_.length === 0 || writeId <= this.allWrites_[0].writeId;\n        //assert(validClear, \"Either we don't have this write, or it's the first one in the queue\");\n        var _this = this;\n        var idx = this.allWrites_.findIndex(function (s) {\n            return s.writeId === writeId;\n        });\n        util_2.assert(idx >= 0, 'removeWrite called with nonexistent writeId.');\n        var writeToRemove = this.allWrites_[idx];\n        this.allWrites_.splice(idx, 1);\n        var removedWriteWasVisible = writeToRemove.visible;\n        var removedWriteOverlapsWithOtherWrites = false;\n        var i = this.allWrites_.length - 1;\n        while (removedWriteWasVisible && i >= 0) {\n            var currentWrite = this.allWrites_[i];\n            if (currentWrite.visible) {\n                if (i >= idx &&\n                    this.recordContainsPath_(currentWrite, writeToRemove.path)) {\n                    // The removed write was completely shadowed by a subsequent write.\n                    removedWriteWasVisible = false;\n                }\n                else if (writeToRemove.path.contains(currentWrite.path)) {\n                    // Either we're covering some writes or they're covering part of us (depending on which came first).\n                    removedWriteOverlapsWithOtherWrites = true;\n                }\n            }\n            i--;\n        }\n        if (!removedWriteWasVisible) {\n            return false;\n        }\n        else if (removedWriteOverlapsWithOtherWrites) {\n            // There's some shadowing going on. Just rebuild the visible writes from scratch.\n            this.resetTree_();\n            return true;\n        }\n        else {\n            // There's no shadowing.  We can safely just remove the write(s) from visibleWrites.\n            if (writeToRemove.snap) {\n                this.visibleWrites_ = this.visibleWrites_.removeWrite(writeToRemove.path);\n            }\n            else {\n                var children = writeToRemove.children;\n                util_1.forEach(children, function (childName) {\n                    _this.visibleWrites_ = _this.visibleWrites_.removeWrite(writeToRemove.path.child(childName));\n                });\n            }\n            return true;\n        }\n    };\n    /**\n     * Return a complete snapshot for the given path if there's visible write data at that path, else null.\n     * No server data is considered.\n     *\n     * @param {!Path} path\n     * @return {?Node}\n     */\n    WriteTree.prototype.getCompleteWriteData = function (path) {\n        return this.visibleWrites_.getCompleteNode(path);\n    };\n    /**\n     * Given optional, underlying server data, and an optional set of constraints (exclude some sets, include hidden\n     * writes), attempt to calculate a complete snapshot for the given path\n     *\n     * @param {!Path} treePath\n     * @param {?Node} completeServerCache\n     * @param {Array.<number>=} writeIdsToExclude An optional set to be excluded\n     * @param {boolean=} includeHiddenWrites Defaults to false, whether or not to layer on writes with visible set to false\n     * @return {?Node}\n     */\n    WriteTree.prototype.calcCompleteEventCache = function (treePath, completeServerCache, writeIdsToExclude, includeHiddenWrites) {\n        if (!writeIdsToExclude && !includeHiddenWrites) {\n            var shadowingNode = this.visibleWrites_.getCompleteNode(treePath);\n            if (shadowingNode != null) {\n                return shadowingNode;\n            }\n            else {\n                var subMerge = this.visibleWrites_.childCompoundWrite(treePath);\n                if (subMerge.isEmpty()) {\n                    return completeServerCache;\n                }\n                else if (completeServerCache == null &&\n                    !subMerge.hasCompleteWrite(Path_1.Path.Empty)) {\n                    // We wouldn't have a complete snapshot, since there's no underlying data and no complete shadow\n                    return null;\n                }\n                else {\n                    var layeredCache = completeServerCache || ChildrenNode_1.ChildrenNode.EMPTY_NODE;\n                    return subMerge.apply(layeredCache);\n                }\n            }\n        }\n        else {\n            var merge = this.visibleWrites_.childCompoundWrite(treePath);\n            if (!includeHiddenWrites && merge.isEmpty()) {\n                return completeServerCache;\n            }\n            else {\n                // If the server cache is null, and we don't have a complete cache, we need to return null\n                if (!includeHiddenWrites &&\n                    completeServerCache == null &&\n                    !merge.hasCompleteWrite(Path_1.Path.Empty)) {\n                    return null;\n                }\n                else {\n                    var filter = function (write) {\n                        return ((write.visible || includeHiddenWrites) &&\n                            (!writeIdsToExclude ||\n                                !~writeIdsToExclude.indexOf(write.writeId)) &&\n                            (write.path.contains(treePath) || treePath.contains(write.path)));\n                    };\n                    var mergeAtPath = WriteTree.layerTree_(this.allWrites_, filter, treePath);\n                    var layeredCache = completeServerCache || ChildrenNode_1.ChildrenNode.EMPTY_NODE;\n                    return mergeAtPath.apply(layeredCache);\n                }\n            }\n        }\n    };\n    /**\n     * With optional, underlying server data, attempt to return a children node of children that we have complete data for.\n     * Used when creating new views, to pre-fill their complete event children snapshot.\n     *\n     * @param {!Path} treePath\n     * @param {?ChildrenNode} completeServerChildren\n     * @return {!ChildrenNode}\n     */\n    WriteTree.prototype.calcCompleteEventChildren = function (treePath, completeServerChildren) {\n        var completeChildren = ChildrenNode_1.ChildrenNode.EMPTY_NODE;\n        var topLevelSet = this.visibleWrites_.getCompleteNode(treePath);\n        if (topLevelSet) {\n            if (!topLevelSet.isLeafNode()) {\n                // we're shadowing everything. Return the children.\n                topLevelSet.forEachChild(PriorityIndex_1.PRIORITY_INDEX, function (childName, childSnap) {\n                    completeChildren = completeChildren.updateImmediateChild(childName, childSnap);\n                });\n            }\n            return completeChildren;\n        }\n        else if (completeServerChildren) {\n            // Layer any children we have on top of this\n            // We know we don't have a top-level set, so just enumerate existing children\n            var merge_1 = this.visibleWrites_.childCompoundWrite(treePath);\n            completeServerChildren.forEachChild(PriorityIndex_1.PRIORITY_INDEX, function (childName, childNode) {\n                var node = merge_1\n                    .childCompoundWrite(new Path_1.Path(childName))\n                    .apply(childNode);\n                completeChildren = completeChildren.updateImmediateChild(childName, node);\n            });\n            // Add any complete children we have from the set\n            merge_1.getCompleteChildren().forEach(function (namedNode) {\n                completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);\n            });\n            return completeChildren;\n        }\n        else {\n            // We don't have anything to layer on top of. Layer on any children we have\n            // Note that we can return an empty snap if we have a defined delete\n            var merge = this.visibleWrites_.childCompoundWrite(treePath);\n            merge.getCompleteChildren().forEach(function (namedNode) {\n                completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);\n            });\n            return completeChildren;\n        }\n    };\n    /**\n     * Given that the underlying server data has updated, determine what, if anything, needs to be\n     * applied to the event cache.\n     *\n     * Possibilities:\n     *\n     * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\n     *\n     * 2. Some write is completely shadowing. No events to be raised\n     *\n     * 3. Is partially shadowed. Events\n     *\n     * Either existingEventSnap or existingServerSnap must exist\n     *\n     * @param {!Path} treePath\n     * @param {!Path} childPath\n     * @param {?Node} existingEventSnap\n     * @param {?Node} existingServerSnap\n     * @return {?Node}\n     */\n    WriteTree.prototype.calcEventCacheAfterServerOverwrite = function (treePath, childPath, existingEventSnap, existingServerSnap) {\n        util_2.assert(existingEventSnap || existingServerSnap, 'Either existingEventSnap or existingServerSnap must exist');\n        var path = treePath.child(childPath);\n        if (this.visibleWrites_.hasCompleteWrite(path)) {\n            // At this point we can probably guarantee that we're in case 2, meaning no events\n            // May need to check visibility while doing the findRootMostValueAndPath call\n            return null;\n        }\n        else {\n            // No complete shadowing. We're either partially shadowing or not shadowing at all.\n            var childMerge = this.visibleWrites_.childCompoundWrite(path);\n            if (childMerge.isEmpty()) {\n                // We're not shadowing at all. Case 1\n                return existingServerSnap.getChild(childPath);\n            }\n            else {\n                // This could be more efficient if the serverNode + updates doesn't change the eventSnap\n                // However this is tricky to find out, since user updates don't necessary change the server\n                // snap, e.g. priority updates on empty nodes, or deep deletes. Another special case is if the server\n                // adds nodes, but doesn't change any existing writes. It is therefore not enough to\n                // only check if the updates change the serverNode.\n                // Maybe check if the merge tree contains these special cases and only do a full overwrite in that case?\n                return childMerge.apply(existingServerSnap.getChild(childPath));\n            }\n        }\n    };\n    /**\n     * Returns a complete child for a given server snap after applying all user writes or null if there is no\n     * complete child for this ChildKey.\n     *\n     * @param {!Path} treePath\n     * @param {!string} childKey\n     * @param {!CacheNode} existingServerSnap\n     * @return {?Node}\n     */\n    WriteTree.prototype.calcCompleteChild = function (treePath, childKey, existingServerSnap) {\n        var path = treePath.child(childKey);\n        var shadowingNode = this.visibleWrites_.getCompleteNode(path);\n        if (shadowingNode != null) {\n            return shadowingNode;\n        }\n        else {\n            if (existingServerSnap.isCompleteForChild(childKey)) {\n                var childMerge = this.visibleWrites_.childCompoundWrite(path);\n                return childMerge.apply(existingServerSnap.getNode().getImmediateChild(childKey));\n            }\n            else {\n                return null;\n            }\n        }\n    };\n    /**\n     * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\n     * a higher path, this will return the child of that write relative to the write and this path.\n     * Returns null if there is no write at this path.\n     *\n     * @param {!Path} path\n     * @return {?Node}\n     */\n    WriteTree.prototype.shadowingWrite = function (path) {\n        return this.visibleWrites_.getCompleteNode(path);\n    };\n    /**\n     * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\n     * the window, but may now be in the window.\n     *\n     * @param {!Path} treePath\n     * @param {?Node} completeServerData\n     * @param {!NamedNode} startPost\n     * @param {!number} count\n     * @param {boolean} reverse\n     * @param {!Index} index\n     * @return {!Array.<!NamedNode>}\n     */\n    WriteTree.prototype.calcIndexedSlice = function (treePath, completeServerData, startPost, count, reverse, index) {\n        var toIterate;\n        var merge = this.visibleWrites_.childCompoundWrite(treePath);\n        var shadowingNode = merge.getCompleteNode(Path_1.Path.Empty);\n        if (shadowingNode != null) {\n            toIterate = shadowingNode;\n        }\n        else if (completeServerData != null) {\n            toIterate = merge.apply(completeServerData);\n        }\n        else {\n            // no children to iterate on\n            return [];\n        }\n        toIterate = toIterate.withIndex(index);\n        if (!toIterate.isEmpty() && !toIterate.isLeafNode()) {\n            var nodes = [];\n            var cmp = index.getCompare();\n            var iter = reverse\n                ? toIterate.getReverseIteratorFrom(startPost, index)\n                : toIterate.getIteratorFrom(startPost, index);\n            var next = iter.getNext();\n            while (next && nodes.length < count) {\n                if (cmp(next, startPost) !== 0) {\n                    nodes.push(next);\n                }\n                next = iter.getNext();\n            }\n            return nodes;\n        }\n        else {\n            return [];\n        }\n    };\n    /**\n     * @param {!WriteRecord} writeRecord\n     * @param {!Path} path\n     * @return {boolean}\n     * @private\n     */\n    WriteTree.prototype.recordContainsPath_ = function (writeRecord, path) {\n        if (writeRecord.snap) {\n            return writeRecord.path.contains(path);\n        }\n        else {\n            // findKey can return undefined, so use !! to coerce to boolean\n            return !!util_1.findKey(writeRecord.children, function (childSnap, childName) {\n                return writeRecord.path.child(childName).contains(path);\n            });\n        }\n    };\n    /**\n     * Re-layer the writes and merges into a tree so we can efficiently calculate event snapshots\n     * @private\n     */\n    WriteTree.prototype.resetTree_ = function () {\n        this.visibleWrites_ = WriteTree.layerTree_(this.allWrites_, WriteTree.DefaultFilter_, Path_1.Path.Empty);\n        if (this.allWrites_.length > 0) {\n            this.lastWriteId_ = this.allWrites_[this.allWrites_.length - 1].writeId;\n        }\n        else {\n            this.lastWriteId_ = -1;\n        }\n    };\n    /**\n     * The default filter used when constructing the tree. Keep everything that's visible.\n     *\n     * @param {!WriteRecord} write\n     * @return {boolean}\n     * @private\n     */\n    WriteTree.DefaultFilter_ = function (write) {\n        return write.visible;\n    };\n    /**\n     * Static method. Given an array of WriteRecords, a filter for which ones to include, and a path, construct the tree of\n     * event data at that path.\n     *\n     * @param {!Array.<!WriteRecord>} writes\n     * @param {!function(!WriteRecord):boolean} filter\n     * @param {!Path} treeRoot\n     * @return {!CompoundWrite}\n     * @private\n     */\n    WriteTree.layerTree_ = function (writes, filter, treeRoot) {\n        var compoundWrite = CompoundWrite_1.CompoundWrite.Empty;\n        for (var i = 0; i < writes.length; ++i) {\n            var write = writes[i];\n            // Theory, a later set will either:\n            // a) abort a relevant transaction, so no need to worry about excluding it from calculating that transaction\n            // b) not be relevant to a transaction (separate branch), so again will not affect the data for that transaction\n            if (filter(write)) {\n                var writePath = write.path;\n                var relativePath = void 0;\n                if (write.snap) {\n                    if (treeRoot.contains(writePath)) {\n                        relativePath = Path_1.Path.relativePath(treeRoot, writePath);\n                        compoundWrite = compoundWrite.addWrite(relativePath, write.snap);\n                    }\n                    else if (writePath.contains(treeRoot)) {\n                        relativePath = Path_1.Path.relativePath(writePath, treeRoot);\n                        compoundWrite = compoundWrite.addWrite(Path_1.Path.Empty, write.snap.getChild(relativePath));\n                    }\n                    else {\n                        // There is no overlap between root path and write path, ignore write\n                    }\n                }\n                else if (write.children) {\n                    if (treeRoot.contains(writePath)) {\n                        relativePath = Path_1.Path.relativePath(treeRoot, writePath);\n                        compoundWrite = compoundWrite.addWrites(relativePath, write.children);\n                    }\n                    else if (writePath.contains(treeRoot)) {\n                        relativePath = Path_1.Path.relativePath(writePath, treeRoot);\n                        if (relativePath.isEmpty()) {\n                            compoundWrite = compoundWrite.addWrites(Path_1.Path.Empty, write.children);\n                        }\n                        else {\n                            var child = util_1.safeGet(write.children, relativePath.getFront());\n                            if (child) {\n                                // There exists a child in this node that matches the root path\n                                var deepNode = child.getChild(relativePath.popFront());\n                                compoundWrite = compoundWrite.addWrite(Path_1.Path.Empty, deepNode);\n                            }\n                        }\n                    }\n                    else {\n                        // There is no overlap between root path and write path, ignore write\n                    }\n                }\n                else {\n                    throw util_2.assertionError('WriteRecord should have .snap or .children');\n                }\n            }\n        }\n        return compoundWrite;\n    };\n    return WriteTree;\n}());\nexports.WriteTree = WriteTree;\n/**\n * A WriteTreeRef wraps a WriteTree and a path, for convenient access to a particular subtree.  All of the methods\n * just proxy to the underlying WriteTree.\n *\n * @constructor\n */\nvar WriteTreeRef = /** @class */ (function () {\n    /**\n     * @param {!Path} path\n     * @param {!WriteTree} writeTree\n     */\n    function WriteTreeRef(path, writeTree) {\n        this.treePath_ = path;\n        this.writeTree_ = writeTree;\n    }\n    /**\n     * If possible, returns a complete event cache, using the underlying server data if possible. In addition, can be used\n     * to get a cache that includes hidden writes, and excludes arbitrary writes. Note that customizing the returned node\n     * can lead to a more expensive calculation.\n     *\n     * @param {?Node} completeServerCache\n     * @param {Array.<number>=} writeIdsToExclude Optional writes to exclude.\n     * @param {boolean=} includeHiddenWrites Defaults to false, whether or not to layer on writes with visible set to false\n     * @return {?Node}\n     */\n    WriteTreeRef.prototype.calcCompleteEventCache = function (completeServerCache, writeIdsToExclude, includeHiddenWrites) {\n        return this.writeTree_.calcCompleteEventCache(this.treePath_, completeServerCache, writeIdsToExclude, includeHiddenWrites);\n    };\n    /**\n     * If possible, returns a children node containing all of the complete children we have data for. The returned data is a\n     * mix of the given server data and write data.\n     *\n     * @param {?ChildrenNode} completeServerChildren\n     * @return {!ChildrenNode}\n     */\n    WriteTreeRef.prototype.calcCompleteEventChildren = function (completeServerChildren) {\n        return this.writeTree_.calcCompleteEventChildren(this.treePath_, completeServerChildren);\n    };\n    /**\n     * Given that either the underlying server data has updated or the outstanding writes have updated, determine what,\n     * if anything, needs to be applied to the event cache.\n     *\n     * Possibilities:\n     *\n     * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\n     *\n     * 2. Some write is completely shadowing. No events to be raised\n     *\n     * 3. Is partially shadowed. Events should be raised\n     *\n     * Either existingEventSnap or existingServerSnap must exist, this is validated via an assert\n     *\n     * @param {!Path} path\n     * @param {?Node} existingEventSnap\n     * @param {?Node} existingServerSnap\n     * @return {?Node}\n     */\n    WriteTreeRef.prototype.calcEventCacheAfterServerOverwrite = function (path, existingEventSnap, existingServerSnap) {\n        return this.writeTree_.calcEventCacheAfterServerOverwrite(this.treePath_, path, existingEventSnap, existingServerSnap);\n    };\n    /**\n     * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\n     * a higher path, this will return the child of that write relative to the write and this path.\n     * Returns null if there is no write at this path.\n     *\n     * @param {!Path} path\n     * @return {?Node}\n     */\n    WriteTreeRef.prototype.shadowingWrite = function (path) {\n        return this.writeTree_.shadowingWrite(this.treePath_.child(path));\n    };\n    /**\n     * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\n     * the window, but may now be in the window\n     *\n     * @param {?Node} completeServerData\n     * @param {!NamedNode} startPost\n     * @param {!number} count\n     * @param {boolean} reverse\n     * @param {!Index} index\n     * @return {!Array.<!NamedNode>}\n     */\n    WriteTreeRef.prototype.calcIndexedSlice = function (completeServerData, startPost, count, reverse, index) {\n        return this.writeTree_.calcIndexedSlice(this.treePath_, completeServerData, startPost, count, reverse, index);\n    };\n    /**\n     * Returns a complete child for a given server snap after applying all user writes or null if there is no\n     * complete child for this ChildKey.\n     *\n     * @param {!string} childKey\n     * @param {!CacheNode} existingServerCache\n     * @return {?Node}\n     */\n    WriteTreeRef.prototype.calcCompleteChild = function (childKey, existingServerCache) {\n        return this.writeTree_.calcCompleteChild(this.treePath_, childKey, existingServerCache);\n    };\n    /**\n     * Return a WriteTreeRef for a child.\n     *\n     * @param {string} childName\n     * @return {!WriteTreeRef}\n     */\n    WriteTreeRef.prototype.child = function (childName) {\n        return new WriteTreeRef(this.treePath_.child(childName), this.writeTree_);\n    };\n    return WriteTreeRef;\n}());\nexports.WriteTreeRef = WriteTreeRef;\n\n//# sourceMappingURL=WriteTree.js.map\n","map":{"mappings":[{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":247,"column":0},"generated":{"line":247,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":248,"column":0},"generated":{"line":248,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":249,"column":0},"generated":{"line":249,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":250,"column":0},"generated":{"line":250,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":251,"column":0},"generated":{"line":251,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":252,"column":0},"generated":{"line":252,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":253,"column":0},"generated":{"line":253,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":254,"column":0},"generated":{"line":254,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":255,"column":0},"generated":{"line":255,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":256,"column":0},"generated":{"line":256,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":257,"column":0},"generated":{"line":257,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":258,"column":0},"generated":{"line":258,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":259,"column":0},"generated":{"line":259,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":260,"column":0},"generated":{"line":260,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":261,"column":0},"generated":{"line":261,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":262,"column":0},"generated":{"line":262,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":263,"column":0},"generated":{"line":263,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":264,"column":0},"generated":{"line":264,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":265,"column":0},"generated":{"line":265,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":266,"column":0},"generated":{"line":266,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":267,"column":0},"generated":{"line":267,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":268,"column":0},"generated":{"line":268,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":269,"column":0},"generated":{"line":269,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":270,"column":0},"generated":{"line":270,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":271,"column":0},"generated":{"line":271,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":272,"column":0},"generated":{"line":272,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":273,"column":0},"generated":{"line":273,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":274,"column":0},"generated":{"line":274,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":275,"column":0},"generated":{"line":275,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":276,"column":0},"generated":{"line":276,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":277,"column":0},"generated":{"line":277,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":278,"column":0},"generated":{"line":278,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":279,"column":0},"generated":{"line":279,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":280,"column":0},"generated":{"line":280,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":281,"column":0},"generated":{"line":281,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":282,"column":0},"generated":{"line":282,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":283,"column":0},"generated":{"line":283,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":284,"column":0},"generated":{"line":284,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":285,"column":0},"generated":{"line":285,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":286,"column":0},"generated":{"line":286,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":287,"column":0},"generated":{"line":287,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":288,"column":0},"generated":{"line":288,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":289,"column":0},"generated":{"line":289,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":290,"column":0},"generated":{"line":290,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":291,"column":0},"generated":{"line":291,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":292,"column":0},"generated":{"line":292,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":293,"column":0},"generated":{"line":293,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":294,"column":0},"generated":{"line":294,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":295,"column":0},"generated":{"line":295,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":296,"column":0},"generated":{"line":296,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":297,"column":0},"generated":{"line":297,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":298,"column":0},"generated":{"line":298,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":299,"column":0},"generated":{"line":299,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":300,"column":0},"generated":{"line":300,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":301,"column":0},"generated":{"line":301,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":302,"column":0},"generated":{"line":302,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":303,"column":0},"generated":{"line":303,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":304,"column":0},"generated":{"line":304,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":305,"column":0},"generated":{"line":305,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":306,"column":0},"generated":{"line":306,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":307,"column":0},"generated":{"line":307,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":308,"column":0},"generated":{"line":308,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":309,"column":0},"generated":{"line":309,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":310,"column":0},"generated":{"line":310,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":311,"column":0},"generated":{"line":311,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":312,"column":0},"generated":{"line":312,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":313,"column":0},"generated":{"line":313,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":314,"column":0},"generated":{"line":314,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":315,"column":0},"generated":{"line":315,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":316,"column":0},"generated":{"line":316,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":317,"column":0},"generated":{"line":317,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":318,"column":0},"generated":{"line":318,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":319,"column":0},"generated":{"line":319,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":320,"column":0},"generated":{"line":320,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":321,"column":0},"generated":{"line":321,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":322,"column":0},"generated":{"line":322,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":323,"column":0},"generated":{"line":323,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":324,"column":0},"generated":{"line":324,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":325,"column":0},"generated":{"line":325,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":326,"column":0},"generated":{"line":326,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":327,"column":0},"generated":{"line":327,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":328,"column":0},"generated":{"line":328,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":329,"column":0},"generated":{"line":329,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":330,"column":0},"generated":{"line":330,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":331,"column":0},"generated":{"line":331,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":332,"column":0},"generated":{"line":332,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":333,"column":0},"generated":{"line":333,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":334,"column":0},"generated":{"line":334,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":335,"column":0},"generated":{"line":335,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":336,"column":0},"generated":{"line":336,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":337,"column":0},"generated":{"line":337,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":338,"column":0},"generated":{"line":338,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":339,"column":0},"generated":{"line":339,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":340,"column":0},"generated":{"line":340,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":341,"column":0},"generated":{"line":341,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":342,"column":0},"generated":{"line":342,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":343,"column":0},"generated":{"line":343,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":344,"column":0},"generated":{"line":344,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":345,"column":0},"generated":{"line":345,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":346,"column":0},"generated":{"line":346,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":347,"column":0},"generated":{"line":347,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":348,"column":0},"generated":{"line":348,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":349,"column":0},"generated":{"line":349,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":350,"column":0},"generated":{"line":350,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":351,"column":0},"generated":{"line":351,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":352,"column":0},"generated":{"line":352,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":353,"column":0},"generated":{"line":353,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":354,"column":0},"generated":{"line":354,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":355,"column":0},"generated":{"line":355,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":356,"column":0},"generated":{"line":356,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":357,"column":0},"generated":{"line":357,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":358,"column":0},"generated":{"line":358,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":359,"column":0},"generated":{"line":359,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":360,"column":0},"generated":{"line":360,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":361,"column":0},"generated":{"line":361,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":362,"column":0},"generated":{"line":362,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":363,"column":0},"generated":{"line":363,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":364,"column":0},"generated":{"line":364,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":365,"column":0},"generated":{"line":365,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":366,"column":0},"generated":{"line":366,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":367,"column":0},"generated":{"line":367,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":368,"column":0},"generated":{"line":368,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":369,"column":0},"generated":{"line":369,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":370,"column":0},"generated":{"line":370,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":371,"column":0},"generated":{"line":371,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":372,"column":0},"generated":{"line":372,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":373,"column":0},"generated":{"line":373,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":374,"column":0},"generated":{"line":374,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":375,"column":0},"generated":{"line":375,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":376,"column":0},"generated":{"line":376,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":377,"column":0},"generated":{"line":377,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":378,"column":0},"generated":{"line":378,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":379,"column":0},"generated":{"line":379,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":380,"column":0},"generated":{"line":380,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":381,"column":0},"generated":{"line":381,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":382,"column":0},"generated":{"line":382,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":383,"column":0},"generated":{"line":383,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":384,"column":0},"generated":{"line":384,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":385,"column":0},"generated":{"line":385,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":386,"column":0},"generated":{"line":386,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":387,"column":0},"generated":{"line":387,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":388,"column":0},"generated":{"line":388,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":389,"column":0},"generated":{"line":389,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":390,"column":0},"generated":{"line":390,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":391,"column":0},"generated":{"line":391,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":392,"column":0},"generated":{"line":392,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":393,"column":0},"generated":{"line":393,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":394,"column":0},"generated":{"line":394,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":395,"column":0},"generated":{"line":395,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":396,"column":0},"generated":{"line":396,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":397,"column":0},"generated":{"line":397,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":398,"column":0},"generated":{"line":398,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":399,"column":0},"generated":{"line":399,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":400,"column":0},"generated":{"line":400,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":401,"column":0},"generated":{"line":401,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":402,"column":0},"generated":{"line":402,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":403,"column":0},"generated":{"line":403,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":404,"column":0},"generated":{"line":404,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":405,"column":0},"generated":{"line":405,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":406,"column":0},"generated":{"line":406,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":407,"column":0},"generated":{"line":407,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":408,"column":0},"generated":{"line":408,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":409,"column":0},"generated":{"line":409,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":410,"column":0},"generated":{"line":410,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":411,"column":0},"generated":{"line":411,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":412,"column":0},"generated":{"line":412,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":413,"column":0},"generated":{"line":413,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":414,"column":0},"generated":{"line":414,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":415,"column":0},"generated":{"line":415,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":416,"column":0},"generated":{"line":416,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":417,"column":0},"generated":{"line":417,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":418,"column":0},"generated":{"line":418,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":419,"column":0},"generated":{"line":419,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":420,"column":0},"generated":{"line":420,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":421,"column":0},"generated":{"line":421,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":422,"column":0},"generated":{"line":422,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":423,"column":0},"generated":{"line":423,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":424,"column":0},"generated":{"line":424,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":425,"column":0},"generated":{"line":425,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":426,"column":0},"generated":{"line":426,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":427,"column":0},"generated":{"line":427,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":428,"column":0},"generated":{"line":428,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":429,"column":0},"generated":{"line":429,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":430,"column":0},"generated":{"line":430,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":431,"column":0},"generated":{"line":431,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":432,"column":0},"generated":{"line":432,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":433,"column":0},"generated":{"line":433,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":434,"column":0},"generated":{"line":434,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":435,"column":0},"generated":{"line":435,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":436,"column":0},"generated":{"line":436,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":437,"column":0},"generated":{"line":437,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":438,"column":0},"generated":{"line":438,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":439,"column":0},"generated":{"line":439,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":440,"column":0},"generated":{"line":440,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":441,"column":0},"generated":{"line":441,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":442,"column":0},"generated":{"line":442,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":443,"column":0},"generated":{"line":443,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":444,"column":0},"generated":{"line":444,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":445,"column":0},"generated":{"line":445,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":446,"column":0},"generated":{"line":446,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":447,"column":0},"generated":{"line":447,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":448,"column":0},"generated":{"line":448,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":449,"column":0},"generated":{"line":449,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":450,"column":0},"generated":{"line":450,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":451,"column":0},"generated":{"line":451,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":452,"column":0},"generated":{"line":452,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":453,"column":0},"generated":{"line":453,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":454,"column":0},"generated":{"line":454,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":455,"column":0},"generated":{"line":455,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":456,"column":0},"generated":{"line":456,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":457,"column":0},"generated":{"line":457,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":458,"column":0},"generated":{"line":458,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":459,"column":0},"generated":{"line":459,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":460,"column":0},"generated":{"line":460,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":461,"column":0},"generated":{"line":461,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":462,"column":0},"generated":{"line":462,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":463,"column":0},"generated":{"line":463,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":464,"column":0},"generated":{"line":464,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":465,"column":0},"generated":{"line":465,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":466,"column":0},"generated":{"line":466,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":467,"column":0},"generated":{"line":467,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":468,"column":0},"generated":{"line":468,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":469,"column":0},"generated":{"line":469,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":470,"column":0},"generated":{"line":470,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":471,"column":0},"generated":{"line":471,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":472,"column":0},"generated":{"line":472,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":473,"column":0},"generated":{"line":473,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":474,"column":0},"generated":{"line":474,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":475,"column":0},"generated":{"line":475,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":476,"column":0},"generated":{"line":476,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":477,"column":0},"generated":{"line":477,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":478,"column":0},"generated":{"line":478,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":479,"column":0},"generated":{"line":479,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":480,"column":0},"generated":{"line":480,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":481,"column":0},"generated":{"line":481,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":482,"column":0},"generated":{"line":482,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":483,"column":0},"generated":{"line":483,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":484,"column":0},"generated":{"line":484,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":485,"column":0},"generated":{"line":485,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":486,"column":0},"generated":{"line":486,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":487,"column":0},"generated":{"line":487,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":488,"column":0},"generated":{"line":488,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":489,"column":0},"generated":{"line":489,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":490,"column":0},"generated":{"line":490,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":491,"column":0},"generated":{"line":491,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":492,"column":0},"generated":{"line":492,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":493,"column":0},"generated":{"line":493,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":494,"column":0},"generated":{"line":494,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":495,"column":0},"generated":{"line":495,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":496,"column":0},"generated":{"line":496,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":497,"column":0},"generated":{"line":497,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":498,"column":0},"generated":{"line":498,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":499,"column":0},"generated":{"line":499,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":500,"column":0},"generated":{"line":500,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":501,"column":0},"generated":{"line":501,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":502,"column":0},"generated":{"line":502,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":503,"column":0},"generated":{"line":503,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":504,"column":0},"generated":{"line":504,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":505,"column":0},"generated":{"line":505,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":506,"column":0},"generated":{"line":506,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":507,"column":0},"generated":{"line":507,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":508,"column":0},"generated":{"line":508,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":509,"column":0},"generated":{"line":509,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":510,"column":0},"generated":{"line":510,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":511,"column":0},"generated":{"line":511,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":512,"column":0},"generated":{"line":512,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":513,"column":0},"generated":{"line":513,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":514,"column":0},"generated":{"line":514,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":515,"column":0},"generated":{"line":515,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":516,"column":0},"generated":{"line":516,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":517,"column":0},"generated":{"line":517,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":518,"column":0},"generated":{"line":518,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":519,"column":0},"generated":{"line":519,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":520,"column":0},"generated":{"line":520,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":521,"column":0},"generated":{"line":521,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":522,"column":0},"generated":{"line":522,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":523,"column":0},"generated":{"line":523,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":524,"column":0},"generated":{"line":524,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":525,"column":0},"generated":{"line":525,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":526,"column":0},"generated":{"line":526,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":527,"column":0},"generated":{"line":527,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":528,"column":0},"generated":{"line":528,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":529,"column":0},"generated":{"line":529,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":530,"column":0},"generated":{"line":530,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":531,"column":0},"generated":{"line":531,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":532,"column":0},"generated":{"line":532,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":533,"column":0},"generated":{"line":533,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":534,"column":0},"generated":{"line":534,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":535,"column":0},"generated":{"line":535,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":536,"column":0},"generated":{"line":536,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":537,"column":0},"generated":{"line":537,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":538,"column":0},"generated":{"line":538,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":539,"column":0},"generated":{"line":539,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":540,"column":0},"generated":{"line":540,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":541,"column":0},"generated":{"line":541,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":542,"column":0},"generated":{"line":542,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":543,"column":0},"generated":{"line":543,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":544,"column":0},"generated":{"line":544,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":545,"column":0},"generated":{"line":545,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":546,"column":0},"generated":{"line":546,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":547,"column":0},"generated":{"line":547,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":548,"column":0},"generated":{"line":548,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":549,"column":0},"generated":{"line":549,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":550,"column":0},"generated":{"line":550,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":551,"column":0},"generated":{"line":551,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":552,"column":0},"generated":{"line":552,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":553,"column":0},"generated":{"line":553,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":554,"column":0},"generated":{"line":554,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":555,"column":0},"generated":{"line":555,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":556,"column":0},"generated":{"line":556,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":557,"column":0},"generated":{"line":557,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":558,"column":0},"generated":{"line":558,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":559,"column":0},"generated":{"line":559,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":560,"column":0},"generated":{"line":560,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":561,"column":0},"generated":{"line":561,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":562,"column":0},"generated":{"line":562,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":563,"column":0},"generated":{"line":563,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":564,"column":0},"generated":{"line":564,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":565,"column":0},"generated":{"line":565,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":566,"column":0},"generated":{"line":566,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":567,"column":0},"generated":{"line":567,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":568,"column":0},"generated":{"line":568,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":569,"column":0},"generated":{"line":569,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":570,"column":0},"generated":{"line":570,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":571,"column":0},"generated":{"line":571,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":572,"column":0},"generated":{"line":572,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":573,"column":0},"generated":{"line":573,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":574,"column":0},"generated":{"line":574,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":575,"column":0},"generated":{"line":575,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":576,"column":0},"generated":{"line":576,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":577,"column":0},"generated":{"line":577,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":578,"column":0},"generated":{"line":578,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":579,"column":0},"generated":{"line":579,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":580,"column":0},"generated":{"line":580,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":581,"column":0},"generated":{"line":581,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":582,"column":0},"generated":{"line":582,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":583,"column":0},"generated":{"line":583,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":584,"column":0},"generated":{"line":584,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":585,"column":0},"generated":{"line":585,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":586,"column":0},"generated":{"line":586,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":587,"column":0},"generated":{"line":587,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":588,"column":0},"generated":{"line":588,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":589,"column":0},"generated":{"line":589,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":590,"column":0},"generated":{"line":590,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":591,"column":0},"generated":{"line":591,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":592,"column":0},"generated":{"line":592,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":593,"column":0},"generated":{"line":593,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":594,"column":0},"generated":{"line":594,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":595,"column":0},"generated":{"line":595,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":596,"column":0},"generated":{"line":596,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":597,"column":0},"generated":{"line":597,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":598,"column":0},"generated":{"line":598,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":599,"column":0},"generated":{"line":599,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":600,"column":0},"generated":{"line":600,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":601,"column":0},"generated":{"line":601,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":602,"column":0},"generated":{"line":602,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":603,"column":0},"generated":{"line":603,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":604,"column":0},"generated":{"line":604,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":605,"column":0},"generated":{"line":605,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":606,"column":0},"generated":{"line":606,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":607,"column":0},"generated":{"line":607,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":608,"column":0},"generated":{"line":608,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":609,"column":0},"generated":{"line":609,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":610,"column":0},"generated":{"line":610,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":611,"column":0},"generated":{"line":611,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":612,"column":0},"generated":{"line":612,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":613,"column":0},"generated":{"line":613,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":614,"column":0},"generated":{"line":614,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":615,"column":0},"generated":{"line":615,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":616,"column":0},"generated":{"line":616,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":617,"column":0},"generated":{"line":617,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":618,"column":0},"generated":{"line":618,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":619,"column":0},"generated":{"line":619,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":620,"column":0},"generated":{"line":620,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":621,"column":0},"generated":{"line":621,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":622,"column":0},"generated":{"line":622,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":623,"column":0},"generated":{"line":623,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":624,"column":0},"generated":{"line":624,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":625,"column":0},"generated":{"line":625,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":626,"column":0},"generated":{"line":626,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":627,"column":0},"generated":{"line":627,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":628,"column":0},"generated":{"line":628,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":629,"column":0},"generated":{"line":629,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":630,"column":0},"generated":{"line":630,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":631,"column":0},"generated":{"line":631,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":632,"column":0},"generated":{"line":632,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":633,"column":0},"generated":{"line":633,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js","original":{"line":634,"column":0},"generated":{"line":634,"column":0}}],"sources":{"node_modules/@firebase/database/dist/cjs/src/core/WriteTree.js":"\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar util_1 = require(\"@firebase/util\");\nvar util_2 = require(\"@firebase/util\");\nvar Path_1 = require(\"./util/Path\");\nvar CompoundWrite_1 = require(\"./CompoundWrite\");\nvar PriorityIndex_1 = require(\"./snap/indexes/PriorityIndex\");\nvar ChildrenNode_1 = require(\"./snap/ChildrenNode\");\n/**\n * WriteTree tracks all pending user-initiated writes and has methods to calculate the result of merging them\n * with underlying server data (to create \"event cache\" data).  Pending writes are added with addOverwrite()\n * and addMerge(), and removed with removeWrite().\n *\n * @constructor\n */\nvar WriteTree = /** @class */ (function () {\n    function WriteTree() {\n        /**\n         * A tree tracking the result of applying all visible writes.  This does not include transactions with\n         * applyLocally=false or writes that are completely shadowed by other writes.\n         *\n         * @type {!CompoundWrite}\n         * @private\n         */\n        this.visibleWrites_ = CompoundWrite_1.CompoundWrite.Empty;\n        /**\n         * A list of all pending writes, regardless of visibility and shadowed-ness.  Used to calculate arbitrary\n         * sets of the changed data, such as hidden writes (from transactions) or changes with certain writes excluded (also\n         * used by transactions).\n         *\n         * @type {!Array.<!WriteRecord>}\n         * @private\n         */\n        this.allWrites_ = [];\n        this.lastWriteId_ = -1;\n    }\n    /**\n     * Create a new WriteTreeRef for the given path. For use with a new sync point at the given path.\n     *\n     * @param {!Path} path\n     * @return {!WriteTreeRef}\n     */\n    WriteTree.prototype.childWrites = function (path) {\n        return new WriteTreeRef(path, this);\n    };\n    /**\n     * Record a new overwrite from user code.\n     *\n     * @param {!Path} path\n     * @param {!Node} snap\n     * @param {!number} writeId\n     * @param {boolean=} visible This is set to false by some transactions. It should be excluded from event caches\n     */\n    WriteTree.prototype.addOverwrite = function (path, snap, writeId, visible) {\n        util_2.assert(writeId > this.lastWriteId_, 'Stacking an older write on top of newer ones');\n        if (visible === undefined) {\n            visible = true;\n        }\n        this.allWrites_.push({\n            path: path,\n            snap: snap,\n            writeId: writeId,\n            visible: visible\n        });\n        if (visible) {\n            this.visibleWrites_ = this.visibleWrites_.addWrite(path, snap);\n        }\n        this.lastWriteId_ = writeId;\n    };\n    /**\n     * Record a new merge from user code.\n     *\n     * @param {!Path} path\n     * @param {!Object.<string, !Node>} changedChildren\n     * @param {!number} writeId\n     */\n    WriteTree.prototype.addMerge = function (path, changedChildren, writeId) {\n        util_2.assert(writeId > this.lastWriteId_, 'Stacking an older merge on top of newer ones');\n        this.allWrites_.push({\n            path: path,\n            children: changedChildren,\n            writeId: writeId,\n            visible: true\n        });\n        this.visibleWrites_ = this.visibleWrites_.addWrites(path, changedChildren);\n        this.lastWriteId_ = writeId;\n    };\n    /**\n     * @param {!number} writeId\n     * @return {?WriteRecord}\n     */\n    WriteTree.prototype.getWrite = function (writeId) {\n        for (var i = 0; i < this.allWrites_.length; i++) {\n            var record = this.allWrites_[i];\n            if (record.writeId === writeId) {\n                return record;\n            }\n        }\n        return null;\n    };\n    /**\n     * Remove a write (either an overwrite or merge) that has been successfully acknowledge by the server. Recalculates\n     * the tree if necessary.  We return true if it may have been visible, meaning views need to reevaluate.\n     *\n     * @param {!number} writeId\n     * @return {boolean} true if the write may have been visible (meaning we'll need to reevaluate / raise\n     * events as a result).\n     */\n    WriteTree.prototype.removeWrite = function (writeId) {\n        // Note: disabling this check. It could be a transaction that preempted another transaction, and thus was applied\n        // out of order.\n        //const validClear = revert || this.allWrites_.length === 0 || writeId <= this.allWrites_[0].writeId;\n        //assert(validClear, \"Either we don't have this write, or it's the first one in the queue\");\n        var _this = this;\n        var idx = this.allWrites_.findIndex(function (s) {\n            return s.writeId === writeId;\n        });\n        util_2.assert(idx >= 0, 'removeWrite called with nonexistent writeId.');\n        var writeToRemove = this.allWrites_[idx];\n        this.allWrites_.splice(idx, 1);\n        var removedWriteWasVisible = writeToRemove.visible;\n        var removedWriteOverlapsWithOtherWrites = false;\n        var i = this.allWrites_.length - 1;\n        while (removedWriteWasVisible && i >= 0) {\n            var currentWrite = this.allWrites_[i];\n            if (currentWrite.visible) {\n                if (i >= idx &&\n                    this.recordContainsPath_(currentWrite, writeToRemove.path)) {\n                    // The removed write was completely shadowed by a subsequent write.\n                    removedWriteWasVisible = false;\n                }\n                else if (writeToRemove.path.contains(currentWrite.path)) {\n                    // Either we're covering some writes or they're covering part of us (depending on which came first).\n                    removedWriteOverlapsWithOtherWrites = true;\n                }\n            }\n            i--;\n        }\n        if (!removedWriteWasVisible) {\n            return false;\n        }\n        else if (removedWriteOverlapsWithOtherWrites) {\n            // There's some shadowing going on. Just rebuild the visible writes from scratch.\n            this.resetTree_();\n            return true;\n        }\n        else {\n            // There's no shadowing.  We can safely just remove the write(s) from visibleWrites.\n            if (writeToRemove.snap) {\n                this.visibleWrites_ = this.visibleWrites_.removeWrite(writeToRemove.path);\n            }\n            else {\n                var children = writeToRemove.children;\n                util_1.forEach(children, function (childName) {\n                    _this.visibleWrites_ = _this.visibleWrites_.removeWrite(writeToRemove.path.child(childName));\n                });\n            }\n            return true;\n        }\n    };\n    /**\n     * Return a complete snapshot for the given path if there's visible write data at that path, else null.\n     * No server data is considered.\n     *\n     * @param {!Path} path\n     * @return {?Node}\n     */\n    WriteTree.prototype.getCompleteWriteData = function (path) {\n        return this.visibleWrites_.getCompleteNode(path);\n    };\n    /**\n     * Given optional, underlying server data, and an optional set of constraints (exclude some sets, include hidden\n     * writes), attempt to calculate a complete snapshot for the given path\n     *\n     * @param {!Path} treePath\n     * @param {?Node} completeServerCache\n     * @param {Array.<number>=} writeIdsToExclude An optional set to be excluded\n     * @param {boolean=} includeHiddenWrites Defaults to false, whether or not to layer on writes with visible set to false\n     * @return {?Node}\n     */\n    WriteTree.prototype.calcCompleteEventCache = function (treePath, completeServerCache, writeIdsToExclude, includeHiddenWrites) {\n        if (!writeIdsToExclude && !includeHiddenWrites) {\n            var shadowingNode = this.visibleWrites_.getCompleteNode(treePath);\n            if (shadowingNode != null) {\n                return shadowingNode;\n            }\n            else {\n                var subMerge = this.visibleWrites_.childCompoundWrite(treePath);\n                if (subMerge.isEmpty()) {\n                    return completeServerCache;\n                }\n                else if (completeServerCache == null &&\n                    !subMerge.hasCompleteWrite(Path_1.Path.Empty)) {\n                    // We wouldn't have a complete snapshot, since there's no underlying data and no complete shadow\n                    return null;\n                }\n                else {\n                    var layeredCache = completeServerCache || ChildrenNode_1.ChildrenNode.EMPTY_NODE;\n                    return subMerge.apply(layeredCache);\n                }\n            }\n        }\n        else {\n            var merge = this.visibleWrites_.childCompoundWrite(treePath);\n            if (!includeHiddenWrites && merge.isEmpty()) {\n                return completeServerCache;\n            }\n            else {\n                // If the server cache is null, and we don't have a complete cache, we need to return null\n                if (!includeHiddenWrites &&\n                    completeServerCache == null &&\n                    !merge.hasCompleteWrite(Path_1.Path.Empty)) {\n                    return null;\n                }\n                else {\n                    var filter = function (write) {\n                        return ((write.visible || includeHiddenWrites) &&\n                            (!writeIdsToExclude ||\n                                !~writeIdsToExclude.indexOf(write.writeId)) &&\n                            (write.path.contains(treePath) || treePath.contains(write.path)));\n                    };\n                    var mergeAtPath = WriteTree.layerTree_(this.allWrites_, filter, treePath);\n                    var layeredCache = completeServerCache || ChildrenNode_1.ChildrenNode.EMPTY_NODE;\n                    return mergeAtPath.apply(layeredCache);\n                }\n            }\n        }\n    };\n    /**\n     * With optional, underlying server data, attempt to return a children node of children that we have complete data for.\n     * Used when creating new views, to pre-fill their complete event children snapshot.\n     *\n     * @param {!Path} treePath\n     * @param {?ChildrenNode} completeServerChildren\n     * @return {!ChildrenNode}\n     */\n    WriteTree.prototype.calcCompleteEventChildren = function (treePath, completeServerChildren) {\n        var completeChildren = ChildrenNode_1.ChildrenNode.EMPTY_NODE;\n        var topLevelSet = this.visibleWrites_.getCompleteNode(treePath);\n        if (topLevelSet) {\n            if (!topLevelSet.isLeafNode()) {\n                // we're shadowing everything. Return the children.\n                topLevelSet.forEachChild(PriorityIndex_1.PRIORITY_INDEX, function (childName, childSnap) {\n                    completeChildren = completeChildren.updateImmediateChild(childName, childSnap);\n                });\n            }\n            return completeChildren;\n        }\n        else if (completeServerChildren) {\n            // Layer any children we have on top of this\n            // We know we don't have a top-level set, so just enumerate existing children\n            var merge_1 = this.visibleWrites_.childCompoundWrite(treePath);\n            completeServerChildren.forEachChild(PriorityIndex_1.PRIORITY_INDEX, function (childName, childNode) {\n                var node = merge_1\n                    .childCompoundWrite(new Path_1.Path(childName))\n                    .apply(childNode);\n                completeChildren = completeChildren.updateImmediateChild(childName, node);\n            });\n            // Add any complete children we have from the set\n            merge_1.getCompleteChildren().forEach(function (namedNode) {\n                completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);\n            });\n            return completeChildren;\n        }\n        else {\n            // We don't have anything to layer on top of. Layer on any children we have\n            // Note that we can return an empty snap if we have a defined delete\n            var merge = this.visibleWrites_.childCompoundWrite(treePath);\n            merge.getCompleteChildren().forEach(function (namedNode) {\n                completeChildren = completeChildren.updateImmediateChild(namedNode.name, namedNode.node);\n            });\n            return completeChildren;\n        }\n    };\n    /**\n     * Given that the underlying server data has updated, determine what, if anything, needs to be\n     * applied to the event cache.\n     *\n     * Possibilities:\n     *\n     * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\n     *\n     * 2. Some write is completely shadowing. No events to be raised\n     *\n     * 3. Is partially shadowed. Events\n     *\n     * Either existingEventSnap or existingServerSnap must exist\n     *\n     * @param {!Path} treePath\n     * @param {!Path} childPath\n     * @param {?Node} existingEventSnap\n     * @param {?Node} existingServerSnap\n     * @return {?Node}\n     */\n    WriteTree.prototype.calcEventCacheAfterServerOverwrite = function (treePath, childPath, existingEventSnap, existingServerSnap) {\n        util_2.assert(existingEventSnap || existingServerSnap, 'Either existingEventSnap or existingServerSnap must exist');\n        var path = treePath.child(childPath);\n        if (this.visibleWrites_.hasCompleteWrite(path)) {\n            // At this point we can probably guarantee that we're in case 2, meaning no events\n            // May need to check visibility while doing the findRootMostValueAndPath call\n            return null;\n        }\n        else {\n            // No complete shadowing. We're either partially shadowing or not shadowing at all.\n            var childMerge = this.visibleWrites_.childCompoundWrite(path);\n            if (childMerge.isEmpty()) {\n                // We're not shadowing at all. Case 1\n                return existingServerSnap.getChild(childPath);\n            }\n            else {\n                // This could be more efficient if the serverNode + updates doesn't change the eventSnap\n                // However this is tricky to find out, since user updates don't necessary change the server\n                // snap, e.g. priority updates on empty nodes, or deep deletes. Another special case is if the server\n                // adds nodes, but doesn't change any existing writes. It is therefore not enough to\n                // only check if the updates change the serverNode.\n                // Maybe check if the merge tree contains these special cases and only do a full overwrite in that case?\n                return childMerge.apply(existingServerSnap.getChild(childPath));\n            }\n        }\n    };\n    /**\n     * Returns a complete child for a given server snap after applying all user writes or null if there is no\n     * complete child for this ChildKey.\n     *\n     * @param {!Path} treePath\n     * @param {!string} childKey\n     * @param {!CacheNode} existingServerSnap\n     * @return {?Node}\n     */\n    WriteTree.prototype.calcCompleteChild = function (treePath, childKey, existingServerSnap) {\n        var path = treePath.child(childKey);\n        var shadowingNode = this.visibleWrites_.getCompleteNode(path);\n        if (shadowingNode != null) {\n            return shadowingNode;\n        }\n        else {\n            if (existingServerSnap.isCompleteForChild(childKey)) {\n                var childMerge = this.visibleWrites_.childCompoundWrite(path);\n                return childMerge.apply(existingServerSnap.getNode().getImmediateChild(childKey));\n            }\n            else {\n                return null;\n            }\n        }\n    };\n    /**\n     * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\n     * a higher path, this will return the child of that write relative to the write and this path.\n     * Returns null if there is no write at this path.\n     *\n     * @param {!Path} path\n     * @return {?Node}\n     */\n    WriteTree.prototype.shadowingWrite = function (path) {\n        return this.visibleWrites_.getCompleteNode(path);\n    };\n    /**\n     * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\n     * the window, but may now be in the window.\n     *\n     * @param {!Path} treePath\n     * @param {?Node} completeServerData\n     * @param {!NamedNode} startPost\n     * @param {!number} count\n     * @param {boolean} reverse\n     * @param {!Index} index\n     * @return {!Array.<!NamedNode>}\n     */\n    WriteTree.prototype.calcIndexedSlice = function (treePath, completeServerData, startPost, count, reverse, index) {\n        var toIterate;\n        var merge = this.visibleWrites_.childCompoundWrite(treePath);\n        var shadowingNode = merge.getCompleteNode(Path_1.Path.Empty);\n        if (shadowingNode != null) {\n            toIterate = shadowingNode;\n        }\n        else if (completeServerData != null) {\n            toIterate = merge.apply(completeServerData);\n        }\n        else {\n            // no children to iterate on\n            return [];\n        }\n        toIterate = toIterate.withIndex(index);\n        if (!toIterate.isEmpty() && !toIterate.isLeafNode()) {\n            var nodes = [];\n            var cmp = index.getCompare();\n            var iter = reverse\n                ? toIterate.getReverseIteratorFrom(startPost, index)\n                : toIterate.getIteratorFrom(startPost, index);\n            var next = iter.getNext();\n            while (next && nodes.length < count) {\n                if (cmp(next, startPost) !== 0) {\n                    nodes.push(next);\n                }\n                next = iter.getNext();\n            }\n            return nodes;\n        }\n        else {\n            return [];\n        }\n    };\n    /**\n     * @param {!WriteRecord} writeRecord\n     * @param {!Path} path\n     * @return {boolean}\n     * @private\n     */\n    WriteTree.prototype.recordContainsPath_ = function (writeRecord, path) {\n        if (writeRecord.snap) {\n            return writeRecord.path.contains(path);\n        }\n        else {\n            // findKey can return undefined, so use !! to coerce to boolean\n            return !!util_1.findKey(writeRecord.children, function (childSnap, childName) {\n                return writeRecord.path.child(childName).contains(path);\n            });\n        }\n    };\n    /**\n     * Re-layer the writes and merges into a tree so we can efficiently calculate event snapshots\n     * @private\n     */\n    WriteTree.prototype.resetTree_ = function () {\n        this.visibleWrites_ = WriteTree.layerTree_(this.allWrites_, WriteTree.DefaultFilter_, Path_1.Path.Empty);\n        if (this.allWrites_.length > 0) {\n            this.lastWriteId_ = this.allWrites_[this.allWrites_.length - 1].writeId;\n        }\n        else {\n            this.lastWriteId_ = -1;\n        }\n    };\n    /**\n     * The default filter used when constructing the tree. Keep everything that's visible.\n     *\n     * @param {!WriteRecord} write\n     * @return {boolean}\n     * @private\n     */\n    WriteTree.DefaultFilter_ = function (write) {\n        return write.visible;\n    };\n    /**\n     * Static method. Given an array of WriteRecords, a filter for which ones to include, and a path, construct the tree of\n     * event data at that path.\n     *\n     * @param {!Array.<!WriteRecord>} writes\n     * @param {!function(!WriteRecord):boolean} filter\n     * @param {!Path} treeRoot\n     * @return {!CompoundWrite}\n     * @private\n     */\n    WriteTree.layerTree_ = function (writes, filter, treeRoot) {\n        var compoundWrite = CompoundWrite_1.CompoundWrite.Empty;\n        for (var i = 0; i < writes.length; ++i) {\n            var write = writes[i];\n            // Theory, a later set will either:\n            // a) abort a relevant transaction, so no need to worry about excluding it from calculating that transaction\n            // b) not be relevant to a transaction (separate branch), so again will not affect the data for that transaction\n            if (filter(write)) {\n                var writePath = write.path;\n                var relativePath = void 0;\n                if (write.snap) {\n                    if (treeRoot.contains(writePath)) {\n                        relativePath = Path_1.Path.relativePath(treeRoot, writePath);\n                        compoundWrite = compoundWrite.addWrite(relativePath, write.snap);\n                    }\n                    else if (writePath.contains(treeRoot)) {\n                        relativePath = Path_1.Path.relativePath(writePath, treeRoot);\n                        compoundWrite = compoundWrite.addWrite(Path_1.Path.Empty, write.snap.getChild(relativePath));\n                    }\n                    else {\n                        // There is no overlap between root path and write path, ignore write\n                    }\n                }\n                else if (write.children) {\n                    if (treeRoot.contains(writePath)) {\n                        relativePath = Path_1.Path.relativePath(treeRoot, writePath);\n                        compoundWrite = compoundWrite.addWrites(relativePath, write.children);\n                    }\n                    else if (writePath.contains(treeRoot)) {\n                        relativePath = Path_1.Path.relativePath(writePath, treeRoot);\n                        if (relativePath.isEmpty()) {\n                            compoundWrite = compoundWrite.addWrites(Path_1.Path.Empty, write.children);\n                        }\n                        else {\n                            var child = util_1.safeGet(write.children, relativePath.getFront());\n                            if (child) {\n                                // There exists a child in this node that matches the root path\n                                var deepNode = child.getChild(relativePath.popFront());\n                                compoundWrite = compoundWrite.addWrite(Path_1.Path.Empty, deepNode);\n                            }\n                        }\n                    }\n                    else {\n                        // There is no overlap between root path and write path, ignore write\n                    }\n                }\n                else {\n                    throw util_2.assertionError('WriteRecord should have .snap or .children');\n                }\n            }\n        }\n        return compoundWrite;\n    };\n    return WriteTree;\n}());\nexports.WriteTree = WriteTree;\n/**\n * A WriteTreeRef wraps a WriteTree and a path, for convenient access to a particular subtree.  All of the methods\n * just proxy to the underlying WriteTree.\n *\n * @constructor\n */\nvar WriteTreeRef = /** @class */ (function () {\n    /**\n     * @param {!Path} path\n     * @param {!WriteTree} writeTree\n     */\n    function WriteTreeRef(path, writeTree) {\n        this.treePath_ = path;\n        this.writeTree_ = writeTree;\n    }\n    /**\n     * If possible, returns a complete event cache, using the underlying server data if possible. In addition, can be used\n     * to get a cache that includes hidden writes, and excludes arbitrary writes. Note that customizing the returned node\n     * can lead to a more expensive calculation.\n     *\n     * @param {?Node} completeServerCache\n     * @param {Array.<number>=} writeIdsToExclude Optional writes to exclude.\n     * @param {boolean=} includeHiddenWrites Defaults to false, whether or not to layer on writes with visible set to false\n     * @return {?Node}\n     */\n    WriteTreeRef.prototype.calcCompleteEventCache = function (completeServerCache, writeIdsToExclude, includeHiddenWrites) {\n        return this.writeTree_.calcCompleteEventCache(this.treePath_, completeServerCache, writeIdsToExclude, includeHiddenWrites);\n    };\n    /**\n     * If possible, returns a children node containing all of the complete children we have data for. The returned data is a\n     * mix of the given server data and write data.\n     *\n     * @param {?ChildrenNode} completeServerChildren\n     * @return {!ChildrenNode}\n     */\n    WriteTreeRef.prototype.calcCompleteEventChildren = function (completeServerChildren) {\n        return this.writeTree_.calcCompleteEventChildren(this.treePath_, completeServerChildren);\n    };\n    /**\n     * Given that either the underlying server data has updated or the outstanding writes have updated, determine what,\n     * if anything, needs to be applied to the event cache.\n     *\n     * Possibilities:\n     *\n     * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\n     *\n     * 2. Some write is completely shadowing. No events to be raised\n     *\n     * 3. Is partially shadowed. Events should be raised\n     *\n     * Either existingEventSnap or existingServerSnap must exist, this is validated via an assert\n     *\n     * @param {!Path} path\n     * @param {?Node} existingEventSnap\n     * @param {?Node} existingServerSnap\n     * @return {?Node}\n     */\n    WriteTreeRef.prototype.calcEventCacheAfterServerOverwrite = function (path, existingEventSnap, existingServerSnap) {\n        return this.writeTree_.calcEventCacheAfterServerOverwrite(this.treePath_, path, existingEventSnap, existingServerSnap);\n    };\n    /**\n     * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\n     * a higher path, this will return the child of that write relative to the write and this path.\n     * Returns null if there is no write at this path.\n     *\n     * @param {!Path} path\n     * @return {?Node}\n     */\n    WriteTreeRef.prototype.shadowingWrite = function (path) {\n        return this.writeTree_.shadowingWrite(this.treePath_.child(path));\n    };\n    /**\n     * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\n     * the window, but may now be in the window\n     *\n     * @param {?Node} completeServerData\n     * @param {!NamedNode} startPost\n     * @param {!number} count\n     * @param {boolean} reverse\n     * @param {!Index} index\n     * @return {!Array.<!NamedNode>}\n     */\n    WriteTreeRef.prototype.calcIndexedSlice = function (completeServerData, startPost, count, reverse, index) {\n        return this.writeTree_.calcIndexedSlice(this.treePath_, completeServerData, startPost, count, reverse, index);\n    };\n    /**\n     * Returns a complete child for a given server snap after applying all user writes or null if there is no\n     * complete child for this ChildKey.\n     *\n     * @param {!string} childKey\n     * @param {!CacheNode} existingServerCache\n     * @return {?Node}\n     */\n    WriteTreeRef.prototype.calcCompleteChild = function (childKey, existingServerCache) {\n        return this.writeTree_.calcCompleteChild(this.treePath_, childKey, existingServerCache);\n    };\n    /**\n     * Return a WriteTreeRef for a child.\n     *\n     * @param {string} childName\n     * @return {!WriteTreeRef}\n     */\n    WriteTreeRef.prototype.child = function (childName) {\n        return new WriteTreeRef(this.treePath_.child(childName), this.writeTree_);\n    };\n    return WriteTreeRef;\n}());\nexports.WriteTreeRef = WriteTreeRef;\n\n//# sourceMappingURL=WriteTree.js.map\n"},"lineCount":634}},"hash":"057fc4ed5b2f8d4e7d100d36c985eb17","cacheData":{"env":{}}}