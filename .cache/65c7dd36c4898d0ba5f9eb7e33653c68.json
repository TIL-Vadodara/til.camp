{"dependencies":[{"name":"/Volumes/Work/forks/til.camp/package.json","includedInParent":true,"mtime":1524300285000},{"name":"/Volumes/Work/forks/til.camp/.browserslistrc","includedInParent":true,"mtime":1524300285000},{"name":"/Volumes/Work/forks/til.camp/node_modules/@firebase/database/package.json","includedInParent":true,"mtime":1519337717000},{"name":"@firebase/util","loc":{"line":27,"column":21}},{"name":"../api/Reference","loc":{"line":19,"column":26}},{"name":"../api/DataSnapshot","loc":{"line":20,"column":29}},{"name":"./util/Path","loc":{"line":21,"column":21}},{"name":"./util/Tree","loc":{"line":22,"column":21}},{"name":"./snap/indexes/PriorityIndex","loc":{"line":23,"column":30}},{"name":"./util/util","loc":{"line":24,"column":21}},{"name":"./util/ServerValues","loc":{"line":25,"column":29}},{"name":"./util/validation","loc":{"line":26,"column":27}},{"name":"./snap/nodeFromJSON","loc":{"line":28,"column":29}},{"name":"./snap/ChildrenNode","loc":{"line":29,"column":29}},{"name":"./Repo","loc":{"line":30,"column":21}}],"generated":{"js":"\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar util_1 = require(\"@firebase/util\");\nvar Reference_1 = require(\"../api/Reference\");\nvar DataSnapshot_1 = require(\"../api/DataSnapshot\");\nvar Path_1 = require(\"./util/Path\");\nvar Tree_1 = require(\"./util/Tree\");\nvar PriorityIndex_1 = require(\"./snap/indexes/PriorityIndex\");\nvar util_2 = require(\"./util/util\");\nvar ServerValues_1 = require(\"./util/ServerValues\");\nvar validation_1 = require(\"./util/validation\");\nvar util_3 = require(\"@firebase/util\");\nvar nodeFromJSON_1 = require(\"./snap/nodeFromJSON\");\nvar ChildrenNode_1 = require(\"./snap/ChildrenNode\");\nvar Repo_1 = require(\"./Repo\");\n// TODO: This is pretty messy.  Ideally, a lot of this would move into FirebaseData, or a transaction-specific\n// component used by FirebaseData, but it has ties to user callbacks (transaction update and onComplete) as well\n// as the realtime connection (to send transactions to the server).  So that all needs to be decoupled first.\n// For now it's part of Repo, but in its own file.\n/**\n * @enum {number}\n */\nvar TransactionStatus;\n(function (TransactionStatus) {\n    // We've run the transaction and updated transactionResultData_ with the result, but it isn't currently sent to the\n    // server. A transaction will go from RUN -> SENT -> RUN if it comes back from the server as rejected due to\n    // mismatched hash.\n    TransactionStatus[TransactionStatus[\"RUN\"] = 0] = \"RUN\";\n    // We've run the transaction and sent it to the server and it's currently outstanding (hasn't come back as accepted\n    // or rejected yet).\n    TransactionStatus[TransactionStatus[\"SENT\"] = 1] = \"SENT\";\n    // Temporary state used to mark completed transactions (whether successful or aborted).  The transaction will be\n    // removed when we get a chance to prune completed ones.\n    TransactionStatus[TransactionStatus[\"COMPLETED\"] = 2] = \"COMPLETED\";\n    // Used when an already-sent transaction needs to be aborted (e.g. due to a conflicting set() call that was made).\n    // If it comes back as unsuccessful, we'll abort it.\n    TransactionStatus[TransactionStatus[\"SENT_NEEDS_ABORT\"] = 3] = \"SENT_NEEDS_ABORT\";\n    // Temporary state used to mark transactions that need to be aborted.\n    TransactionStatus[TransactionStatus[\"NEEDS_ABORT\"] = 4] = \"NEEDS_ABORT\";\n})(TransactionStatus = exports.TransactionStatus || (exports.TransactionStatus = {}));\n/**\n * If a transaction does not succeed after 25 retries, we abort it.  Among other things this ensure that if there's\n * ever a bug causing a mismatch between client / server hashes for some data, we won't retry indefinitely.\n * @type {number}\n * @const\n * @private\n */\nRepo_1.Repo.MAX_TRANSACTION_RETRIES_ = 25;\n/**\n * Setup the transaction data structures\n * @private\n */\nRepo_1.Repo.prototype.transactions_init_ = function () {\n    /**\n     * Stores queues of outstanding transactions for Firebase locations.\n     *\n     * @type {!Tree.<Array.<!Transaction>>}\n     * @private\n     */\n    this.transactionQueueTree_ = new Tree_1.Tree();\n};\n/**\n * Creates a new transaction, adds it to the transactions we're tracking, and sends it to the server if possible.\n *\n * @param {!Path} path Path at which to do transaction.\n * @param {function(*):*} transactionUpdate Update callback.\n * @param {?function(?Error, boolean, ?DataSnapshot)} onComplete Completion callback.\n * @param {boolean} applyLocally Whether or not to make intermediate results visible\n */\nRepo_1.Repo.prototype.startTransaction = function (path, transactionUpdate, onComplete, applyLocally) {\n    this.log_('transaction on ' + path);\n    // Add a watch to make sure we get server updates.\n    var valueCallback = function () { };\n    var watchRef = new Reference_1.Reference(this, path);\n    watchRef.on('value', valueCallback);\n    var unwatcher = function () {\n        watchRef.off('value', valueCallback);\n    };\n    // Initialize transaction.\n    var transaction = {\n        path: path,\n        update: transactionUpdate,\n        onComplete: onComplete,\n        // One of TransactionStatus enums.\n        status: null,\n        // Used when combining transactions at different locations to figure out which one goes first.\n        order: util_2.LUIDGenerator(),\n        // Whether to raise local events for this transaction.\n        applyLocally: applyLocally,\n        // Count of how many times we've retried the transaction.\n        retryCount: 0,\n        // Function to call to clean up our .on() listener.\n        unwatcher: unwatcher,\n        // Stores why a transaction was aborted.\n        abortReason: null,\n        currentWriteId: null,\n        currentInputSnapshot: null,\n        currentOutputSnapshotRaw: null,\n        currentOutputSnapshotResolved: null\n    };\n    // Run transaction initially.\n    var currentState = this.getLatestState_(path);\n    transaction.currentInputSnapshot = currentState;\n    var newVal = transaction.update(currentState.val());\n    if (newVal === undefined) {\n        // Abort transaction.\n        transaction.unwatcher();\n        transaction.currentOutputSnapshotRaw = null;\n        transaction.currentOutputSnapshotResolved = null;\n        if (transaction.onComplete) {\n            // We just set the input snapshot, so this cast should be safe\n            var snapshot = new DataSnapshot_1.DataSnapshot(transaction.currentInputSnapshot, new Reference_1.Reference(this, transaction.path), PriorityIndex_1.PRIORITY_INDEX);\n            transaction.onComplete(null, false, snapshot);\n        }\n    }\n    else {\n        validation_1.validateFirebaseData('transaction failed: Data returned ', newVal, transaction.path);\n        // Mark as run and add to our queue.\n        transaction.status = TransactionStatus.RUN;\n        var queueNode = this.transactionQueueTree_.subTree(path);\n        var nodeQueue = queueNode.getValue() || [];\n        nodeQueue.push(transaction);\n        queueNode.setValue(nodeQueue);\n        // Update visibleData and raise events\n        // Note: We intentionally raise events after updating all of our transaction state, since the user could\n        // start new transactions from the event callbacks.\n        var priorityForNode = void 0;\n        if (typeof newVal === 'object' &&\n            newVal !== null &&\n            util_3.contains(newVal, '.priority')) {\n            priorityForNode = util_3.safeGet(newVal, '.priority');\n            util_1.assert(validation_1.isValidPriority(priorityForNode), 'Invalid priority returned by transaction. ' +\n                'Priority must be a valid string, finite number, server value, or null.');\n        }\n        else {\n            var currentNode = this.serverSyncTree_.calcCompleteEventCache(path) ||\n                ChildrenNode_1.ChildrenNode.EMPTY_NODE;\n            priorityForNode = currentNode.getPriority().val();\n        }\n        priorityForNode /** @type {null|number|string} */ = priorityForNode;\n        var serverValues = this.generateServerValues();\n        var newNodeUnresolved = nodeFromJSON_1.nodeFromJSON(newVal, priorityForNode);\n        var newNode = ServerValues_1.resolveDeferredValueSnapshot(newNodeUnresolved, serverValues);\n        transaction.currentOutputSnapshotRaw = newNodeUnresolved;\n        transaction.currentOutputSnapshotResolved = newNode;\n        transaction.currentWriteId = this.getNextWriteId_();\n        var events = this.serverSyncTree_.applyUserOverwrite(path, newNode, transaction.currentWriteId, transaction.applyLocally);\n        this.eventQueue_.raiseEventsForChangedPath(path, events);\n        this.sendReadyTransactions_();\n    }\n};\n/**\n * @param {!Path} path\n * @param {Array.<number>=} excludeSets A specific set to exclude\n * @return {Node}\n * @private\n */\nRepo_1.Repo.prototype.getLatestState_ = function (path, excludeSets) {\n    return (this.serverSyncTree_.calcCompleteEventCache(path, excludeSets) ||\n        ChildrenNode_1.ChildrenNode.EMPTY_NODE);\n};\n/**\n * Sends any already-run transactions that aren't waiting for outstanding transactions to\n * complete.\n *\n * Externally it's called with no arguments, but it calls itself recursively with a particular\n * transactionQueueTree node to recurse through the tree.\n *\n * @param {Tree.<Array.<Transaction>>=} node  transactionQueueTree node to start at.\n * @private\n */\nRepo_1.Repo.prototype.sendReadyTransactions_ = function (node) {\n    var _this = this;\n    if (node === void 0) { node = this.transactionQueueTree_; }\n    // Before recursing, make sure any completed transactions are removed.\n    if (!node) {\n        this.pruneCompletedTransactionsBelowNode_(node);\n    }\n    if (node.getValue() !== null) {\n        var queue = this.buildTransactionQueue_(node);\n        util_1.assert(queue.length > 0, 'Sending zero length transaction queue');\n        var allRun = queue.every(function (transaction) { return transaction.status === TransactionStatus.RUN; });\n        // If they're all run (and not sent), we can send them.  Else, we must wait.\n        if (allRun) {\n            this.sendTransactionQueue_(node.path(), queue);\n        }\n    }\n    else if (node.hasChildren()) {\n        node.forEachChild(function (childNode) {\n            _this.sendReadyTransactions_(childNode);\n        });\n    }\n};\n/**\n * Given a list of run transactions, send them to the server and then handle the result (success or failure).\n *\n * @param {!Path} path The location of the queue.\n * @param {!Array.<Transaction>} queue Queue of transactions under the specified location.\n * @private\n */\nRepo_1.Repo.prototype.sendTransactionQueue_ = function (path, queue) {\n    var _this = this;\n    // Mark transactions as sent and increment retry count!\n    var setsToIgnore = queue.map(function (txn) {\n        return txn.currentWriteId;\n    });\n    var latestState = this.getLatestState_(path, setsToIgnore);\n    var snapToSend = latestState;\n    var latestHash = latestState.hash();\n    for (var i = 0; i < queue.length; i++) {\n        var txn = queue[i];\n        util_1.assert(txn.status === TransactionStatus.RUN, 'tryToSendTransactionQueue_: items in queue should all be run.');\n        txn.status = TransactionStatus.SENT;\n        txn.retryCount++;\n        var relativePath = Path_1.Path.relativePath(path, txn.path);\n        // If we've gotten to this point, the output snapshot must be defined.\n        snapToSend = snapToSend.updateChild(relativePath /**@type {!Node} */, txn.currentOutputSnapshotRaw);\n    }\n    var dataToSend = snapToSend.val(true);\n    var pathToSend = path;\n    // Send the put.\n    this.server_.put(pathToSend.toString(), dataToSend, function (status) {\n        _this.log_('transaction put response', {\n            path: pathToSend.toString(),\n            status: status\n        });\n        var events = [];\n        if (status === 'ok') {\n            // Queue up the callbacks and fire them after cleaning up all of our transaction state, since\n            // the callback could trigger more transactions or sets.\n            var callbacks = [];\n            for (var i = 0; i < queue.length; i++) {\n                queue[i].status = TransactionStatus.COMPLETED;\n                events = events.concat(_this.serverSyncTree_.ackUserWrite(queue[i].currentWriteId));\n                if (queue[i].onComplete) {\n                    // We never unset the output snapshot, and given that this transaction is complete, it should be set\n                    var node = queue[i].currentOutputSnapshotResolved;\n                    var ref = new Reference_1.Reference(_this, queue[i].path);\n                    var snapshot = new DataSnapshot_1.DataSnapshot(node, ref, PriorityIndex_1.PRIORITY_INDEX);\n                    callbacks.push(queue[i].onComplete.bind(null, null, true, snapshot));\n                }\n                queue[i].unwatcher();\n            }\n            // Now remove the completed transactions.\n            _this.pruneCompletedTransactionsBelowNode_(_this.transactionQueueTree_.subTree(path));\n            // There may be pending transactions that we can now send.\n            _this.sendReadyTransactions_();\n            _this.eventQueue_.raiseEventsForChangedPath(path, events);\n            // Finally, trigger onComplete callbacks.\n            for (var i = 0; i < callbacks.length; i++) {\n                util_2.exceptionGuard(callbacks[i]);\n            }\n        }\n        else {\n            // transactions are no longer sent.  Update their status appropriately.\n            if (status === 'datastale') {\n                for (var i = 0; i < queue.length; i++) {\n                    if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT)\n                        queue[i].status = TransactionStatus.NEEDS_ABORT;\n                    else\n                        queue[i].status = TransactionStatus.RUN;\n                }\n            }\n            else {\n                util_2.warn('transaction at ' + pathToSend.toString() + ' failed: ' + status);\n                for (var i = 0; i < queue.length; i++) {\n                    queue[i].status = TransactionStatus.NEEDS_ABORT;\n                    queue[i].abortReason = status;\n                }\n            }\n            _this.rerunTransactions_(path);\n        }\n    }, latestHash);\n};\n/**\n * Finds all transactions dependent on the data at changedPath and reruns them.\n *\n * Should be called any time cached data changes.\n *\n * Return the highest path that was affected by rerunning transactions.  This is the path at which events need to\n * be raised for.\n *\n * @param {!Path} changedPath The path in mergedData that changed.\n * @return {!Path} The rootmost path that was affected by rerunning transactions.\n * @private\n */\nRepo_1.Repo.prototype.rerunTransactions_ = function (changedPath) {\n    var rootMostTransactionNode = this.getAncestorTransactionNode_(changedPath);\n    var path = rootMostTransactionNode.path();\n    var queue = this.buildTransactionQueue_(rootMostTransactionNode);\n    this.rerunTransactionQueue_(queue, path);\n    return path;\n};\n/**\n * Does all the work of rerunning transactions (as well as cleans up aborted transactions and whatnot).\n *\n * @param {Array.<Transaction>} queue The queue of transactions to run.\n * @param {!Path} path The path the queue is for.\n * @private\n */\nRepo_1.Repo.prototype.rerunTransactionQueue_ = function (queue, path) {\n    if (queue.length === 0) {\n        return; // Nothing to do!\n    }\n    // Queue up the callbacks and fire them after cleaning up all of our transaction state, since\n    // the callback could trigger more transactions or sets.\n    var callbacks = [];\n    var events = [];\n    // Ignore all of the sets we're going to re-run.\n    var txnsToRerun = queue.filter(function (q) {\n        return q.status === TransactionStatus.RUN;\n    });\n    var setsToIgnore = txnsToRerun.map(function (q) {\n        return q.currentWriteId;\n    });\n    for (var i = 0; i < queue.length; i++) {\n        var transaction = queue[i];\n        var relativePath = Path_1.Path.relativePath(path, transaction.path);\n        var abortTransaction = false, abortReason = void 0;\n        util_1.assert(relativePath !== null, 'rerunTransactionsUnderNode_: relativePath should not be null.');\n        if (transaction.status === TransactionStatus.NEEDS_ABORT) {\n            abortTransaction = true;\n            abortReason = transaction.abortReason;\n            events = events.concat(this.serverSyncTree_.ackUserWrite(transaction.currentWriteId, true));\n        }\n        else if (transaction.status === TransactionStatus.RUN) {\n            if (transaction.retryCount >= Repo_1.Repo.MAX_TRANSACTION_RETRIES_) {\n                abortTransaction = true;\n                abortReason = 'maxretry';\n                events = events.concat(this.serverSyncTree_.ackUserWrite(transaction.currentWriteId, true));\n            }\n            else {\n                // This code reruns a transaction\n                var currentNode = this.getLatestState_(transaction.path, setsToIgnore);\n                transaction.currentInputSnapshot = currentNode;\n                var newData = queue[i].update(currentNode.val());\n                if (newData !== undefined) {\n                    validation_1.validateFirebaseData('transaction failed: Data returned ', newData, transaction.path);\n                    var newDataNode = nodeFromJSON_1.nodeFromJSON(newData);\n                    var hasExplicitPriority = typeof newData === 'object' &&\n                        newData != null &&\n                        util_3.contains(newData, '.priority');\n                    if (!hasExplicitPriority) {\n                        // Keep the old priority if there wasn't a priority explicitly specified.\n                        newDataNode = newDataNode.updatePriority(currentNode.getPriority());\n                    }\n                    var oldWriteId = transaction.currentWriteId;\n                    var serverValues = this.generateServerValues();\n                    var newNodeResolved = ServerValues_1.resolveDeferredValueSnapshot(newDataNode, serverValues);\n                    transaction.currentOutputSnapshotRaw = newDataNode;\n                    transaction.currentOutputSnapshotResolved = newNodeResolved;\n                    transaction.currentWriteId = this.getNextWriteId_();\n                    // Mutates setsToIgnore in place\n                    setsToIgnore.splice(setsToIgnore.indexOf(oldWriteId), 1);\n                    events = events.concat(this.serverSyncTree_.applyUserOverwrite(transaction.path, newNodeResolved, transaction.currentWriteId, transaction.applyLocally));\n                    events = events.concat(this.serverSyncTree_.ackUserWrite(oldWriteId, true));\n                }\n                else {\n                    abortTransaction = true;\n                    abortReason = 'nodata';\n                    events = events.concat(this.serverSyncTree_.ackUserWrite(transaction.currentWriteId, true));\n                }\n            }\n        }\n        this.eventQueue_.raiseEventsForChangedPath(path, events);\n        events = [];\n        if (abortTransaction) {\n            // Abort.\n            queue[i].status = TransactionStatus.COMPLETED;\n            // Removing a listener can trigger pruning which can muck with mergedData/visibleData (as it prunes data).\n            // So defer the unwatcher until we're done.\n            (function (unwatcher) {\n                setTimeout(unwatcher, Math.floor(0));\n            })(queue[i].unwatcher);\n            if (queue[i].onComplete) {\n                if (abortReason === 'nodata') {\n                    var ref = new Reference_1.Reference(this, queue[i].path);\n                    // We set this field immediately, so it's safe to cast to an actual snapshot\n                    var lastInput /** @type {!Node} */ = queue[i].currentInputSnapshot;\n                    var snapshot = new DataSnapshot_1.DataSnapshot(lastInput, ref, PriorityIndex_1.PRIORITY_INDEX);\n                    callbacks.push(queue[i].onComplete.bind(null, null, false, snapshot));\n                }\n                else {\n                    callbacks.push(queue[i].onComplete.bind(null, new Error(abortReason), false, null));\n                }\n            }\n        }\n    }\n    // Clean up completed transactions.\n    this.pruneCompletedTransactionsBelowNode_(this.transactionQueueTree_);\n    // Now fire callbacks, now that we're in a good, known state.\n    for (var i = 0; i < callbacks.length; i++) {\n        util_2.exceptionGuard(callbacks[i]);\n    }\n    // Try to send the transaction result to the server.\n    this.sendReadyTransactions_();\n};\n/**\n * Returns the rootmost ancestor node of the specified path that has a pending transaction on it, or just returns\n * the node for the given path if there are no pending transactions on any ancestor.\n *\n * @param {!Path} path The location to start at.\n * @return {!Tree.<Array.<!Transaction>>} The rootmost node with a transaction.\n * @private\n */\nRepo_1.Repo.prototype.getAncestorTransactionNode_ = function (path) {\n    var front;\n    // Start at the root and walk deeper into the tree towards path until we find a node with pending transactions.\n    var transactionNode = this.transactionQueueTree_;\n    while ((front = path.getFront()) !== null &&\n        transactionNode.getValue() === null) {\n        transactionNode = transactionNode.subTree(front);\n        path = path.popFront();\n    }\n    return transactionNode;\n};\n/**\n * Builds the queue of all transactions at or below the specified transactionNode.\n *\n * @param {!Tree.<Array.<Transaction>>} transactionNode\n * @return {Array.<Transaction>} The generated queue.\n * @private\n */\nRepo_1.Repo.prototype.buildTransactionQueue_ = function (transactionNode) {\n    // Walk any child transaction queues and aggregate them into a single queue.\n    var transactionQueue = [];\n    this.aggregateTransactionQueuesForNode_(transactionNode, transactionQueue);\n    // Sort them by the order the transactions were created.\n    transactionQueue.sort(function (a, b) {\n        return a.order - b.order;\n    });\n    return transactionQueue;\n};\n/**\n * @param {!Tree.<Array.<Transaction>>} node\n * @param {Array.<Transaction>} queue\n * @private\n */\nRepo_1.Repo.prototype.aggregateTransactionQueuesForNode_ = function (node, queue) {\n    var _this = this;\n    var nodeQueue = node.getValue();\n    if (nodeQueue !== null) {\n        for (var i = 0; i < nodeQueue.length; i++) {\n            queue.push(nodeQueue[i]);\n        }\n    }\n    node.forEachChild(function (child) {\n        _this.aggregateTransactionQueuesForNode_(child, queue);\n    });\n};\n/**\n * Remove COMPLETED transactions at or below this node in the transactionQueueTree_.\n *\n * @param {!Tree.<Array.<!Transaction>>} node\n * @private\n */\nRepo_1.Repo.prototype.pruneCompletedTransactionsBelowNode_ = function (node) {\n    var _this = this;\n    var queue = node.getValue();\n    if (queue) {\n        var to = 0;\n        for (var from = 0; from < queue.length; from++) {\n            if (queue[from].status !== TransactionStatus.COMPLETED) {\n                queue[to] = queue[from];\n                to++;\n            }\n        }\n        queue.length = to;\n        node.setValue(queue.length > 0 ? queue : null);\n    }\n    node.forEachChild(function (childNode) {\n        _this.pruneCompletedTransactionsBelowNode_(childNode);\n    });\n};\n/**\n * Aborts all transactions on ancestors or descendants of the specified path.  Called when doing a set() or update()\n * since we consider them incompatible with transactions.\n *\n * @param {!Path} path Path for which we want to abort related transactions.\n * @return {!Path}\n * @private\n */\nRepo_1.Repo.prototype.abortTransactions_ = function (path) {\n    var _this = this;\n    var affectedPath = this.getAncestorTransactionNode_(path).path();\n    var transactionNode = this.transactionQueueTree_.subTree(path);\n    transactionNode.forEachAncestor(function (node) {\n        _this.abortTransactionsOnNode_(node);\n    });\n    this.abortTransactionsOnNode_(transactionNode);\n    transactionNode.forEachDescendant(function (node) {\n        _this.abortTransactionsOnNode_(node);\n    });\n    return affectedPath;\n};\n/**\n * Abort transactions stored in this transaction queue node.\n *\n * @param {!Tree.<Array.<Transaction>>} node Node to abort transactions for.\n * @private\n */\nRepo_1.Repo.prototype.abortTransactionsOnNode_ = function (node) {\n    var queue = node.getValue();\n    if (queue !== null) {\n        // Queue up the callbacks and fire them after cleaning up all of our transaction state, since\n        // the callback could trigger more transactions or sets.\n        var callbacks = [];\n        // Go through queue.  Any already-sent transactions must be marked for abort, while the unsent ones\n        // can be immediately aborted and removed.\n        var events = [];\n        var lastSent = -1;\n        for (var i = 0; i < queue.length; i++) {\n            if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT) {\n                // Already marked.  No action needed.\n            }\n            else if (queue[i].status === TransactionStatus.SENT) {\n                util_1.assert(lastSent === i - 1, 'All SENT items should be at beginning of queue.');\n                lastSent = i;\n                // Mark transaction for abort when it comes back.\n                queue[i].status = TransactionStatus.SENT_NEEDS_ABORT;\n                queue[i].abortReason = 'set';\n            }\n            else {\n                util_1.assert(queue[i].status === TransactionStatus.RUN, 'Unexpected transaction status in abort');\n                // We can abort it immediately.\n                queue[i].unwatcher();\n                events = events.concat(this.serverSyncTree_.ackUserWrite(queue[i].currentWriteId, true));\n                if (queue[i].onComplete) {\n                    var snapshot = null;\n                    callbacks.push(queue[i].onComplete.bind(null, new Error('set'), false, snapshot));\n                }\n            }\n        }\n        if (lastSent === -1) {\n            // We're not waiting for any sent transactions.  We can clear the queue.\n            node.setValue(null);\n        }\n        else {\n            // Remove the transactions we aborted.\n            queue.length = lastSent + 1;\n        }\n        // Now fire the callbacks.\n        this.eventQueue_.raiseEventsForChangedPath(node.path(), events);\n        for (var i = 0; i < callbacks.length; i++) {\n            util_2.exceptionGuard(callbacks[i]);\n        }\n    }\n};\n\n//# sourceMappingURL=Repo_transaction.js.map\n","map":{"mappings":[{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":247,"column":0},"generated":{"line":247,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":248,"column":0},"generated":{"line":248,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":249,"column":0},"generated":{"line":249,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":250,"column":0},"generated":{"line":250,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":251,"column":0},"generated":{"line":251,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":252,"column":0},"generated":{"line":252,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":253,"column":0},"generated":{"line":253,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":254,"column":0},"generated":{"line":254,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":255,"column":0},"generated":{"line":255,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":256,"column":0},"generated":{"line":256,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":257,"column":0},"generated":{"line":257,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":258,"column":0},"generated":{"line":258,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":259,"column":0},"generated":{"line":259,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":260,"column":0},"generated":{"line":260,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":261,"column":0},"generated":{"line":261,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":262,"column":0},"generated":{"line":262,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":263,"column":0},"generated":{"line":263,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":264,"column":0},"generated":{"line":264,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":265,"column":0},"generated":{"line":265,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":266,"column":0},"generated":{"line":266,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":267,"column":0},"generated":{"line":267,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":268,"column":0},"generated":{"line":268,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":269,"column":0},"generated":{"line":269,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":270,"column":0},"generated":{"line":270,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":271,"column":0},"generated":{"line":271,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":272,"column":0},"generated":{"line":272,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":273,"column":0},"generated":{"line":273,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":274,"column":0},"generated":{"line":274,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":275,"column":0},"generated":{"line":275,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":276,"column":0},"generated":{"line":276,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":277,"column":0},"generated":{"line":277,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":278,"column":0},"generated":{"line":278,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":279,"column":0},"generated":{"line":279,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":280,"column":0},"generated":{"line":280,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":281,"column":0},"generated":{"line":281,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":282,"column":0},"generated":{"line":282,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":283,"column":0},"generated":{"line":283,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":284,"column":0},"generated":{"line":284,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":285,"column":0},"generated":{"line":285,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":286,"column":0},"generated":{"line":286,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":287,"column":0},"generated":{"line":287,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":288,"column":0},"generated":{"line":288,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":289,"column":0},"generated":{"line":289,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":290,"column":0},"generated":{"line":290,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":291,"column":0},"generated":{"line":291,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":292,"column":0},"generated":{"line":292,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":293,"column":0},"generated":{"line":293,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":294,"column":0},"generated":{"line":294,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":295,"column":0},"generated":{"line":295,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":296,"column":0},"generated":{"line":296,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":297,"column":0},"generated":{"line":297,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":298,"column":0},"generated":{"line":298,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":299,"column":0},"generated":{"line":299,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":300,"column":0},"generated":{"line":300,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":301,"column":0},"generated":{"line":301,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":302,"column":0},"generated":{"line":302,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":303,"column":0},"generated":{"line":303,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":304,"column":0},"generated":{"line":304,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":305,"column":0},"generated":{"line":305,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":306,"column":0},"generated":{"line":306,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":307,"column":0},"generated":{"line":307,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":308,"column":0},"generated":{"line":308,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":309,"column":0},"generated":{"line":309,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":310,"column":0},"generated":{"line":310,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":311,"column":0},"generated":{"line":311,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":312,"column":0},"generated":{"line":312,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":313,"column":0},"generated":{"line":313,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":314,"column":0},"generated":{"line":314,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":315,"column":0},"generated":{"line":315,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":316,"column":0},"generated":{"line":316,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":317,"column":0},"generated":{"line":317,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":318,"column":0},"generated":{"line":318,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":319,"column":0},"generated":{"line":319,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":320,"column":0},"generated":{"line":320,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":321,"column":0},"generated":{"line":321,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":322,"column":0},"generated":{"line":322,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":323,"column":0},"generated":{"line":323,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":324,"column":0},"generated":{"line":324,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":325,"column":0},"generated":{"line":325,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":326,"column":0},"generated":{"line":326,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":327,"column":0},"generated":{"line":327,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":328,"column":0},"generated":{"line":328,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":329,"column":0},"generated":{"line":329,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":330,"column":0},"generated":{"line":330,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":331,"column":0},"generated":{"line":331,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":332,"column":0},"generated":{"line":332,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":333,"column":0},"generated":{"line":333,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":334,"column":0},"generated":{"line":334,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":335,"column":0},"generated":{"line":335,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":336,"column":0},"generated":{"line":336,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":337,"column":0},"generated":{"line":337,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":338,"column":0},"generated":{"line":338,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":339,"column":0},"generated":{"line":339,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":340,"column":0},"generated":{"line":340,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":341,"column":0},"generated":{"line":341,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":342,"column":0},"generated":{"line":342,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":343,"column":0},"generated":{"line":343,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":344,"column":0},"generated":{"line":344,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":345,"column":0},"generated":{"line":345,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":346,"column":0},"generated":{"line":346,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":347,"column":0},"generated":{"line":347,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":348,"column":0},"generated":{"line":348,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":349,"column":0},"generated":{"line":349,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":350,"column":0},"generated":{"line":350,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":351,"column":0},"generated":{"line":351,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":352,"column":0},"generated":{"line":352,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":353,"column":0},"generated":{"line":353,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":354,"column":0},"generated":{"line":354,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":355,"column":0},"generated":{"line":355,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":356,"column":0},"generated":{"line":356,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":357,"column":0},"generated":{"line":357,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":358,"column":0},"generated":{"line":358,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":359,"column":0},"generated":{"line":359,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":360,"column":0},"generated":{"line":360,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":361,"column":0},"generated":{"line":361,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":362,"column":0},"generated":{"line":362,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":363,"column":0},"generated":{"line":363,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":364,"column":0},"generated":{"line":364,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":365,"column":0},"generated":{"line":365,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":366,"column":0},"generated":{"line":366,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":367,"column":0},"generated":{"line":367,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":368,"column":0},"generated":{"line":368,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":369,"column":0},"generated":{"line":369,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":370,"column":0},"generated":{"line":370,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":371,"column":0},"generated":{"line":371,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":372,"column":0},"generated":{"line":372,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":373,"column":0},"generated":{"line":373,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":374,"column":0},"generated":{"line":374,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":375,"column":0},"generated":{"line":375,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":376,"column":0},"generated":{"line":376,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":377,"column":0},"generated":{"line":377,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":378,"column":0},"generated":{"line":378,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":379,"column":0},"generated":{"line":379,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":380,"column":0},"generated":{"line":380,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":381,"column":0},"generated":{"line":381,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":382,"column":0},"generated":{"line":382,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":383,"column":0},"generated":{"line":383,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":384,"column":0},"generated":{"line":384,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":385,"column":0},"generated":{"line":385,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":386,"column":0},"generated":{"line":386,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":387,"column":0},"generated":{"line":387,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":388,"column":0},"generated":{"line":388,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":389,"column":0},"generated":{"line":389,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":390,"column":0},"generated":{"line":390,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":391,"column":0},"generated":{"line":391,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":392,"column":0},"generated":{"line":392,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":393,"column":0},"generated":{"line":393,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":394,"column":0},"generated":{"line":394,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":395,"column":0},"generated":{"line":395,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":396,"column":0},"generated":{"line":396,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":397,"column":0},"generated":{"line":397,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":398,"column":0},"generated":{"line":398,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":399,"column":0},"generated":{"line":399,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":400,"column":0},"generated":{"line":400,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":401,"column":0},"generated":{"line":401,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":402,"column":0},"generated":{"line":402,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":403,"column":0},"generated":{"line":403,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":404,"column":0},"generated":{"line":404,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":405,"column":0},"generated":{"line":405,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":406,"column":0},"generated":{"line":406,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":407,"column":0},"generated":{"line":407,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":408,"column":0},"generated":{"line":408,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":409,"column":0},"generated":{"line":409,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":410,"column":0},"generated":{"line":410,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":411,"column":0},"generated":{"line":411,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":412,"column":0},"generated":{"line":412,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":413,"column":0},"generated":{"line":413,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":414,"column":0},"generated":{"line":414,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":415,"column":0},"generated":{"line":415,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":416,"column":0},"generated":{"line":416,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":417,"column":0},"generated":{"line":417,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":418,"column":0},"generated":{"line":418,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":419,"column":0},"generated":{"line":419,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":420,"column":0},"generated":{"line":420,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":421,"column":0},"generated":{"line":421,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":422,"column":0},"generated":{"line":422,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":423,"column":0},"generated":{"line":423,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":424,"column":0},"generated":{"line":424,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":425,"column":0},"generated":{"line":425,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":426,"column":0},"generated":{"line":426,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":427,"column":0},"generated":{"line":427,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":428,"column":0},"generated":{"line":428,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":429,"column":0},"generated":{"line":429,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":430,"column":0},"generated":{"line":430,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":431,"column":0},"generated":{"line":431,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":432,"column":0},"generated":{"line":432,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":433,"column":0},"generated":{"line":433,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":434,"column":0},"generated":{"line":434,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":435,"column":0},"generated":{"line":435,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":436,"column":0},"generated":{"line":436,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":437,"column":0},"generated":{"line":437,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":438,"column":0},"generated":{"line":438,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":439,"column":0},"generated":{"line":439,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":440,"column":0},"generated":{"line":440,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":441,"column":0},"generated":{"line":441,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":442,"column":0},"generated":{"line":442,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":443,"column":0},"generated":{"line":443,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":444,"column":0},"generated":{"line":444,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":445,"column":0},"generated":{"line":445,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":446,"column":0},"generated":{"line":446,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":447,"column":0},"generated":{"line":447,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":448,"column":0},"generated":{"line":448,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":449,"column":0},"generated":{"line":449,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":450,"column":0},"generated":{"line":450,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":451,"column":0},"generated":{"line":451,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":452,"column":0},"generated":{"line":452,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":453,"column":0},"generated":{"line":453,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":454,"column":0},"generated":{"line":454,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":455,"column":0},"generated":{"line":455,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":456,"column":0},"generated":{"line":456,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":457,"column":0},"generated":{"line":457,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":458,"column":0},"generated":{"line":458,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":459,"column":0},"generated":{"line":459,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":460,"column":0},"generated":{"line":460,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":461,"column":0},"generated":{"line":461,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":462,"column":0},"generated":{"line":462,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":463,"column":0},"generated":{"line":463,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":464,"column":0},"generated":{"line":464,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":465,"column":0},"generated":{"line":465,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":466,"column":0},"generated":{"line":466,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":467,"column":0},"generated":{"line":467,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":468,"column":0},"generated":{"line":468,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":469,"column":0},"generated":{"line":469,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":470,"column":0},"generated":{"line":470,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":471,"column":0},"generated":{"line":471,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":472,"column":0},"generated":{"line":472,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":473,"column":0},"generated":{"line":473,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":474,"column":0},"generated":{"line":474,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":475,"column":0},"generated":{"line":475,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":476,"column":0},"generated":{"line":476,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":477,"column":0},"generated":{"line":477,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":478,"column":0},"generated":{"line":478,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":479,"column":0},"generated":{"line":479,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":480,"column":0},"generated":{"line":480,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":481,"column":0},"generated":{"line":481,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":482,"column":0},"generated":{"line":482,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":483,"column":0},"generated":{"line":483,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":484,"column":0},"generated":{"line":484,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":485,"column":0},"generated":{"line":485,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":486,"column":0},"generated":{"line":486,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":487,"column":0},"generated":{"line":487,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":488,"column":0},"generated":{"line":488,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":489,"column":0},"generated":{"line":489,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":490,"column":0},"generated":{"line":490,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":491,"column":0},"generated":{"line":491,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":492,"column":0},"generated":{"line":492,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":493,"column":0},"generated":{"line":493,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":494,"column":0},"generated":{"line":494,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":495,"column":0},"generated":{"line":495,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":496,"column":0},"generated":{"line":496,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":497,"column":0},"generated":{"line":497,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":498,"column":0},"generated":{"line":498,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":499,"column":0},"generated":{"line":499,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":500,"column":0},"generated":{"line":500,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":501,"column":0},"generated":{"line":501,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":502,"column":0},"generated":{"line":502,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":503,"column":0},"generated":{"line":503,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":504,"column":0},"generated":{"line":504,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":505,"column":0},"generated":{"line":505,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":506,"column":0},"generated":{"line":506,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":507,"column":0},"generated":{"line":507,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":508,"column":0},"generated":{"line":508,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":509,"column":0},"generated":{"line":509,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":510,"column":0},"generated":{"line":510,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":511,"column":0},"generated":{"line":511,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":512,"column":0},"generated":{"line":512,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":513,"column":0},"generated":{"line":513,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":514,"column":0},"generated":{"line":514,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":515,"column":0},"generated":{"line":515,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":516,"column":0},"generated":{"line":516,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":517,"column":0},"generated":{"line":517,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":518,"column":0},"generated":{"line":518,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":519,"column":0},"generated":{"line":519,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":520,"column":0},"generated":{"line":520,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":521,"column":0},"generated":{"line":521,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":522,"column":0},"generated":{"line":522,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":523,"column":0},"generated":{"line":523,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":524,"column":0},"generated":{"line":524,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":525,"column":0},"generated":{"line":525,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":526,"column":0},"generated":{"line":526,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":527,"column":0},"generated":{"line":527,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":528,"column":0},"generated":{"line":528,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":529,"column":0},"generated":{"line":529,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":530,"column":0},"generated":{"line":530,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":531,"column":0},"generated":{"line":531,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":532,"column":0},"generated":{"line":532,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":533,"column":0},"generated":{"line":533,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":534,"column":0},"generated":{"line":534,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":535,"column":0},"generated":{"line":535,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":536,"column":0},"generated":{"line":536,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":537,"column":0},"generated":{"line":537,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":538,"column":0},"generated":{"line":538,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":539,"column":0},"generated":{"line":539,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":540,"column":0},"generated":{"line":540,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":541,"column":0},"generated":{"line":541,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":542,"column":0},"generated":{"line":542,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":543,"column":0},"generated":{"line":543,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":544,"column":0},"generated":{"line":544,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":545,"column":0},"generated":{"line":545,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":546,"column":0},"generated":{"line":546,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":547,"column":0},"generated":{"line":547,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":548,"column":0},"generated":{"line":548,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":549,"column":0},"generated":{"line":549,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":550,"column":0},"generated":{"line":550,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":551,"column":0},"generated":{"line":551,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":552,"column":0},"generated":{"line":552,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":553,"column":0},"generated":{"line":553,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":554,"column":0},"generated":{"line":554,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":555,"column":0},"generated":{"line":555,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":556,"column":0},"generated":{"line":556,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":557,"column":0},"generated":{"line":557,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":558,"column":0},"generated":{"line":558,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":559,"column":0},"generated":{"line":559,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":560,"column":0},"generated":{"line":560,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":561,"column":0},"generated":{"line":561,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":562,"column":0},"generated":{"line":562,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":563,"column":0},"generated":{"line":563,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":564,"column":0},"generated":{"line":564,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":565,"column":0},"generated":{"line":565,"column":0}},{"source":"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js","original":{"line":566,"column":0},"generated":{"line":566,"column":0}}],"sources":{"node_modules/@firebase/database/dist/cjs/src/core/Repo_transaction.js":"\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar util_1 = require(\"@firebase/util\");\nvar Reference_1 = require(\"../api/Reference\");\nvar DataSnapshot_1 = require(\"../api/DataSnapshot\");\nvar Path_1 = require(\"./util/Path\");\nvar Tree_1 = require(\"./util/Tree\");\nvar PriorityIndex_1 = require(\"./snap/indexes/PriorityIndex\");\nvar util_2 = require(\"./util/util\");\nvar ServerValues_1 = require(\"./util/ServerValues\");\nvar validation_1 = require(\"./util/validation\");\nvar util_3 = require(\"@firebase/util\");\nvar nodeFromJSON_1 = require(\"./snap/nodeFromJSON\");\nvar ChildrenNode_1 = require(\"./snap/ChildrenNode\");\nvar Repo_1 = require(\"./Repo\");\n// TODO: This is pretty messy.  Ideally, a lot of this would move into FirebaseData, or a transaction-specific\n// component used by FirebaseData, but it has ties to user callbacks (transaction update and onComplete) as well\n// as the realtime connection (to send transactions to the server).  So that all needs to be decoupled first.\n// For now it's part of Repo, but in its own file.\n/**\n * @enum {number}\n */\nvar TransactionStatus;\n(function (TransactionStatus) {\n    // We've run the transaction and updated transactionResultData_ with the result, but it isn't currently sent to the\n    // server. A transaction will go from RUN -> SENT -> RUN if it comes back from the server as rejected due to\n    // mismatched hash.\n    TransactionStatus[TransactionStatus[\"RUN\"] = 0] = \"RUN\";\n    // We've run the transaction and sent it to the server and it's currently outstanding (hasn't come back as accepted\n    // or rejected yet).\n    TransactionStatus[TransactionStatus[\"SENT\"] = 1] = \"SENT\";\n    // Temporary state used to mark completed transactions (whether successful or aborted).  The transaction will be\n    // removed when we get a chance to prune completed ones.\n    TransactionStatus[TransactionStatus[\"COMPLETED\"] = 2] = \"COMPLETED\";\n    // Used when an already-sent transaction needs to be aborted (e.g. due to a conflicting set() call that was made).\n    // If it comes back as unsuccessful, we'll abort it.\n    TransactionStatus[TransactionStatus[\"SENT_NEEDS_ABORT\"] = 3] = \"SENT_NEEDS_ABORT\";\n    // Temporary state used to mark transactions that need to be aborted.\n    TransactionStatus[TransactionStatus[\"NEEDS_ABORT\"] = 4] = \"NEEDS_ABORT\";\n})(TransactionStatus = exports.TransactionStatus || (exports.TransactionStatus = {}));\n/**\n * If a transaction does not succeed after 25 retries, we abort it.  Among other things this ensure that if there's\n * ever a bug causing a mismatch between client / server hashes for some data, we won't retry indefinitely.\n * @type {number}\n * @const\n * @private\n */\nRepo_1.Repo.MAX_TRANSACTION_RETRIES_ = 25;\n/**\n * Setup the transaction data structures\n * @private\n */\nRepo_1.Repo.prototype.transactions_init_ = function () {\n    /**\n     * Stores queues of outstanding transactions for Firebase locations.\n     *\n     * @type {!Tree.<Array.<!Transaction>>}\n     * @private\n     */\n    this.transactionQueueTree_ = new Tree_1.Tree();\n};\n/**\n * Creates a new transaction, adds it to the transactions we're tracking, and sends it to the server if possible.\n *\n * @param {!Path} path Path at which to do transaction.\n * @param {function(*):*} transactionUpdate Update callback.\n * @param {?function(?Error, boolean, ?DataSnapshot)} onComplete Completion callback.\n * @param {boolean} applyLocally Whether or not to make intermediate results visible\n */\nRepo_1.Repo.prototype.startTransaction = function (path, transactionUpdate, onComplete, applyLocally) {\n    this.log_('transaction on ' + path);\n    // Add a watch to make sure we get server updates.\n    var valueCallback = function () { };\n    var watchRef = new Reference_1.Reference(this, path);\n    watchRef.on('value', valueCallback);\n    var unwatcher = function () {\n        watchRef.off('value', valueCallback);\n    };\n    // Initialize transaction.\n    var transaction = {\n        path: path,\n        update: transactionUpdate,\n        onComplete: onComplete,\n        // One of TransactionStatus enums.\n        status: null,\n        // Used when combining transactions at different locations to figure out which one goes first.\n        order: util_2.LUIDGenerator(),\n        // Whether to raise local events for this transaction.\n        applyLocally: applyLocally,\n        // Count of how many times we've retried the transaction.\n        retryCount: 0,\n        // Function to call to clean up our .on() listener.\n        unwatcher: unwatcher,\n        // Stores why a transaction was aborted.\n        abortReason: null,\n        currentWriteId: null,\n        currentInputSnapshot: null,\n        currentOutputSnapshotRaw: null,\n        currentOutputSnapshotResolved: null\n    };\n    // Run transaction initially.\n    var currentState = this.getLatestState_(path);\n    transaction.currentInputSnapshot = currentState;\n    var newVal = transaction.update(currentState.val());\n    if (newVal === undefined) {\n        // Abort transaction.\n        transaction.unwatcher();\n        transaction.currentOutputSnapshotRaw = null;\n        transaction.currentOutputSnapshotResolved = null;\n        if (transaction.onComplete) {\n            // We just set the input snapshot, so this cast should be safe\n            var snapshot = new DataSnapshot_1.DataSnapshot(transaction.currentInputSnapshot, new Reference_1.Reference(this, transaction.path), PriorityIndex_1.PRIORITY_INDEX);\n            transaction.onComplete(null, false, snapshot);\n        }\n    }\n    else {\n        validation_1.validateFirebaseData('transaction failed: Data returned ', newVal, transaction.path);\n        // Mark as run and add to our queue.\n        transaction.status = TransactionStatus.RUN;\n        var queueNode = this.transactionQueueTree_.subTree(path);\n        var nodeQueue = queueNode.getValue() || [];\n        nodeQueue.push(transaction);\n        queueNode.setValue(nodeQueue);\n        // Update visibleData and raise events\n        // Note: We intentionally raise events after updating all of our transaction state, since the user could\n        // start new transactions from the event callbacks.\n        var priorityForNode = void 0;\n        if (typeof newVal === 'object' &&\n            newVal !== null &&\n            util_3.contains(newVal, '.priority')) {\n            priorityForNode = util_3.safeGet(newVal, '.priority');\n            util_1.assert(validation_1.isValidPriority(priorityForNode), 'Invalid priority returned by transaction. ' +\n                'Priority must be a valid string, finite number, server value, or null.');\n        }\n        else {\n            var currentNode = this.serverSyncTree_.calcCompleteEventCache(path) ||\n                ChildrenNode_1.ChildrenNode.EMPTY_NODE;\n            priorityForNode = currentNode.getPriority().val();\n        }\n        priorityForNode /** @type {null|number|string} */ = priorityForNode;\n        var serverValues = this.generateServerValues();\n        var newNodeUnresolved = nodeFromJSON_1.nodeFromJSON(newVal, priorityForNode);\n        var newNode = ServerValues_1.resolveDeferredValueSnapshot(newNodeUnresolved, serverValues);\n        transaction.currentOutputSnapshotRaw = newNodeUnresolved;\n        transaction.currentOutputSnapshotResolved = newNode;\n        transaction.currentWriteId = this.getNextWriteId_();\n        var events = this.serverSyncTree_.applyUserOverwrite(path, newNode, transaction.currentWriteId, transaction.applyLocally);\n        this.eventQueue_.raiseEventsForChangedPath(path, events);\n        this.sendReadyTransactions_();\n    }\n};\n/**\n * @param {!Path} path\n * @param {Array.<number>=} excludeSets A specific set to exclude\n * @return {Node}\n * @private\n */\nRepo_1.Repo.prototype.getLatestState_ = function (path, excludeSets) {\n    return (this.serverSyncTree_.calcCompleteEventCache(path, excludeSets) ||\n        ChildrenNode_1.ChildrenNode.EMPTY_NODE);\n};\n/**\n * Sends any already-run transactions that aren't waiting for outstanding transactions to\n * complete.\n *\n * Externally it's called with no arguments, but it calls itself recursively with a particular\n * transactionQueueTree node to recurse through the tree.\n *\n * @param {Tree.<Array.<Transaction>>=} node  transactionQueueTree node to start at.\n * @private\n */\nRepo_1.Repo.prototype.sendReadyTransactions_ = function (node) {\n    var _this = this;\n    if (node === void 0) { node = this.transactionQueueTree_; }\n    // Before recursing, make sure any completed transactions are removed.\n    if (!node) {\n        this.pruneCompletedTransactionsBelowNode_(node);\n    }\n    if (node.getValue() !== null) {\n        var queue = this.buildTransactionQueue_(node);\n        util_1.assert(queue.length > 0, 'Sending zero length transaction queue');\n        var allRun = queue.every(function (transaction) { return transaction.status === TransactionStatus.RUN; });\n        // If they're all run (and not sent), we can send them.  Else, we must wait.\n        if (allRun) {\n            this.sendTransactionQueue_(node.path(), queue);\n        }\n    }\n    else if (node.hasChildren()) {\n        node.forEachChild(function (childNode) {\n            _this.sendReadyTransactions_(childNode);\n        });\n    }\n};\n/**\n * Given a list of run transactions, send them to the server and then handle the result (success or failure).\n *\n * @param {!Path} path The location of the queue.\n * @param {!Array.<Transaction>} queue Queue of transactions under the specified location.\n * @private\n */\nRepo_1.Repo.prototype.sendTransactionQueue_ = function (path, queue) {\n    var _this = this;\n    // Mark transactions as sent and increment retry count!\n    var setsToIgnore = queue.map(function (txn) {\n        return txn.currentWriteId;\n    });\n    var latestState = this.getLatestState_(path, setsToIgnore);\n    var snapToSend = latestState;\n    var latestHash = latestState.hash();\n    for (var i = 0; i < queue.length; i++) {\n        var txn = queue[i];\n        util_1.assert(txn.status === TransactionStatus.RUN, 'tryToSendTransactionQueue_: items in queue should all be run.');\n        txn.status = TransactionStatus.SENT;\n        txn.retryCount++;\n        var relativePath = Path_1.Path.relativePath(path, txn.path);\n        // If we've gotten to this point, the output snapshot must be defined.\n        snapToSend = snapToSend.updateChild(relativePath /**@type {!Node} */, txn.currentOutputSnapshotRaw);\n    }\n    var dataToSend = snapToSend.val(true);\n    var pathToSend = path;\n    // Send the put.\n    this.server_.put(pathToSend.toString(), dataToSend, function (status) {\n        _this.log_('transaction put response', {\n            path: pathToSend.toString(),\n            status: status\n        });\n        var events = [];\n        if (status === 'ok') {\n            // Queue up the callbacks and fire them after cleaning up all of our transaction state, since\n            // the callback could trigger more transactions or sets.\n            var callbacks = [];\n            for (var i = 0; i < queue.length; i++) {\n                queue[i].status = TransactionStatus.COMPLETED;\n                events = events.concat(_this.serverSyncTree_.ackUserWrite(queue[i].currentWriteId));\n                if (queue[i].onComplete) {\n                    // We never unset the output snapshot, and given that this transaction is complete, it should be set\n                    var node = queue[i].currentOutputSnapshotResolved;\n                    var ref = new Reference_1.Reference(_this, queue[i].path);\n                    var snapshot = new DataSnapshot_1.DataSnapshot(node, ref, PriorityIndex_1.PRIORITY_INDEX);\n                    callbacks.push(queue[i].onComplete.bind(null, null, true, snapshot));\n                }\n                queue[i].unwatcher();\n            }\n            // Now remove the completed transactions.\n            _this.pruneCompletedTransactionsBelowNode_(_this.transactionQueueTree_.subTree(path));\n            // There may be pending transactions that we can now send.\n            _this.sendReadyTransactions_();\n            _this.eventQueue_.raiseEventsForChangedPath(path, events);\n            // Finally, trigger onComplete callbacks.\n            for (var i = 0; i < callbacks.length; i++) {\n                util_2.exceptionGuard(callbacks[i]);\n            }\n        }\n        else {\n            // transactions are no longer sent.  Update their status appropriately.\n            if (status === 'datastale') {\n                for (var i = 0; i < queue.length; i++) {\n                    if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT)\n                        queue[i].status = TransactionStatus.NEEDS_ABORT;\n                    else\n                        queue[i].status = TransactionStatus.RUN;\n                }\n            }\n            else {\n                util_2.warn('transaction at ' + pathToSend.toString() + ' failed: ' + status);\n                for (var i = 0; i < queue.length; i++) {\n                    queue[i].status = TransactionStatus.NEEDS_ABORT;\n                    queue[i].abortReason = status;\n                }\n            }\n            _this.rerunTransactions_(path);\n        }\n    }, latestHash);\n};\n/**\n * Finds all transactions dependent on the data at changedPath and reruns them.\n *\n * Should be called any time cached data changes.\n *\n * Return the highest path that was affected by rerunning transactions.  This is the path at which events need to\n * be raised for.\n *\n * @param {!Path} changedPath The path in mergedData that changed.\n * @return {!Path} The rootmost path that was affected by rerunning transactions.\n * @private\n */\nRepo_1.Repo.prototype.rerunTransactions_ = function (changedPath) {\n    var rootMostTransactionNode = this.getAncestorTransactionNode_(changedPath);\n    var path = rootMostTransactionNode.path();\n    var queue = this.buildTransactionQueue_(rootMostTransactionNode);\n    this.rerunTransactionQueue_(queue, path);\n    return path;\n};\n/**\n * Does all the work of rerunning transactions (as well as cleans up aborted transactions and whatnot).\n *\n * @param {Array.<Transaction>} queue The queue of transactions to run.\n * @param {!Path} path The path the queue is for.\n * @private\n */\nRepo_1.Repo.prototype.rerunTransactionQueue_ = function (queue, path) {\n    if (queue.length === 0) {\n        return; // Nothing to do!\n    }\n    // Queue up the callbacks and fire them after cleaning up all of our transaction state, since\n    // the callback could trigger more transactions or sets.\n    var callbacks = [];\n    var events = [];\n    // Ignore all of the sets we're going to re-run.\n    var txnsToRerun = queue.filter(function (q) {\n        return q.status === TransactionStatus.RUN;\n    });\n    var setsToIgnore = txnsToRerun.map(function (q) {\n        return q.currentWriteId;\n    });\n    for (var i = 0; i < queue.length; i++) {\n        var transaction = queue[i];\n        var relativePath = Path_1.Path.relativePath(path, transaction.path);\n        var abortTransaction = false, abortReason = void 0;\n        util_1.assert(relativePath !== null, 'rerunTransactionsUnderNode_: relativePath should not be null.');\n        if (transaction.status === TransactionStatus.NEEDS_ABORT) {\n            abortTransaction = true;\n            abortReason = transaction.abortReason;\n            events = events.concat(this.serverSyncTree_.ackUserWrite(transaction.currentWriteId, true));\n        }\n        else if (transaction.status === TransactionStatus.RUN) {\n            if (transaction.retryCount >= Repo_1.Repo.MAX_TRANSACTION_RETRIES_) {\n                abortTransaction = true;\n                abortReason = 'maxretry';\n                events = events.concat(this.serverSyncTree_.ackUserWrite(transaction.currentWriteId, true));\n            }\n            else {\n                // This code reruns a transaction\n                var currentNode = this.getLatestState_(transaction.path, setsToIgnore);\n                transaction.currentInputSnapshot = currentNode;\n                var newData = queue[i].update(currentNode.val());\n                if (newData !== undefined) {\n                    validation_1.validateFirebaseData('transaction failed: Data returned ', newData, transaction.path);\n                    var newDataNode = nodeFromJSON_1.nodeFromJSON(newData);\n                    var hasExplicitPriority = typeof newData === 'object' &&\n                        newData != null &&\n                        util_3.contains(newData, '.priority');\n                    if (!hasExplicitPriority) {\n                        // Keep the old priority if there wasn't a priority explicitly specified.\n                        newDataNode = newDataNode.updatePriority(currentNode.getPriority());\n                    }\n                    var oldWriteId = transaction.currentWriteId;\n                    var serverValues = this.generateServerValues();\n                    var newNodeResolved = ServerValues_1.resolveDeferredValueSnapshot(newDataNode, serverValues);\n                    transaction.currentOutputSnapshotRaw = newDataNode;\n                    transaction.currentOutputSnapshotResolved = newNodeResolved;\n                    transaction.currentWriteId = this.getNextWriteId_();\n                    // Mutates setsToIgnore in place\n                    setsToIgnore.splice(setsToIgnore.indexOf(oldWriteId), 1);\n                    events = events.concat(this.serverSyncTree_.applyUserOverwrite(transaction.path, newNodeResolved, transaction.currentWriteId, transaction.applyLocally));\n                    events = events.concat(this.serverSyncTree_.ackUserWrite(oldWriteId, true));\n                }\n                else {\n                    abortTransaction = true;\n                    abortReason = 'nodata';\n                    events = events.concat(this.serverSyncTree_.ackUserWrite(transaction.currentWriteId, true));\n                }\n            }\n        }\n        this.eventQueue_.raiseEventsForChangedPath(path, events);\n        events = [];\n        if (abortTransaction) {\n            // Abort.\n            queue[i].status = TransactionStatus.COMPLETED;\n            // Removing a listener can trigger pruning which can muck with mergedData/visibleData (as it prunes data).\n            // So defer the unwatcher until we're done.\n            (function (unwatcher) {\n                setTimeout(unwatcher, Math.floor(0));\n            })(queue[i].unwatcher);\n            if (queue[i].onComplete) {\n                if (abortReason === 'nodata') {\n                    var ref = new Reference_1.Reference(this, queue[i].path);\n                    // We set this field immediately, so it's safe to cast to an actual snapshot\n                    var lastInput /** @type {!Node} */ = queue[i].currentInputSnapshot;\n                    var snapshot = new DataSnapshot_1.DataSnapshot(lastInput, ref, PriorityIndex_1.PRIORITY_INDEX);\n                    callbacks.push(queue[i].onComplete.bind(null, null, false, snapshot));\n                }\n                else {\n                    callbacks.push(queue[i].onComplete.bind(null, new Error(abortReason), false, null));\n                }\n            }\n        }\n    }\n    // Clean up completed transactions.\n    this.pruneCompletedTransactionsBelowNode_(this.transactionQueueTree_);\n    // Now fire callbacks, now that we're in a good, known state.\n    for (var i = 0; i < callbacks.length; i++) {\n        util_2.exceptionGuard(callbacks[i]);\n    }\n    // Try to send the transaction result to the server.\n    this.sendReadyTransactions_();\n};\n/**\n * Returns the rootmost ancestor node of the specified path that has a pending transaction on it, or just returns\n * the node for the given path if there are no pending transactions on any ancestor.\n *\n * @param {!Path} path The location to start at.\n * @return {!Tree.<Array.<!Transaction>>} The rootmost node with a transaction.\n * @private\n */\nRepo_1.Repo.prototype.getAncestorTransactionNode_ = function (path) {\n    var front;\n    // Start at the root and walk deeper into the tree towards path until we find a node with pending transactions.\n    var transactionNode = this.transactionQueueTree_;\n    while ((front = path.getFront()) !== null &&\n        transactionNode.getValue() === null) {\n        transactionNode = transactionNode.subTree(front);\n        path = path.popFront();\n    }\n    return transactionNode;\n};\n/**\n * Builds the queue of all transactions at or below the specified transactionNode.\n *\n * @param {!Tree.<Array.<Transaction>>} transactionNode\n * @return {Array.<Transaction>} The generated queue.\n * @private\n */\nRepo_1.Repo.prototype.buildTransactionQueue_ = function (transactionNode) {\n    // Walk any child transaction queues and aggregate them into a single queue.\n    var transactionQueue = [];\n    this.aggregateTransactionQueuesForNode_(transactionNode, transactionQueue);\n    // Sort them by the order the transactions were created.\n    transactionQueue.sort(function (a, b) {\n        return a.order - b.order;\n    });\n    return transactionQueue;\n};\n/**\n * @param {!Tree.<Array.<Transaction>>} node\n * @param {Array.<Transaction>} queue\n * @private\n */\nRepo_1.Repo.prototype.aggregateTransactionQueuesForNode_ = function (node, queue) {\n    var _this = this;\n    var nodeQueue = node.getValue();\n    if (nodeQueue !== null) {\n        for (var i = 0; i < nodeQueue.length; i++) {\n            queue.push(nodeQueue[i]);\n        }\n    }\n    node.forEachChild(function (child) {\n        _this.aggregateTransactionQueuesForNode_(child, queue);\n    });\n};\n/**\n * Remove COMPLETED transactions at or below this node in the transactionQueueTree_.\n *\n * @param {!Tree.<Array.<!Transaction>>} node\n * @private\n */\nRepo_1.Repo.prototype.pruneCompletedTransactionsBelowNode_ = function (node) {\n    var _this = this;\n    var queue = node.getValue();\n    if (queue) {\n        var to = 0;\n        for (var from = 0; from < queue.length; from++) {\n            if (queue[from].status !== TransactionStatus.COMPLETED) {\n                queue[to] = queue[from];\n                to++;\n            }\n        }\n        queue.length = to;\n        node.setValue(queue.length > 0 ? queue : null);\n    }\n    node.forEachChild(function (childNode) {\n        _this.pruneCompletedTransactionsBelowNode_(childNode);\n    });\n};\n/**\n * Aborts all transactions on ancestors or descendants of the specified path.  Called when doing a set() or update()\n * since we consider them incompatible with transactions.\n *\n * @param {!Path} path Path for which we want to abort related transactions.\n * @return {!Path}\n * @private\n */\nRepo_1.Repo.prototype.abortTransactions_ = function (path) {\n    var _this = this;\n    var affectedPath = this.getAncestorTransactionNode_(path).path();\n    var transactionNode = this.transactionQueueTree_.subTree(path);\n    transactionNode.forEachAncestor(function (node) {\n        _this.abortTransactionsOnNode_(node);\n    });\n    this.abortTransactionsOnNode_(transactionNode);\n    transactionNode.forEachDescendant(function (node) {\n        _this.abortTransactionsOnNode_(node);\n    });\n    return affectedPath;\n};\n/**\n * Abort transactions stored in this transaction queue node.\n *\n * @param {!Tree.<Array.<Transaction>>} node Node to abort transactions for.\n * @private\n */\nRepo_1.Repo.prototype.abortTransactionsOnNode_ = function (node) {\n    var queue = node.getValue();\n    if (queue !== null) {\n        // Queue up the callbacks and fire them after cleaning up all of our transaction state, since\n        // the callback could trigger more transactions or sets.\n        var callbacks = [];\n        // Go through queue.  Any already-sent transactions must be marked for abort, while the unsent ones\n        // can be immediately aborted and removed.\n        var events = [];\n        var lastSent = -1;\n        for (var i = 0; i < queue.length; i++) {\n            if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT) {\n                // Already marked.  No action needed.\n            }\n            else if (queue[i].status === TransactionStatus.SENT) {\n                util_1.assert(lastSent === i - 1, 'All SENT items should be at beginning of queue.');\n                lastSent = i;\n                // Mark transaction for abort when it comes back.\n                queue[i].status = TransactionStatus.SENT_NEEDS_ABORT;\n                queue[i].abortReason = 'set';\n            }\n            else {\n                util_1.assert(queue[i].status === TransactionStatus.RUN, 'Unexpected transaction status in abort');\n                // We can abort it immediately.\n                queue[i].unwatcher();\n                events = events.concat(this.serverSyncTree_.ackUserWrite(queue[i].currentWriteId, true));\n                if (queue[i].onComplete) {\n                    var snapshot = null;\n                    callbacks.push(queue[i].onComplete.bind(null, new Error('set'), false, snapshot));\n                }\n            }\n        }\n        if (lastSent === -1) {\n            // We're not waiting for any sent transactions.  We can clear the queue.\n            node.setValue(null);\n        }\n        else {\n            // Remove the transactions we aborted.\n            queue.length = lastSent + 1;\n        }\n        // Now fire the callbacks.\n        this.eventQueue_.raiseEventsForChangedPath(node.path(), events);\n        for (var i = 0; i < callbacks.length; i++) {\n            util_2.exceptionGuard(callbacks[i]);\n        }\n    }\n};\n\n//# sourceMappingURL=Repo_transaction.js.map\n"},"lineCount":566}},"hash":"7a2fc2731ef51f77ed179b88c040a664","cacheData":{"env":{}}}