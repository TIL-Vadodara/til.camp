{"dependencies":[{"name":"/Volumes/Work/forks/til.camp/package.json","includedInParent":true,"mtime":1526468255000},{"name":"/Volumes/Work/forks/til.camp/.browserslistrc","includedInParent":true,"mtime":1524300285000},{"name":"/Volumes/Work/forks/til.camp/node_modules/@firebase/database/package.json","includedInParent":true,"mtime":1519337717000},{"name":"./Operation","loc":{"line":18,"column":26}},{"name":"./Overwrite","loc":{"line":19,"column":26}},{"name":"../util/Path","loc":{"line":20,"column":21}},{"name":"@firebase/util","loc":{"line":21,"column":21}}],"generated":{"js":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0});var t=require(\"./Operation\"),e=require(\"./Overwrite\"),r=require(\"../util/Path\"),i=require(\"@firebase/util\"),n=function(){function n(e,r,i){this.source=e,this.path=r,this.children=i,this.type=t.OperationType.MERGE}return n.prototype.operationForChild=function(t){if(this.path.isEmpty()){var o=this.children.subtree(new r.Path(t));return o.isEmpty()?null:o.value?new e.Overwrite(this.source,r.Path.Empty,o.value):new n(this.source,r.Path.Empty,o)}return i.assert(this.path.getFront()===t,\"Can't get a merge for a child not on the path of the operation\"),new n(this.source,this.path.popFront(),this.children)},n.prototype.toString=function(){return\"Operation(\"+this.path+\": \"+this.source.toString()+\" merge: \"+this.children.toString()+\")\"},n}();exports.Merge=n;"},"hash":"75ee7232148eab8d7343c5b8e12df782","cacheData":{"env":{}}}